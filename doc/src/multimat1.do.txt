======= A General $d$-Dimensional multi-material test problem =======
label{tut:possion:nD:nmat}

_This section is in a preliminary state!_

The purpose of the present section is to generalize the basic
ideas from the previous section to a problem involving
an arbitrary number of materials in 1D, 2D, or 3D domains.
The example also highlights how to build more general and flexible
FEniCS applications.

More to be done:

  * Batch compilation of subdomains, see mailinglist.txt, lots of
    useful stuff in Hake's example with "pointwise", see what the
    bcs are etc.
  * Use of `near` or similar function (better: user-adjusted tolerance)

===== The PDE problem =====
label{tut:possion:nD:nmat:PDE}

We generalize the problem in Section ref{tut:possion:2D:2mat:impl}
to the case where there are $s$ materials $\Omega_0,\ldots,\Omega_{s-1}$,
with associated constant $k$ values $k_0,k_1,\ldots,k_{s-1}$,
as illustrated in Figure ref{tut:possion:nD:nmat:fig1}.

FIGURE:[fig/layers, width=480] Sketch of a multi-material problem. label{tut:possion:nD:nmat:fig1}

Although the sketch of the domain is in two dimensions, we can easily
define this problem in any number of dimensions, using
the ideas of Section ref{tut:poisson:nD}, but the layer
boundaries are planes $x_0=\hbox{const}$ and $u$ varies with
$x_0$ only.

The PDE reads

!bt
\begin{equation} label{tut:poisson:2D:varcoeff2}
    \nabla\cdot (k\nabla u) =0 \tp
\end{equation}
!et
To construct a problem where we can find an analytical solution that can
be computed to machine precision regardless of the element size,
we choose $\Omega$ as a hypercube $[0,1]^d$, and the materials as
layers in the $x_0$ direction, as depicted in
Figure ref{tut:possion:nD:nmat:fig1} for a 2D case with four materials.
The boundaries $x_0=0$ and $x_0=1$ have Dirichlet conditions
$u=0$ and $u=1$, respectively, while Neumann conditions
$\partial u/\partial n=0$ are set on the remaining boundaries.
The complete boundary-value problem is then

!bt
\begin{equation} label{tut:poisson:2D:varcoeff3}
  \begin{array}{rcll}
    \nabla\cdot \left(k(x_0)\nabla u(x_0,\ldots,x_{d-1})\right)
      &= 0 &\mbox{in } \Omega, \\
    u &= 0 &\mbox{on } \Gamma_0,\\
    u &= 1 &\mbox{on } \Gamma_1,\\
    {\partial u\over\partial n} &= 0 &\mbox{on } \Gamma_N\tp
  \end{array}
\end{equation}
!et
The domain $\Omega$ is divided into $s$ materials $\Omega_i$, $i=0,\ldots,s-1$,
where

!bt
\begin{equation*}
\Omega_i = \{ (x_0,\ldots,x_{d-1})\, |\, L_i \leq x_0 < L_{i+1}\}
\end{equation*}
!et
for given $x_0$ values $0=L_0 < L_1 < \cdots < L_s=1$
of the material (subdomain) boundaries.
The $k(x_0)$ function takes on the value $k_i$ in $\Omega_i$.

The exact solution of the basic PDE
in (ref{tut:poisson:2D:varcoeff3})

!bt
\begin{equation*}
u(x_0,\ldots,x_{d-1}) =
{\int_0^{x_0} (k(\tau ))^{-1}d\tau\over
\int_0^1 (k(\tau ))^{-1}d\tau}\tp
\end{equation*}
!et
For a piecewise constant $k(x_0)$ as explained, we get

!bt
\begin{equation}
u(x_0,\ldots,x_{d-1}) =
{(x_0-L_i)k_i^{-1} + \sum_{j=0}^{i-1} (L_{j+1}-L_j)k_j^{-1}\over
\sum_{j=0}^{s-1} (L_{j+1}-L_j)k_j^{-1}},\quad L_i\leq x_0 \leq L_{i+1}\tp
label{tut:poisson:2D:varcoeff2:exact}
\end{equation}
!et
That is, $u(x_0,\ldots,x_{d-1})$ is piecewise linear in $x_0$ and
constant in all other directions.
If $L_i$
coincides with the element boundaries, Lagrange elements will
reproduce this exact solution to machine precision, which is ideal
for a test case.

# SHOULD WE HAVE A CLASS INSTEAD? Or functions? No, class, and a module
# where both the preprocess step and the solve step and special BCs
# are handled. Separate general and special pieces of the problem and
# the implementation such that the code can easily be resued
# in a different problem (different PDE, different BCs, different domain).
# class BC with essential and natural conditions, class Domain
# ($k$ sits in domain - or in PDE or in Problem?),
# class PDE, and class Problem that has all of them.
# But illustrate this first for a simpler problem!


===== Preparing a mesh with subdomains =====
label{tut:possion:nD:nmat:prepro}

Our first task is to generate a mesh for $\Omega = [0,1]^d$ and divide
it into subdomains

!bt
\begin{equation*}
\Omega_i = \{ (x_0,\ldots,x_{d-1})\, |\, L_i < x_0 < L_{i+1}\}
\end{equation*}
!et
for given subdomain boundaries $x_0=L_i$, $i=0,\ldots,s$, $L_0=0$, $L_s=1$.
Note that the boundaries $x_0=L_i$ are points in 1D, lines in 2D, and
planes in 3D.

Let us, on the command line, specify the polynomial degree of Lagrange
elements and the number of element divisions in the various space
directions, as explained in detail in
Section ref{tut:poisson:nD}. This results in an object `mesh`
representing the interval $[0,1]$ in 1D, the unit square in 2D, or the
unit cube in 3D.

Specification of subdomains (and boundary parts, if desired) is
done using a user-defined subclass of `SubDomain`, as
explained in Section ref{tut:possion:2D:2mat:impl}.
We could, in principle,
introduce one subclass of `SubDomain` for each subdomain, and
this would be feasible if one has a small and fixed number of
subdomains as in the example in Section ref{tut:possion:2D:2mat:impl} with
two subdomains. Our present case is more general as we
have $s$ subdomains. It then makes sense to create one
subclass `Material` of `SubDomain` and have an attribute
to reflect the subdomain (material) number. We use this number
in the test whether a spatial point `x` is inside a subdomain or not:

!bc pycod
class Material(SubDomain):
    """Define material (subdomain) no. i."""
    def __init__(self, subdomain_number, subdomain_boundaries):
        self.number = subdomain_number
        self.boundaries = subdomain_boundaries
        SubDomain.__init__(self)

    def inside(self, x, on_boundary):
        i = self.number
        L = self.boundaries         # short form (cf. the math)
        if L[i] <= x[0] <= L[i+1]:
            return True
        else:
            return False
!ec
The `<=` in the test if a point is inside a subdomain is important as
`x` will equal vertex coordinates in the cells, and all vertices
of a cell must lead to a `True` return value from the `inside`
method
for the cell to be a part of the actual subdomain. That is, the
more mathematically natural test `L[i] <= x[0] < L[i+1]` fails to
include elements with $x=L_{i+1}$ as boundary in subdomain $\Omega_i$.

The marking and numbering of all subdomains
goes as follows:

!bc pycod
cell_entity_dim = mesh.topology().dim()  # = d
subdomains = MeshFunction('uint', mesh, cell_entity_dim)
# Mark subdomains with numbers i=0,1,\ldots,s (=len(L)-1)
for i in range(s):
    material_i = Material(i, L)
    material_i.mark(subdomains, i)
!ec
# Note that the subdomain numbers must $0,1,2,\ldots$.

We have now all the geometric information about subdomains in
a `MeshFunction` object `subdomains`. The subdomain number
of mesh entity number `e`, here cell `e`, is given
by `subdomains.array()[e]`.

idx{`${prog["define_layers"]}.py`}

The code presented so far had the purpose of preparing a mesh and
a mesh function defining the subdomain. It is smart to put this code
in a separate file, say `${prog["define_layers"]}.py`,
and view the code as a preprocessing step.
We must then store the computed mesh and mesh function in files.
Another program may load the files and perform the actually
solve the boundary-value problem.

Storing the mesh itself and the mesh function in XML format is done by

!bc pycod
file = File('hypercube_mesh.xml.gz')
file << mesh
file = File('layers.xml.gz')
file << subdomains
!ec

This preprocessing code knows about the layer geometries and
the corresponding $k$, which
must be propagated to the solver code. One idea is to let the
preprocessing code write a Python module containing
the `L` and `k` lists as well as an implementation of a
function that evaluates the exact solution.
The solver code can import this module to get access to `L`,
`k`, and the exact solution (for comparison).
The relevant Python code for generating a Python module may take
the form

!bc pycod
f = open('u_layered.py', 'w')
f.write("""
import numpy
L = numpy.array(
#s, float)
k = numpy.array(
#s, float)
s = len(L)-1

def u_e(x):
    # First find which subdomain x0 is located in
    for i in range(len(L)-1):
        if L[i] <= x <= L[i+1]:
            break

    # Vectorized implementation of summation:
    s2 = sum((L[1:s+1] - L[0:s])*(1.0/k[:]))
    if i == 0:
        u = (x - L[i])*(1.0/k[0])/s2
    else:
        s1 = sum((L[1:i+1] - L[0:i])*(1.0/k[0:i]))
        u = ((x - L[i])*(1.0/k[i]) + s1)/s2
    return u

if __name__ == '__main__':
    # Plot the exact solution
    from scitools.std import linspace, plot, array
    x = linspace(0, 1, 101)
    u = array([u_e(xi) for xi in x])
    print(u)
    plot(x, u)
"""
# (L, k))
f.close()
!ec


===== Solving the PDE problem =====
label{tut:possion:nD:nmat:solve}

The solver program starts with loading a prepared mesh with a mesh
function representing the subdomains:

!bc pycod
mesh = Mesh('hypercube_mesh.xml.gz')
subdomains = MeshFunction('uint', mesh, 'layers.xml.gz')
!ec

The next task is to define the $k$ function as a finite element function.
As we recall from Section ref{tut:possion:2D:2mat:impl}, a $k$ that
is constant in each element is suitable.
We then follow the recipe from Section ref{tut:possion:2D:2mat:impl}
to compute $k$:

!bc pycod
V0 = FunctionSpace(mesh, 'DG', 0)
k = Function(V0)

# Vectorized calculation
help = numpy.asarray(subdomains.array(), dtype=numpy.int32)
k.vector()[:] = numpy.choose(help, k_values)
!ec

The essential boundary conditions are defined in the same way is
in `dn2_p2D.py` from Section ref{tut:poisson:multiple:Dirichlet}
and therefore not repeated here.
The variational problem is defined and solved in a standard manner,

!bc pycod
u = TrialFunction(V)
v = TestFunction(V)
f = Constant(0)
a = k*inner(nabla_grad(u), nabla_grad(v))*dx
L = f*v*dx

problem = VariationalProblem(a, L, bc)
u = problem.solve()
!ec

Plotting the discontinuous `k` is often desired. Just a `plot(k)`
makes a continuous function out of `k`, which is not what we want.
Making a `MeshFunction` over cells and filling in the right $k$
values results in an object that can be displayed as a discontinuous field.
A relevant code is

!bc pycod
k_meshfunc = MeshFunction('double', mesh, mesh.topology().dim())

# Scalar version
for i in range(len(subdomains.array())):
    k_meshfunc.array()[i] = k_values[subdomains.array()[i]]

# Vectorized version
help = numpy.asarray(subdomains.array(), dtype=numpy.int32)
k_meshfunc.array()[:] = numpy.choose(help, k_values)

plot(k_meshfunc, title='k as mesh function')
!ec
The file `${prog["Poisson_layers"]}.py` contains the complete code.
