# Stand-alone notebook?
# #if FORMAT == "ipynb"
# #include "mako_code.txt"
# #endif

======= The equations of linear elasticity =======
label{tut:elast}

[hpl: This is *very* preliminary text! Anders, don't do much before
I have taken a round and removed this comment. Ideas are of course
welcome!]

===== Variational formulation =====
label{tut:elast:varform}

The equations governing small elastic deformations of a body $\Omega$
are

!bt
\begin{align}
\nabla\cdot\sigma &= \varrho f\hbox{ in }\Omega,
label{tut:elast:varform:equilibrium}\\
\sigma &= \lambda\,\hbox{tr}\,\varepsilon I + 2\mu\varepsilon,
label{tut:elast:varform:stresstrain}\\
\varepsilon &= \frac{1}{2}\left(\nabla u + (\nabla u)^T\right),
label{tut:elast:varform:strainu}
\end{align}
!et
where $\sigma$ is the stress tensor, $\varrho$ is the density of the
material, $f$ is the body force, $\lambda$ and $\mu$ are Lame's
elasticity coefficients for the material in $\Omega$ $I$ is the
identity tensor, tr is the trace operator on a tensor, $\varepsilon$
is the strain tensor, and $u$ is the displacement vector field.

We shall combine (ref{tut:elast:varform:stresstrain}) and
(ref{tut:elast:varform:strainu}) to

!bt
\begin{equation}
\sigma = \lambda\nabla\cdot u I + \mu(\nabla u + (\nabla u)^T)\tp
label{tut:elast:varform:stressu}
\end{equation}
!et
Note that (ref{tut:elast:varform:equilibrium})-(ref{tut:elast:varform:strainu})
can easily be transformed to a vector PDE for $u$, which is the governing
PDE for the unknown $u$. In the derivation of the variational formulation,
however, the splitting of the equations as done above is convenient.

The variational formulation of
(ref{tut:elast:varform:equilibrium})-(ref{tut:elast:varform:strainu})
consists of forming the inner product of
(ref{tut:elast:varform:equilibrium}) and a *vector* test function
$v\in \hat{V}$, where $\hat{V}$ is a test vector function space, and
integrating over the domain $\Omega$:

!bt
\[ \int_\Omega (\nabla\cdot\sigma) \cdot v \dx =
\int_\Omega \varrho f\cdot v\dx\tp\]
!et
Since $\nabla\cdot\sigma$ contains second-order derivatives of the primary
unknown $u$, we integrate this term by parts:

!bt
\[ \int_\Omega (\nabla\cdot\sigma) \cdot \nabla v \dx
-\int_\Omega \sigma : \nabla v\dx + \int_{\partial\Omega}
(\sigma\cdot n)\cdot v \ds,\]
!et
where the colon operator is the inner product between tensors, and $n$
is the outward unit normal at the boundary. The quantity $\sigma\cdot n$
is known as the *traction* or stress vector at the boundary, and is often
prescribed as a boundary condition. We assume that it is prescribed
at a part $\partial\Omega_T$ of the boundary and set $T = \sigma\cdot n$.
We then have

!bt
\[
\int_\Omega (\sigma : \nabla v + \varrho f\cdot v) = \int_{\partial\Omega_T}
T\cdot v\ds\tp\]
!et
Inserting (ref{tut:elast:varform:stressu}) for $\sigma$ gives the
variational form with $u$ as unknown.

We can now summarize the variational formulation as find $u\in V$ such that

!bt
\begin{equation}
a(u,v) = L(v)\quad\forall v\in\hat{V},
\end{equation}
!et
where

!bt
\begin{align}
a(u,v) &= \int_\Omega\sigma(u) :\nabla v \dx,\\
\sigma(u) &= \lambda\nabla\cdot u I + \mu(\nabla u + (\nabla u)^T),\\
L(v) &= -\int_\Omega \varrho f\cdot v\dx + \int_{\partial\Omega_T}
T\cdot v\ds\tp
\end{align}
!et

One can show that the inner product of a symmetric tensor $A$ and a
non-symmetric tensor $B$ vanishes. If we express $\nabla v$ as a sum
of its symmetric and non-symmetric parts, only the symmetric part will
survive in the product $\sigma :\nabla v$ since $\sigma$ is a
symmetric tensor. This gives rise to the slightly different
variational form

!bt
\begin{equation}
a(u,v) = \int_\Omega\sigma(u) :\varepsilon(v) \dx,
\end{equation}
!et
where $\varepsilon(v)$ is the symmetric part of $v$:

!bt
\[ \varepsilon(v) = \frac{1}{2}(\nabla v + (\nabla v)^T)\tp\]
!et


===== A simple implementation =====

=== Test problem ===

As test example, we may look at a clamped beam deformed under its
own weight.  Then $f=(0,0,-g)$ is the body force with $g$ as the
acceleration of gravity. The beam is box-shaped with length $L$ and
square cross section of width $W$. We set $u=(0,0,0)$ at the clamped
end, $x=0$. The rest of the boundaries is traction free.

Let us scale the problem. [hpl: This was meant to simplify the problem
so we don't need values for $\lambda$, $\mu$, $\varrho$, etc for a
specific material, but the scaling requires some care.]
In the equation for $u$, arising from inserting
(ref{tut:elast:varform:stresstrain}) and
(ref{tut:elast:varform:strainu}) in
(ref{tut:elast:varform:equilibrium}),

!bt
\[ \nabla\cdot(\lambda\nabla\cdot u) + \mu\nabla^2 u = \varrho f,\]
!et
we insert coordinates made dimensionless by $L$, and $\bar u=u/u_c$,
which results in the dimensionless governing equation

!bt
\[
\bar\nabla\cdot(\bar\nabla\cdot \bar u) + \beta\bar\nabla^2 \bar u =
\bar f,\quad \bar f = (0,0,\gamma),\]
!et
where $\beta = \mu/\lambda$ is a dimensionless elasticity parameter and

!bt
\[ \gamma = \frac{\varrho gL^2}{u_c\lambda}\tp\]
!et

Sometimes, one will argue to chose $u_c$ to make $\gamma$ unity ($u_c
= \varrho gL^2/\lambda$).  This is often the reasoning for getting a
$\bar u$ that is of order unity. However, in elasticity, this leads us
to displacements of the size of the geometry, which looks very strange
in plots.  We therefore want the characteristic displacement to be a
small fraction of the characteristic length of the geometry.
Actually, for a clamped beam, one has a deflection formula which gives
$u_c = \frac{3}{2}\varrho gL^2\delta^2/E$, where $\delta = L/W$.
Thus, the dimensionless parameter $\delta$ is very important in the
problem (as expected: $\delta\gg 1$ is what gives beam theory).
Taking $E$ to be of the same order of $\lambda$, we realize that
$\gamma \sim \delta^{-2}$.  Experiments with the code point to $\gamma
= 0.25\delta^{-2}$ as an appropriate choice.  We implement the code
with physical parameters, $\lambda$, $\mu$, $\varrho$, $g$, $L$, and
$W$, but set these to achieve the solution of the scaled problem:
$\lambda = \varrho = L = 1$, $W$ as $W/L$, $g=\gamma$, and
$\mu=\beta$.

=== Code ===

[hpl: Must explain the code. New concepts here, though not many.]

@@@CODE src/elasticity_flat.py fromto: from fenics import@# Dump solution

FIGURE: [fig/beam1, width=800 frac=1] Gravity-induced deformation of a clamped beam: deflection (left) and stress intensity (right).
