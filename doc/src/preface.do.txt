========= Preliminaries =========

======= The FEniCS Project =======

The FEniCS Project is a research and software project aiming at
creating mathematical methods and software for automated computational
mathematical modeling. This means creating easy, intuitive, efficient
and flexible software for solving partial differential equations
(PDEs) using finite element methods. FEniCS was initially created in
2003 and is developed in collaboration between researchers from a
number of universities and research institutes around the world. For
more information about FEniCS and the latest updates of the FEniCS
software and this tutorial, visit the FEniCS web page at
`http://fenicsproject.org`.

======= What you will learn =======

The goal of this tutorial is introduce the concept of programming
finite element solvers for PDEs and get you started with FEniCS
through a series of simple examples that demonstrate

  * how to define a PDE problem as a finite element variational problem,
  * how to create (mesh) simple domains,
  * how to deal with Dirichlet, Neumann, and Robin conditions,
  * how to deal with variable coefficients,
  * how to deal with domains built of several materials (subdomains),
  * how to compute derived quantities like the flux vector field or
    a functional of the solution,
  * how to quickly visualize the mesh, the solution, the flux, etc.,
  * how to solve nonlinear PDEs,
  * how to solve time-dependent PDEs,
  * how to set parameters governing solution methods for linear systems,
  * how to create domains of more complex shape.

======= Working with this tutorial =======

The mathematics of the illustrations is kept simple to better focus on
FEniCS functionality and syntax. This means that we mostly use the
Poisson equation and the time-dependent diffusion equation as model
problems, often with input data adjusted such that we get a very
simple solution that can be exactly reproduced by any standard finite
element method over a uniform, structured mesh. This latter property
greatly simplifies the verification of the implementations.
Occasionally we insert a physically more relevant example to remind
the reader that the step from solving a simple model problem to a
challenging real-world problem is often quite easy with FEniCS.

# With the fundamentals explained, we move on to physically more
# complicated problems, including systems of PDEs, and show how to build
# more complete simulation codes.

Using FEniCS to solve PDEs may seem to require a thorough
understanding of the abstract mathematical framework of the finite
element method as well as expertise in Python programming.
Nevertheless, it turns out that many users are able to pick up the
fundamentals of finite elements *and* Python programming as they go
along with this tutorial. Simply keep on reading and try out the
examples. You will be amazed of how easy it is to solve PDEs with
FEniCS!

======= Obtaining the software =======

Reading this tutorial obviously requires access to FEniCS. FEniCS is a
complex software library, both in itself and due to its many
dependencies to state-of-the-art open-source scientific software
libraries. Manually building FEniCS and all its dependencies from
source can thus be a daunting task. Even for an expert who knows
exactly how to configure and build each component, a full build can
literally take hours! In addition to the complexity of the software
itself, there is an additional layer of complexity in how many
different kinds of operating systems (GNU/Linux, Mac OS X, Windows)
that may be running on a user's laptop or compute server, with
different requirements for how to configure and build software.

For this reason, the FEniCS Project provides prebuilt packages to make
the installation easy, fast and foolproof.

===== Installation using Docker containers =====

A modern solution to the challenge of software installation on diverse
software platforms is to use so-called *containers*. The FEniCS
Project provides custom-made containers that are controlled,
consistent and high-performance software environments for FEniCS
programming. FEniCS containers work equally well[^dockerperformance]
on all operating systems, including Linux, Mac and Windows.

[^dockerperformance]: Running Docker containers on Mac and Windows
involves a small performance overhead compared to running Docker
containers on Linux. However, this performance penalty is typically
small and is often compensated for by using the highly tuned and
optimized version of FEniCS that comes with the official FEniCS
containers, compared to building FEniCS and its dependencies from
source on Mac or Windows.

To use FEniCS containers, you must first install the Docker
platform. Docker installation is simple, just follow the instructions
from the Docker web page[^dockerwebpage]. Once you have installed
Docker, just copy the following line[^dockerquickstartterminal] into a
terminal window:

[^dockerwebpage]: https://www.docker.com

[^dockerquickstartterminal]: Mac and Windows users should make sure to run this command inside the Docker Quickstart Terminal.

!bc sys
Terminal> curl -s http://get.fenicsproject.org | sh
!ec

This will install the program `fenicsproject` on your system. This
command lets you easily create FEniCS sessions (containers) on your
system:

!bc sys
Terminal> fenicsproject run
!ec

This command has several useful options, such easily switching between
the latest release of FEniCS, the latest development version and many
more. To learn more, type `fenicsproject help`.

===== Installation using Ubuntu packages =====

For users of Ubuntu GNU/Linux, FEniCS can also be installed easily via
the standard Ubuntu package manager `apt-get`. Just copy the following
lines into a terminal window:

!bc sys
Terminal> sudo add-apt-repository ppa:fenics-packages/fenics
Terminal> sudo apt-get update
Terminal> sudo apt-get install fenics
Terminal> sudo apt-get dist-upgrade
!ec

This will add the FEniCS package archive (PPA) to your Ubuntu
computer's list of software sources and then install FEniCS. This step
will also automatically install packages for dependencies of FEniCS.

!bwarning Watch out for old packages!
In addition to being available from the FEniCS PPA, the FEniCS
software is also part of the official Ubuntu repositories. However,
depending on which release of Ubuntu you are running, and when this
release was created in relation to the latest FEniCS release, the
official Ubuntu repositories might contain an outdated version of
FEniCS. For this reason, it is better to install from the FEniCS PPA.
!ewarning

===== Testing your installation =====

Once you have installed FEniCS, you should make a quick test to see
that your installation works properly. To do this, type the following
command in a FEniCS-enabled[^dockerreminder] terminal:

[^dockerreminder]: For users of FEniCS containers, this means first
running the command `fenicsproject run`.

!bc sys
Terminal> python -c 'import fenics'
!ec

If all goes well, you should be able to run this command without any
error message (or any other output).

======= Obtaining the tutorial examples =======

[AL: I AM HERE]

[hpl: Rethink how to organize program examples!]
[hpl: Drop transient and stationary.]

All the examples discussed in the following are available as
executable Python source code files in a "directory tree": "${src_url}".
File paths reflect the nature of the PDE problem being solved. For
example, `poisson/${prog['p2D_iter']}.py` has a descriptive directory
path and a very brief Unix-style filename (here `p2D` for Poisson 2D
problem, and `_iter` for a version with iterative linear solvers).
# #ifdef OLD_NAMING
The latter indicates a
second Dirichlet problem example (`d2`), with a brief postfix `p2D`
which here is meant to identify a 2D Poisson problem and help to
provide a unique filename among all the programs.  Quite similarly,
`diffusion/${prog['sin_daD']}.py` is the file associated with a
transient diffusion PDE, with `sin` as an identifier for a sinusoidal
boundary condition in time and `daD` as an identifier for a diffusion
problem (`d`) where the code works in "anyD" (`aD`), i.e., 1D,
2D, or 3D. We will occasionally only make references to the basename
of a previously introduced filename, say `${prog["d2_p2D"]}.py`, instead of the
much longer complete name `poisson/${prog["d2_p2D"]}.py`.
# #endif

__The FEniCS version.__
This document is up-to-date with FEniCS version 1.6. To see which version
you have, run the following command in a Unix/Linux terminal window if
you run Python version 2.7:

!bc sys
Terminal> python -c 'import fenics; print fenics.__version__'
1.6.0
!ec
In Python version 3.x you must write

!bc sys
Terminal> python -c 'import fenics; print(fenics.__version__)'
1.6.0
!ec

__The Python version.__
Python comes in two versions, 2 and 3, and these are not compatible.
FEniCS has a code base that runs under both versions.
All the programs in this tutorial are also developed such that they
can be run under both Python 2 and 3. Programs that need to print must
then start with

!bc pycod
from __future__ import print_function
!ec
to  enable the `print` function from Python 3 in Python 2. All
use of `print` in the programs consists of function calls, like
`print('a:', a)`. Almost all other constructions are of a form that looks the
same in Python 2 and 3.
