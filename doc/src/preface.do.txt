========= Preface =========

FEniCS is a user-friendly tool for solving partial differential
equations (PDEs). The goal of this tutorial is to get you started with
FEniCS through a series of simple examples that demonstrate

  * how to define the PDE problem in terms of a variational problem,
  * how to define simple domains,
  * how to deal with Dirichlet, Neumann, and Robin conditions,
  * how to deal with variable coefficients,
  * how to deal with domains built of several materials (subdomains),
  * how to compute derived quantities like the flux vector field or
    a functional of the solution,
  * how to quickly visualize the mesh, the solution, the flux, etc.,
  * how to solve nonlinear PDEs in various ways,
  * how to deal with time-dependent PDEs,
  * how to set parameters governing solution methods for linear systems,
  * how to create domains of more complex shape.

The mathematics of the illustrations is kept simple to better focus
on FEniCS functionality and syntax. This means that we mostly use
the Poisson equation and the time-dependent diffusion equation
as model problems, often with input data adjusted such that we get
a very simple solution that can be exactly reproduced by any standard
finite element method over a uniform, structured mesh. This
latter property greatly simplifies the verification of the implementations.
Occasionally we insert a physically more relevant example
to remind the reader that changing the PDE and boundary
conditions to something more real might often be a trivial task.

# With the fundamentals explained, we move on to physically more
# complicated problems, including systems of PDEs, and show how to build
# more complete simulation codes.

FEniCS may seem to require a thorough understanding of the abstract
mathematical version of the finite element method as well as
familiarity with the Python programming language.  Nevertheless, it
turns out that many are able to pick up the fundamentals of finite
elements *and* Python programming as they go along with this
tutorial. Simply keep on reading and try out the examples. You will be
amazed of how easy it is to solve PDEs with FEniCS!

Reading this tutorial obviously requires access to a machine where the
FEniCS software is installed. Section ref{tut:app:install} explains
briefly how to install the necessary tools.

[hpl: Rethink how to organize program examples!]
[hpl: Drop transient and stationary.]

All the examples discussed in the following are available as
executable Python source code files in a "directory tree": "${src_url}".
File paths reflect the nature of the PDE problem being solved. For
example, `poisson/${prog['p2D_iter']}.py` has a descriptive directory
path and a very brief Unix-style filename (here `p2D` for Poisson 2D
problem, and `_iter` for a version with iterative linear solvers).
# #ifdef OLD_NAMING
The latter indicates a
second Dirichlet problem example (`d2`), with a brief postfix `p2D`
which here is meant to identify a 2D Poisson problem and help to
provide a unique filename among all the programs.  Quite similarly,
`diffusion/${prog['sin_daD']}.py` is the file associated with a
transient diffusion PDE, with `sin` as an identifier for a sinusoidal
boundary condition in time and `daD` as an identifier for a diffusion
problem (`d`) where the code works in "anyD" (`aD`), i.e., 1D,
2D, or 3D. We will occasionally only make references to the basename
of a previously introduced filename, say `${prog["d2_p2D"]}.py`, instead of the
much longer complete name `poisson/${prog["d2_p2D"]}.py`.
# #endif

__The FEniCS version.__
This document is up-to-date with FEniCS version 1.6. To see which version
you have, run the following command in a Unix/Linux terminal window if
you run Python version 2.7:

!bc sys
Terminal> python -c 'import fenics; print fenics.__version__'
1.6.0
!ec
In Python version 3.x you must write

!bc sys
Terminal> python -c 'import fenics; print(fenics.__version__)'
1.6.0
!ec

__The Python version.__
Python comes in two versions, 2 and 3, and these are not compatible.
FEniCS has a code base that runs under both versions.
All the programs in this tutorial are also developed such that they
can be run under both Python 2 and 3. Programs that need to print must
then start with

!bc pycod
from __future__ import print_function
!ec
to  enable the `print` function from Python 3 in Python 2. All
use of `print` in the programs consists of function calls, like
`print('a:', a)`. Almost all other constructions are of a form that looks the
same in Python 2 and 3.

=== Acknowledgments ===

We thank Johan Hake, Kent-Andre Mardal, and Kristian Valen-Sendstad
for promptly answering all questions about FEniCS functionality and
for implementing all requests when preparing the first version of this
tutorial for the FEniCS book cite{FEniCS}.  We are particularly thankful to
Professor Douglas Arnold for very valuable feedback on early
versions of the text.  Øystein Sørensen pointed out a lot of typos and
contributed with many helpful comments.  Many errors and typos were
also reported by Mauricio Angeles, Ida Drøsdal, Miroslav Kuchta, Hans
Ekkehard Plesser, Marie Rognes, and Hans Joachim (Achim) Scroll.
Ekkehard Ellmann as well as two anonymous reviewers provided a series
of suggestions and improvements.

# #if FORMAT in ("latex", "pdflatex")
\vspace{1cm}

\noindent
{\it Oslo, February 2016}  \hfill  {\it Hans Petter Langtangen, Anders Logg}
# #endif
