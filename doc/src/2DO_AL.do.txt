======= To-do list =======

===== AL list =====

 * Title?: Writing State-of-the-Art Finite Element Solvers in Minutes
   (HPL: Yes - let's have this for a while)
 * Title: "Writing... in minutes" sounds more like a good subtitle
   than an actual title. We already have a good subtitle in "The
   FEniCS tutorial" so let's try to find a more "serious" main title.
   (HPL: What about switching?)
 * Title?: Introduction to Finite Element Programming
 * Add 2nd author
 * Rewrite abstract to reflect new title and non-initial state of book
 * Rename and expand Chapter 5: Boundary conditions, markers and subdomains
   (many and confusing ways to do this, `MeshFunctions`, `MeshData`, etc)
   (HPL: This is important and confusing, but very much needed early on)
 * DONE: Add chapter on installation (difficult, still in flux)
 * Installation chapter should be number 0
 * Remove capitalization of sections in Chapter 8
 * Add new chapter: "Advanced example: Linear elasticity"
   (HPL: do this first - important for many courses)
 * Add new chapter: "Advanced example: Hyperelasticity"
 * Add new chapter: "Advanced example: Incompressible Navier-Stokes"
 * Place these chapters near end of book so progression becomes:
    * Installation
    * Fundamentals (3 chapters: Fundamentals, Time-dependent, Nonlinear)
    * Misc technical chapters (boundary conditions, geometries etc)
      (HPL: Think we need these things before time-dependent, or maybe
      split the very simplest things from time-dependent (1st example)
      and nonlinear (`solve(F==0, ...)`) and place in fundamentals?)
    * Advanced examples (using previously discussed techniques)
 * Add chapter on performance and profiling? HPL: Yes!
 * Move source code links to `http://fenisproject.org/tutorial` (we can
   set up a cron job to copy files from `hplgit`)
 * Number examples sequentially, something like
    * `fenics_tutorial_01_poisson_first.py`
    * `fenics_tutorial_05_poisson_nonlinear.py`
   Hierarchic structure becomes complicated, better with flat structure
   (HPL: These filenames are too long, giving too long lines in the text
   and the need for lots of rewrites. We have an automated scheme to
   assign new filenames to the logical files that we use for the text.
   Right now the names are `ft01_poisson_flat.py`.)
 * Add command `fenics-version`
 * DONE: Use dot and grad in Poisson example (not `inner` and `nabla_grad`)
 * Use new notation `'P'` instead of `'Lagrange'` in `FunctionSpace`. HPL: Done.
   (HPL: Not yet documented in `FunctionSpace` ;-)
 * DONE: Use `from fenics import *`
 * Fix copyright footer so we avoid the linebreak. HPL: Fixed. This and similar adjustments in the latex file is easily done by auto editing in `make.sh`.
 * How does doconce handle -- and ---? HPL: Like latex. Just use ndash if you want. ndash and mdash are ignored in other formats than latex and html where there is no support for this. Just introduce ndash where you like, as in Navier--Stokes.
 * When to use $\tp$ and when to use . ? HPL: Springer had a rule with thinspace. I don't know if it applies to the brief series, but it became a habit of mine since other styles demanded it.
 * When to specify floats as 2 or 2.0? HPL: In code? Anytime there is a danger of integer division.
