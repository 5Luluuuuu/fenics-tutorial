!split
=========== Mesh generation, subdomains and boundary conditions ===========
label{ch:subdomains}

!bquote
In this chapter, we focus on a fundamental step in the solution of
many PDE problems: the generation of a mesh, and the specification of subdomains and boundary conditions. Our starting point is the 2D Poisson equation where
we introduce the basic concepts, before applying them in a more
challenging 3D convection-diffusion problem.
!equote

!split
========= Multiple domains and boundaries =========

[hpl: Need a little intro.]


======= Combining Dirichlet and Neumann conditions =======
label{ch:poisson0:DN}

Let us make a slight extension of our two-dimensional Poisson problem
with Dirichlet conditions on the entire boundary and add a Neumann boundary
condition. The domain is still the unit square, but now we set the
Dirichlet condition $u=\ub$ at the left and right sides, $x=0$ and
$x=1$, while the Neumann condition

!bt
\begin{equation*}
-{\partial u\over\partial n}=g
\end{equation*}
!et
is applied to the remaining
sides $y=0$ and $y=1$.
The Neumann condition is also known as a *natural boundary condition*
(in contrast to an essential boundary condition).

idx{Neumann boundary conditions}

===== PDE problem =====

Let $\Gamma_D$ and $\Gamma_N$ denote the parts of $\partial\Omega$
where the Dirichlet and Neumann conditions apply, respectively.  The
complete boundary-value problem can be written as

!bt
\begin{align}
    - \nabla^2 u &= f \mbox{ in } \Omega,  \\
    u &= \ub \mbox{ on } \Gamma_D,       \\
    - {\partial u\over\partial n} &= g \mbox{ on } \Gamma_N  \tp
\end{align}
!et
Again we choose $u=1+x^2 + 2y^2$ as the exact solution and adjust $f$, $g$, and
$\ub$ accordingly:

!bt
\begin{align*}
f &= -6,\\
g &= \left\lbrace\begin{array}{ll}
-4, & y=1\\
0,  & y=0
\end{array}\right.\\
\ub &= 1 + x^2 + 2y^2\tp
\end{align*}
!et
For ease of programming we may introduce a $g$ function defined over the whole
of $\Omega$ such that $g$ takes on the right values at $y=0$ and
$y=1$. One possible extension is

!bt
\begin{equation*}
g(x,y) = -4y\tp
\end{equation*}
!et

===== Variational formulation =====

The first task is to derive the variational problem. This time we cannot
omit the boundary term arising from the integration by parts, because
$v$ is only zero on $\Gamma_D$. We have

!bt
\begin{equation*}
 -\int_\Omega (\nabla^2 u)v \dx
= \int_\Omega\nabla u\cdot\nabla v \dx - \int_{\partial\Omega}{\partial u\over
\partial n}v \ds,
\end{equation*}
!et
and since $v=0$ on $\Gamma_D$,

!bt
\begin{equation*}
- \int_{\partial\Omega}{\partial u\over
\partial n}v \ds
=
- \int_{\Gamma_N}{\partial u\over
\partial n}v \ds
= \int_{\Gamma_N}gv \ds,
\end{equation*}
!et
by applying the boundary condition on $\Gamma_N$.
The resulting weak form reads

!bt
\begin{equation}
\int_{\Omega} \nabla u \cdot \nabla v \dx +
\int_{\Gamma_N} gv \ds
= \int_{\Omega} fv \dx\tp
label{ch:poisson0:2D:DN:weak}
\end{equation}
!et
Expressing this equation
in the standard notation $a(u,v)=L(v)$ is straightforward with

!bt
\begin{align}
a(u, v) &= \int_{\Omega} \nabla u \cdot \nabla v \dx,
label{ftut:poisson2:vard:a}\\
L(v) &= \int_{\Omega} fv \dx -
\int_{\Gamma_N} gv \ds\tp  label{ftut:poisson2:vard:L}
\end{align}
!et

===== FEniCS implementation =====

How does the Neumann condition impact the implementation?
Let us go back to the very simplest file,
`${prog["poisson"]}.py`, from
ref[Section ref{ch:poisson0:impl}][ in cite{ftut1}][the
section "FEniCS implementation": "" in cite{ftut1}],
we realize that the statements remain almost the same.
Only two adjustments are necessary:

  * The function describing the boundary where Dirichlet conditions
    apply must be modified.
  * The new boundary term must be added to the expression in `L`.

The first adjustment can be coded as

!bc pycod
def Dirichlet_boundary(x, on_boundary):
    if on_boundary:
        if x[0] == 0 or x[0] == 1:
            return True
        else:
            return False
    else:
        return False
!ec
A more compact implementation reads

!bc pycod
def Dirichlet_boundary(x, on_boundary):
    return on_boundary and (x[0] == 0 or x[0] == 1)
!ec

!bwarning Never use `==` for comparing real numbers!
A list like `x[0] == 1` should never be used if `x[0]` is a real number,
because rounding errors in `x[0]` may make the test fail even when it is
mathematically correct. Consider

!bc pycod
>>> 0.1 + 0.2 == 0.3
False
>>> 0.1 + 0.2
0.30000000000000004
!ec

Comparison of real numbers need to use tolerances! The values of the
tolerances depend on the size of the numbers involved in arithmetic
operations:

!bc pycod
>>> abs(0.1+0.2 - 0.3)
5.551115123125783e-17
>>> abs(1.1+1.2 - 2.3)
0.0
>>> abs(10.1+10.2 - 20.3)
3.552713678800501e-15
>>> abs(100.1+100.2 - 200.3)
0.0
>>> abs(1000.1+1000.2 - 2000.3)
2.2737367544323206e-13
>>> abs(10000.1+10000.2 - 20000.3)
3.637978807091713e-12
!ec
For numbers around unity, tolerances as low as $3\cdot 10^{-16}$ can be used
(in fact, this tolerance is known as the constant `DOLFIN_EPS` in FEniCS),
otherwise an appropriate tolerance must be found.

Testing for `x[0] == 1` should therefore be implemented as

!bc pycod
tol = 1E-14
if abs(x[0] - 1) < tol:
    ...
!ec
!ewarning

idx{`near`}

Here is a new boundary function using tolerances in the test:

!bc pycod
def Dirichlet_boundary(x, on_boundary):
    tol = 1E-14   # tolerance for coordinate comparisons
    return on_boundary and \
           (abs(x[0]) < tol or abs(x[0] - 1) < tol)
!ec
This function can be written a bit more elegantly using the `near`
function in FEniCS:

!bc pycod
def Dirichlet_boundary(x, on_boundary):
    tol = 1E-14   # tolerance for coordinate comparisons
    return on_boundary and \
           (near(x[0], 0, tol) or near(x[1], 1, tol))
!ec

The second adjustment of our program concerns the definition of `L`,
where we have to add a boundary integral and a definition of the $g$
function to be integrated:

!bc pycod
g = Expression('-4*x[1]')
L = f*v*dx - g*v*ds
!ec
The `ds` variable implies a boundary integral, while `dx`
implies an integral over the domain $\Omega$.
No more modifications are necessary.

======= Setting multiple Dirichlet conditions =======
label{ch:poisson0:multiple:Dirichlet}

The PDE problem from the previous section applies a function $\ub(x,y)$
for setting Dirichlet conditions at two parts of the boundary.
Having a single function to set multiple Dirichlet conditions is
seldom possible. The more general case is to have $m$ functions for
setting Dirichlet conditions on $m$ parts of the boundary.
The purpose of this section is to explain how such multiple conditions
are treated in FEniCS programs.

Let us return to the case from Section ref{ch:poisson0:DN} and define
two separate functions for the two Dirichlet conditions:

!bt
\begin{align*}
    - \nabla^2 u &= -6 \mbox{ in } \Omega, \\
    u &= u_L \mbox{ on } \Gamma_{D,0}, \\
    u &= u_R \mbox{ on } \Gamma_{D,1}, \\
    - {\partial u\over\partial n} &= g \mbox{ on } \Gamma_N \tp
\end{align*}
!et
Here, $\Gamma_{D,0}$ is the boundary $x=0$, while $\Gamma_{D,1}$ corresponds
to the boundary $x=1$.  We have that $u_L = 1 + 2y^2$, $u_R = 2 +
2y^2$, and $g=-4y$.

For the left boundary $\Gamma_0$ we define the
usual triple of a function for the boundary value, a function for
defining the boundary of interest, and a `DirichletBC` object:

!bc pycod
u_L = Expression('1 + 2*x[1]*x[1]')

def left_boundary(x, on_boundary):
    tol = 1E-14   # tolerance for coordinate comparisons
    return on_boundary and abs(x[0]) < tol

Gamma_0 = DirichletBC(V, u_L, left_boundary)
!ec
For the boundary $x=1$ we write a similar code snippet:

!bc pycod
u_R = Expression('2 + 2*x[1]*x[1]')

def right_boundary(x, on_boundary):
    tol = 1E-14   # tolerance for coordinate comparisons
    return on_boundary and abs(x[0] - 1) < tol

Gamma_1 = DirichletBC(V, u_R, right_boundary)
!ec
The various essential conditions are then collected in a list
and used in the solution process:

!bc pycod
bcs = [Gamma_0, Gamma_1]
...
solve(a == L, u, bcs)
# or
problem = LinearVariationalProblem(a, L, u, bcs)
solver  = LinearVariationalSolver(problem)
solver.solve()
!ec

In other problems, where the $u$ values are constant at a part of the
boundary, we may use a simple `Constant` object instead of an
`Expression` object.

# #ifdef EXTRA
# We come to this in a minute with internal subdomains...

===== Classes for marking Dirichlet boundaries =====

Instead of using a function like `left_boundary(x, on_boundary)` to
mark a boundary, we can alternatively use a class, which allows
for more flexibility in more complicated problems. The class for marking
a boundary is derived from class `SubDomain` and has a method `inside(self, x, on_boundary)` for the code that returns whether the `point` is on the
boundary in question or not. Our previous `left_boundary` function
takes this form in its class version:

!bc pycod
class LeftBoundary(SubDomain):
    def inside(self, x, on_boundary):
        tol = 1E-14   # tolerance for coordinate comparisons
        return on_boundary and abs(x[0]) < tol

left_boundary = LeftBoundary()
Gamma_0 = DirichletBC(V, u_L, left_boundary)
!ec
# #endif

======= Working with subdomains =======
label{ftut:possion:2D:2mat:impl}

idx{heterogeneous media}
idx{multi-material domain}


Solving PDEs in domains made up of different materials is a frequently
encountered task. In FEniCS, these kind of problems are handled by
defining subdomains inside the domain. The subdomains may represent
the various materials. We can thereafter define material properties
through functions, known in FEniCS as *mesh functions*, that are
piecewise constant in each subdomain.  A simple example with two
materials (subdomains) in 2D will demonstrate the basic steps in the
process.

FIGURE: [fig/layered_medium_2, width=400 frac=0.5] Medium with discontinuous material properties. label{ftut:possion:2D:2mat:fig1}

Suppose we want to solve

!bt
\begin{equation} label{ch:poisson0:2D:2mat:varcoeff2}
    \nabla\cdot \left\lbrack k(x,y)\nabla u(x,y)\right\rbrack = 0,
\end{equation}
!et
in a domain $\Omega$ consisting of two subdomains where $k$ takes on
a different value in each subdomain.
For simplicity, yet without loss of generality, we choose for the current
implementation
the domain $\Omega = [0,1]\times [0,1]$ and divide it into two equal
subdomains,
as depicted in Figure ref{ftut:possion:2D:2mat:fig1},

!bt
\begin{equation*}
\Omega_0 = [0, 1]\times [0,1/2],\quad
\Omega_1 = [0, 1]\times (1/2,1]\tp
\end{equation*}
!et
We define $k(x,y)=k_0$ in $\Omega_0$ and $k(x,y)=k_1$ in $\Omega_1$,
where $k_0>0$ and $k_1>0$ are given constants.

Physically, the present problem may correspond to heat conduction, where
the heat conduction in $\Omega_1$ is more efficient than
in $\Omega_0$. An alternative interpretation is flow in porous media
with two geological layers, where the layers' ability to transport
the fluid differ.

===== Expression objects with if test =====

The simplest way of implementing a variable $k$ is to define an
`Expression` object where we return the appropriate $k$ value
depending on the position in space.  Since we need some testing on the
coordinates, the most straightforward approach is to define a subclass
of `Expression`, where we can use a full Python method instead of just
a C++ string formula for specifying a function.  The method that
defines the function is called `eval`:

!bc pycod
class K(Expression):
    def set_k_values(self, k0, k1):
        self.k0, self.k1 = k0, k1

    def eval(self, value, x):
        """x: spatial point, value[0]: function value."""
	# Fill in-place value[0] for scalar function,
	# value[:] for vector function (no return)

	tol = 1E-14  # Tolerance for coordinate comparisons
        if x[1] <= 0.5+tol:
	    value[0] = self.k0
	else:
	    value[0] = self.k1

# Initialize
k = K()
k.set_k_values(1, 0.01)
!ec
The `eval` method gives great flexibility in defining functions, but a
downside is that C++ calls up `eval` in Python for each point `x`,
which is a slow process, and the number of calls is proportional to
the number of numerical integration points in the mesh (about the
number of degrees of freedom).  Function expressions in terms of
strings are compiled to efficient C++ functions, being called from
C++, so we should try to express functions as string expressions if
possible. (The `eval` method can also be defined through C++ code, but
this is much more complicated and not covered here.)  The idea is to
use inline if tests in C++:

!bc pycod
tol = 1E-14
k0 = 1.0
k1 = 0.01
k = Expression('x[1] <= 0.5+tol? k0 : k1',
               tol=tol, k0=k0, k1=k1)
!ec
The method with if tests on the location is feasible when the
subdomains have very simple shapes. A completely general method,
utilizing *mesh functions*, is described next.


idx{boundary specification (class)}

===== Mesh functions =====

We now address how to specify the subdomains $\Omega_0$ and $\Omega_1$
so that the method also works for subdomains of any shape. For this
purpose we need to use subclasses of class `SubDomain`, not only plain
functions as we have used so far for specifying boundaries. Consider
the boundary function

!bc pycod
def boundary(x, on_boundary):
    tol = 1E-14
    return on_boundary and abs(x[0]) < tol
!ec
for defining the boundary $x=0$. Instead of using such a stand-alone
function, we can create an instance (or object)
of a subclass of `SubDomain`,
which implements the `inside` method as an alternative to the
`boundary` function:

!bc pycod
class Boundary(SubDomain):
    def inside(self, x, on_boundary):
        tol = 1E-14
        return on_boundary and abs(x[0]) < tol

boundary = Boundary()
bc = DirichletBC(V, Constant(0), boundary)
!ec
A word about computer science terminology may be used here: The term
*instance* means a Python object of a particular type (such as
`SubDomain`, `Function`, `FunctionSpace`, etc.).  Many use *instance*
and *object* as interchangeable terms. In other computer programming
languages one may also use the term *variable* for the same thing.  We
mostly use the well-known term *object* in this text.

A subclass of `SubDomain` with an `inside` method offers functionality
for marking parts of the domain or the boundary. Now we need to define
one class for the subdomain $\Omega_0$ where $y\leq 1/2$ and another
for the subdomain $\Omega_1$ where $y\geq 1/2$:

!bc pycod
tol = 1E-14  # Tolerance for coordinate comparisons

class Omega0(SubDomain):
    def inside(self, x, on_boundary):
        return x[1] <= 0.5+tol

class Omega1(SubDomain):
    def inside(self, x, on_boundary):
        return x[1] >= 0.5-tol
!ec
Notice the use of `<=` and `>=` in both tests. For a cell to belong
to, e.g., $\Omega_1$, the `inside` method must return `True` for all
the vertices `x` of the cell. So to make the cells at the internal
boundary $y=1/2$ belong to $\Omega_1$, we need the test `x[1] >=
0.5`. However, because of potential rounding errors in the coordinates
`x[1]`, we use a tolerance in the comparisons: `x[1] >= 0.5-tol`.

The next task is to use a *mesh function* to mark all cells in
$\Omega_0$ with the subdomain number 0 and all cells in $\Omega_1$
with the subdomain number 1.  Our convention is to number subdomains
as $0,1,2,\ldots$.

A `MeshFunction` object is a discrete function that can be evaluated
at a set of so-called *mesh entities*. Examples of mesh entities are
cells, facets, and vertices. A `MeshFunction` over cells is suitable
to represent subdomains (materials), while a `MeshFunction` over
facets is used to represent pieces of external or internal boundaries.
Mesh functions over vertices can be used to describe continuous
fields.  The specialized classes `CellFunction` and `FacetFunction`
are used to construct mesh functions of cells and facets,
respectively.

Since we need to define subdomains of $\Omega$ in the present example,
we make use of a `CellFunction`. The constructor
is fed with two arguments: 1) the type of value: `'int'` for integers,
`'uint'` for positive (unsigned) integers, `'double'` for real
numbers, and `'bool'` for logical values; 2) a `Mesh` object.
Alternatively, the constructor can take just a filename and initialize
the `CellFunction` from data in a file.
#  #ifdef BOOK
We shall
demonstrate the file functionality in the next multi-material problem
in Section ref{ftut:possion:nD:nmat}.
#  #endif

We start with creating a `CellFunction` whose values are non-negative
integers (`'uint'`) for numbering the subdomains.
The appropriate code for two subdomains then reads

!bc pycod
materials = CellFunction('size_t', mesh)
# Mark subdomains with numbers 0 and 1
subdomain0 = Omega0()
subdomain0.mark(materials, 0)
subdomain1 = Omega1()
subdomain1.mark(materials, 1)

# Alternative
materials.set_all(0)
subdomain1.mark(materials, 1)
!ec

Calling `materials.array()` returns a `numpy` array of the
subdomain values. That is, `materials.array()[i]` is
the subdomain value of cell number `i`. This array is used to
look up the subdomain or material number of a specific element.

We need a function `k` that is constant in each subdomain $\Omega_0$
and $\Omega_1$. Since we want `k` to be a finite element function, it
is natural to choose a space of functions that is constant over each
element.  The family of discontinuous Galerkin methods, in FEniCS
denoted by `'DG'`, is suitable for this purpose. Since we want
functions that are piecewise constant, the value of the degree
parameter is zero:

!bc pycod
V0 = FunctionSpace(mesh, 'DG', 0)
k  = Function(V0)
!ec
To fill `k` with the right values in each element, we loop over
all cells (i.e., indices in `materials.array()`),
extract the corresponding subdomain number of a cell,
and assign the corresponding $k$ value to the `k.vector()` array:

!bc pycod
k_values = [1.5, 50]  # values of k in the two subdomains
for cell_no in range(len(materials.array())):
    material_no = materials.array()[cell_no]
    k.vector()[cell_no] = k_values[material_no]
!ec

Long loops in Python are known to be slow, so for large meshes
it is preferable to avoid such loops and instead use *vectorized code*.
Normally this implies that the loop must be replaced by
calls to functions from the `numpy` library that operate on complete
arrays (in efficient C code). The functionality we want in the present
case is to compute an array of the same size as
`materials.array()`, but where the value `i` of an entry
in `materials.array()` is replaced by `k_values[i]`.
Such an operation is carried out by the `numpy` function `choose`:

!bc pycod
help = numpy.asarray(materials.array(), dtype=numpy.int32)
k.vector()[:] = numpy.choose(help, k_values)
!ec
The `help` array is required since `choose` cannot work with
`materials.array()` because this array has elements of
type `uint32`. We must therefore transform this array to an array
`help` with standard `int32` integers.

The next section exemplifies a complete solver with a piecewise
constant coefficient, like $k$, defined through `SubDomain` objects,
combined with different types of boundary conditions.

idx{`CompiledSubDomain`}

===== C++ strings for subdomain definitions =====

The `SubDomain` class in Python is convenient, but leads to lots of
function calls from C++ to Python, which are slow. In large problems,
the subdomains should be defined through C++ code. This is easy to achieve
using the `CompiledSubDomain` object. Consider the definition of
classes `Omega0` and `Omega1` above in Python.
The key strings that define these subdomain can be expressed in
C++ syntax and fed to `CompiledSubDomain` as follows:

!bc pycod
tol = 1E-14  # Tolerance for coordinate comparisons

subdomain0 = CompiledSubDomain(
                'x[1] <= boundary+tol', tol=1E-14, boundary=0.5)
subdomain1 = CompiledSubDomain(
                'x[1] >= boundary-tol', tol=1E-14, boundary=0.5)
!ec
As seen, one can have parameters in the strings and specify their
values by keyword arguments.
The resulting objects, `subdomain0` and `subdomain1`, can be used
as ordinary `SubDomain` objects.

Compiled subdomain strings can be applied for specifying boundaries as
well, e.g.,

!bc pycod
y_R = CompiledSubDomain('on_boundary && near(x[1], R, eps=tol)',
                        tol=1E-14, R=2)   # y=2
!ec

It is possible to feed the C++ string (without parameters) directly as
the third argument to `DirichletBC` without explicitly constructing a
`CompiledSubDomain` object:

!bc pycod
bc1 = DirichletBC(V, value, 'on_boundary && near(x[1], 2, 1E-14)')
!ec

idx{`near`}

% if EXV:
======= Exercise: Efficiency of Python vs C++ expressions =======
label{ch:poisson0:exer:eff:expression}
file=Expression_efficiency

Consider a cube mesh with $N$ cells in each spatial direction.
We want to define a `Function` on this mesh where the
values are given by the mathematical function $f(x,y,z)=a\sin(bxyz)$,
where $a$ and $b$ are two parameters. Write a `class SineXYZ`:

!bc pycod
class SineXYZ(Expression):
    def __init__(self, a, b):
        self.a, self.b = a, b

    def eval(self, value, x):
        value[0] = self.a*sin(self.b*x[0]*x[1]*x[2])
!ec
Create an alternative `Expression` based on giving the formula for $f(x,y,z)$
as a C++ code string. Compare the computational efficiency of the
two implementations (e.g., using `time.clock()` to measure the CPU time).

The `sin` function used in class `SineXYZ.eval` can mean many things.
This is an advanced FEniCS function if imported from `fenics`.
Much more efficient versions for sin of numbers are found in `math.sin`
and `numpy.sin`. Compare the use `sin` from `fenics`, `math`, `numpy`, and
`sympy` (note that `sin` from `sympy` is very slow).

!bsol
Here is an appropriate program:

@@@CODE exer/Expression_efficiency.py
Running the program shows that `sin` from `math` is the most efficient choice,
but a string C++ runs 40 times faster. Note that `fenics.sin`, which is a
sine function in the UFL language that can work with symbolic expressions
in finite element forms, is (naturally) less efficient than the `sin`
functions for numbers in `math` and `numpy`.
!esol
% endif

======= Setting multiple Neumann, Robin, and Dirichlet conditions =======
label{ch:poisson0:multi:bc}
idx{Dirichlet boundary conditions}
idx{Neumann boundary conditions}
idx{Robin boundary conditions}
idx{boundary conditions}

Consider the model problem from Section
ref{ch:poisson0:multiple:Dirichlet} where we had both Dirichlet and
Neumann conditions.  The term `v*g*ds` in the expression for `L`
implies a boundary integral over the complete boundary, or in FEniCS
terms, an integral over all exterior facets.  However, the
contributions from the parts of the boundary where we have Dirichlet
conditions are erased when the linear system is modified by the
Dirichlet conditions.  We would like, from an efficiency point of
view, to integrate `v*g*ds` only over the parts of the boundary where
we actually have Neumann conditions.  And more importantly, in other
problems one may have different Neumann conditions or other conditions
like the Robin type condition.  With the mesh function concept we can
mark different parts of the boundary and integrate over specific
parts.  The same concept can also be used to treat multiple Dirichlet
conditions.  The forthcoming text illustrates how this is done.

===== Three types of boundary conditions =====

We extend our repertoire of boundary conditions to three types:
Dirichlet, Neumann, and Robin.  Dirichlet conditions apply to some
parts $\Gamma_{D,0}$, $\Gamma_{D,1}$, $...$, of the boundary:

!bt
\[ u_{0,0}\hbox{ on }\Gamma_{D,0},\quad
u_{0,1}\hbox{ on }\Gamma_{D,1}, \ldots\]
!et
where $u_{0,i}$ are prescribed functions, $i=0,1,\ldots$
On other parts, $\Gamma_{N,0}$, $\Gamma_{N,1}$, and so on, we have
Neumann conditions

!bt
\[ -p{\partial u\over\partial n} = g_{0}\hbox{ on }\Gamma_{N,0},\quad
-p{\partial u\over\partial n} = g_{1}\hbox{ on }\Gamma_{N,1},\quad \ldots
\]
!et
Finally, we have *Robin conditions*

!bt
\begin{equation*}
-p{\partial u\over\partial n} = r(u-s),
label{ch:poisson0:multi:bc:Robin}
\end{equation*}
!et
where $r$ and $s$ are specified functions.  The Robin condition is
most often used to model heat transfer to the surroundings and arise
naturally from Newton's cooling law. In that case, $r$ is a heat
transfer coefficient, and $s$ is the temperature of the
surroundings. Both can be space and time-dependent.
The Robin conditions apply
at some parts $\Gamma_{R,0}$, $\Gamma_{R,1}$, and so forth:

!bt
\[ -p{\partial u\over\partial n} = r_0(u-s_0)\hbox{ on }\Gamma_{R,0},\quad
-p{\partial u\over\partial n} = r_1(u-s_1)\hbox{ on }\Gamma_{R,1},\quad \ldots
\]
!et

idx{Robin condition}

===== PDE problem =====

With the notation above,
the model problem to be solved with multiple Dirichlet, Neumann, and
Robin conditions can formally be defined as

!bt
\begin{align}
-\nabla\cdot(p\nabla u) &= -f, \mbox{ in } \Omega, label{ch:poisson0:2D:DN3}\\
u &= u_{0,i} \mbox{ on } \Gamma_{D,i},\quad i=0,1,\ldots
label{ch:poisson0:2D:DN3:bcD}\\
-p{\partial u\over\partial n} &= g_i \mbox{ on } \Gamma_{N,i},\quad
i=0,1,\ldots
label{ch:poisson0:2D:DN3:bcN}\\
-p{\partial u\over\partial n} &= r_i(u-s_i) \mbox{ on } \Gamma_{R,i},\quad
i=0,1,\ldots
label{ch:poisson0:2D:DN3:bcR}
\end{align}
!et

===== Variational formulation =====

Integration by parts of $-\int_\Omega v\nabla\cdot(p\nabla u) \dx$ becomes
as usual

!bt
\begin{equation*}
 -\int_\Omega v\nabla\cdot(p\nabla u) \dx
= \int_\Omega p\nabla u\cdot \nabla v \dx -
\int_{\partial\Omega}p\frac{\partial u}{\partial n}v \ds\tp
\end{equation*}
!et
The boundary integral does not apply to the parts of
the boundary where we have Dirichlet conditions ($\Gamma_{D,i}$).
Moreover, on the remaining parts, we must split the boundary integral
into the parts where we have Neumann and Robin conditions such that we
insert the right conditions as integrands.
Specifically, we have

!bt
\begin{align*}
-\int_{\partial\Omega}p\frac{\partial u}{\partial n}v \ds
&=
-\sum_i\int_{\Gamma_{N,i}}p\frac{\partial u}{\partial n} \ds
-\sum_i\int_{\Gamma_{R,i}}p\frac{\partial u}{\partial n} \ds\\
&=
\sum_i\int_{\Gamma_{N,i}}g_i \ds +
\sum_i\int_{\Gamma_{R,i}}r_i(u-s_i) \ds\tp
\end{align*}
!et
The variational formulation then becomes

!bt
\begin{equation}
F = \int_{\Omega} p\nabla u\cdot \nabla v \dx +
\sum_i\int_{\Gamma_{N,i}} g_iv \ds +
\sum_i\int_{\Gamma_{R,i}}r_i(u-s_i)v \ds
- \int_{\Omega} fv \dx =0\tp
label{ch:poisson0:multi:bc:varform}
\end{equation}
!et

We have been used to writing
this variational formulation in the standard notation
$a(u,v)=L(v)$, which requires that we identify all integrals with
*both* $u$ and $v$, and collect these in $a(u,v)$, while the remaining
integrals with $v$ and not $u$ go into $L(v)$.  The integral from the
Robin condition must of this reason be split in two parts:

!bt
\begin{equation*}
\int_{\Gamma_{R,i}}r_i(u-s_i)v \ds
= \int_{\Gamma_{R,i}} r_iuv \ds - \int_{\Gamma_{R,i}}r_is_iv \ds\tp
\end{equation*}
!et
We then have

!bt
\begin{align}
a(u, v) &= \int_{\Omega} p\nabla u\cdot \nabla v \dx
+ \sum_i\int_{\Gamma_{R,i}}r_iuv \ds,
label{ch:poisson0:2D:DN3:var:a}\\
L(v) &= \int_{\Omega} fv \dx -
\sum_i\int_{\Gamma_{N,i}} g_i v \ds + \sum_i\int_{\Gamma_{R,i}}r_is_iv \ds\tp
label{ch:poisson0:2D:DN3:var:L}
\end{align}
!et

## /usr/share/fenics/demo/documented/subdomains/python/demo_subdomains.py
## contains a good example, followed up in stokes solvers

===== FEniCS implementation =====

Looking at our previous `solver` functions for solving the 2D Poisson equation,
the following new aspects must be taken care of:

  o definition of a mesh function over the boundary,
  o marking each side as a subdomain, using the mesh function,
  o splitting a boundary integral into parts.

A general approach to the first task is to mark each of the desired
boundaries with markers 0, 1, 2, and so forth. Here we aim at
the four sides of the unit square, marked with
0 ($x=0$), 1 ($x=1$), 2 ($y=0$), and 3 ($y=1$).
The marking of boundaries makes use of a mesh function object, but contrary to
Section ref{ftut:possion:2D:2mat:impl}, this is not a function over
cells, but a function over cell facets. We apply the `FacetFunction`
for this purpose:

!bc pycod
boundary_parts = FacetFunction('size_t', mesh)
!ec
As in Section ref{ftut:possion:2D:2mat:impl} we use a subclass of
`SubDomain` to identify the various parts of the mesh
function. Problems with domains of more complicated geometries may set
the mesh function for marking boundaries as part of the mesh
generation.  In our case, the $x=0$ boundary can be marked by

!bc pycod
class BoundaryX0(SubDomain):
    def inside(self, x, on_boundary):
        return on_boundary and abs(x[0]) < tol

bx0 = BoundaryX0()
bx0.mark(boundary_parts, 0)
!ec
Similarly, we make the classes `BoundaryX1` for the $x=1$ boundary,
`BoundaryY0` for the $y=0$ boundary, and `BoundaryY1` for the $y=1$
boundary, and mark these as subdomains 1, 2, and 3, respectively.

For generality of the implementation, we let the user specify
what kind of boundary condition that applies to each of the four
boundaries. We set up a Python dictionary for this purpose, with
the key as subdomain number and the value as a dictionary specifying
the kind of condition as key and a function as its value.
For example,

!bc
boundary_conditions = {
  0: {'Dirichlet': u_b},
  1: {'Robin': (r, s)},
  2: {'Neumann: g}},
  3: {'Neumann', 0}}
!ec
specifies

 * a Dirichlet condition, with values implemented by an `Expression`
   or `Constant` object
   `u_b`, on subdomain 0, i.e., the $x=1$ boundary;
 * a Robin condition (ref{ch:poisson0:multi:bc:Robin})
   on subdomain 1, $x=1$, with `Expression` or `Constant` objects
   `r` and `s` specifying $r$ and $s$;
 * a Neumann condition $\partial u/\partial n=g$ on subdomain 2, $y=0$,
   where an `Expression` or `Constant` object `g` implements the value $g$;
 * a homogeneous Neumann condition $\partial u/\partial n=0$ on
   subdomain 3, $y=1$.

As explained in Section ref{ch:poisson0:multiple:Dirichlet},
multiple Dirichlet conditions must be collected in a list of
`DirichletBC` objects. Based on the `boundary_conditions` data
structure above, we can construct this list by the following snippet:

@@@CODE-4 src/poisson_vc.py fromto: bcs = \[@if debug:

The new aspect of the variational problem is the two distinct
boundary integrals over $\Gamma_{N,i}$ and $\Gamma_{R,i}$.
Having a mesh function over exterior cell facets (our
`boundary_parts` object), where subdomains (boundary parts) are
numbered as $0,1,2,\ldots$, the special symbol `ds(0)`
implies integration over subdomain (part) 0, `ds(1)` denotes
integration over subdomain (part) 1, and so on.
The idea of multiple `ds`-type objects generalizes to volume
integrals too: `dx(0)`, `dx(1)`, etc., are used to
integrate over subdomain 0, 1, etc.,  inside $\Omega$.

Before we have `ds(n)` for integers `n` defined, we must do

!bc pycod
ds = Measure('ds', domain=mesh, subdomain_data=boundaries_parts)
!ec
Similarly, if we want integration of different parts of the domain,
we redefine `dx` as

!bc pycod
dx = Measure('dx', domain=mesh, subdomain_data=domains)
!ec
where `domains` is a `CellFunction` defining subdomains in $\Omega$.

Suppose we have a Robin condition with values `r` and `s` on subdomain
`R`, a Neumann condition with value `g` on subdomain `N`, the
variational form can be written

!bc pycod
a = dot(grad(u), grad(v))*dx + r*u*v*ds(R)
L = f*v*dx - g*v*ds(N) + r*s*v*ds(R)
!ec

In our case things get a bit more complicated since the
information about integrals in Neumann and Robin conditions
are in the `boundary_conditions` data structure. We can collect
all Neumann conditions by the code

@@@CODE-4 src/poisson_vc.py from-to: # Collect Neumann@# Collect Robin
Applying `sum(Nemann_integrals)` will apply the `+` operator to
the variational forms in the `Numeann_integrals` list and result
in the integrals we need for the right-hand side `L` of the
variational form.

The integrals in the Robin condition can similarly be collected
in lists:

@@@CODE-4 src/poisson_vc.py from-to: # Collect Robin@# Simpler Robin

We are now in a position to define the `a` and `L` expressions
in the variational formulation:

@@@CODE-4 src/poisson_vc.py from-to: # Define variational problem, solver_bc@# Simpler variational

idx{`lhs`}
idx{`rhs`}

======= Simplified handling of the variational formulation =======

We carefully ordered the terms in the variational formulation above
into the $a$ and $L$ parts. This requires a splitting of the Robin
condition and makes the `a` and `L` expressions less readable (still we
think understanding this splitting is key for any finite element programmer!).
Fortunately, UFL allows us to specify the complete variational form
(ref{ch:poisson0:multi:bc:varform}) as one expression and offer tools to
extract what goes into the bilinear form $a(u,v)$ and the linear form
$L(v)$:

!bc pycod
F = dot(p*grad(u), grad(v))*dx + \
    sum(Robin_integrals) - f*v*dx + sum(Neumann_integrals)
a, L = lhs(F), rhs(F)
!ec
This time we can more naturally define the integrals from the
Robin condition as `r*(u-s)*v*ds(n)`:

@@@CODE-4 src/poisson_vc.py from-to: # Simpler Robin@# Define variational problem, solver_bc

The complete code is in the `solver_bc` function in the
`${prog["poisson_vc"]}.py` file.

===== Test problem =====

Let us continue to use $\uex=1+x^2+2y^2$ as the exact solution, and
set $p=1$ and $f=-6$ in the PDE.  Our domain is the unit square, and
we assign Dirichlet conditions at $x=0$ and $x=1$, a Neumann condition
at $y=1$, and a Robin condition at $y=0$. With the given $\uex$, we
realize that the Neumann condition is $-4y$ (which means $-4$ at
$y=1$), while the Robin
condition can be selected in many ways. Since $\partial u/\partial
n=-\partial u/\partial y=0$ at $y=0$, we can select $s=u$ and have $r$
arbitrary in the Robin condition.

The boundary parts are $\Gamma_{D,0}$: $x=0$, $\Gamma_{D,1}$: $x=1$,
$\Gamma_{R,0}$: $y=0$, and $\Gamma_{N,0}$: $y=1$.

When implementing this test problem (and especially other test
problems with more complicated expressions), it is advantageous to use
symbolic computing. Below we define the exact solution as a `sympy`
expression and derive other functions from their mathematical
definitions.  Then we turn these expressions into C/C++ code, which
can be fed into `Expression` objects.

@@@CODE src/poisson_vc.py fromto: def application_bc_test\(@# Compute
This simple test problem is turned into a real unit test for different
function spaces in the function `test_solver_bc`.

===== Debugging boundary conditions =====

It is easy to make mistakes when implementing a problem with many
different types of boundary conditions, as in the present case. Some
helpful debugging output is to run through all vertex coordinates and
check if the `SubDomain.inside` method marks the vertex as on the
boundary. Another useful printout is to list which degrees of freedom
that are subject to Dirichlet conditions, and for first-order Lagrange
elements, add the corresponding vertex coordinate to the output.

@@@CODE-4 src/poisson_vc.py fromto: if debug:@# Collect Neumann
In addition, it is helpful to print the exact and the numerical solution
at all the vertices as shown in Section ref{ch:poisson0:verify1}.

======= Generating meshes with subdomains =======
