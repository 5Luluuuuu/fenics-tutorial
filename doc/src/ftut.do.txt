% if FORMAT == "sphinx":
# Sphinx cannot have more than 63 chars in the title...
#TITLE: Writing State-of-the-Art Finite Element Solvers in Minutes
TITLE: The FEniCS Tutorial
% elif FORMAT == "pdflatex":
# Get newlines right
#TITLE: Introduction to Finite Element\\ Programming - \\ The FEniCS Tutorial
TITLE: Writing State-of-the-Art Finite Element Solvers in Minutes - \\ The FEniCS Tutorial
% else:
TITLE: Writing State-of-the-Art Finite Element Solvers in Minutes - The FEniCS Tutorial
#TITLE: Introduction to Finite Element Programming - The FEniCS Tutorial
% endif
AUTHOR: Hans Petter Langtangen {copyright|CC BY} Email: hpl@simula.no at Center for Biomedical Computing, Simula Research Laboratory & Department of Informatics, University of Oslo
AUTHOR: Anders Logg {copyright|CC BY} Email: logg@chalmers.se at Department of Mathematics, Chalmers University of Technology & Center for Biomedical Computing, Simula Research Laboratory

## Mako variables and functions
<%
src_url = 'https://github.com/hplgit/fenics-tutorial/blob/master/src'

# Mapping from logical filenames to actual filenames for demo programs
prog = {
  'alg_newton_np': 'alg_newton_np',
  'pde_newton_np': 'pde_newton_np',
  'picard_np': 'picard_np',
  'vp1_np': 'vp1_np',
  'vp2_np': 'vp2_np',
  'd1_d2D': 'd1_d2D',
  'd2_d2D': 'd2_d2D',
  'd3_d2D': 'd3_d2D',
  'd3_d2D_script': 'd3_d2D_script',
  'sin_daD': 'sin_daD',
  'define_layers': 'define_layers',
  'Poisson_layers': 'Poisson_layers',
  # New names:
  'p2D_flat': 'p2D_flat',
  'p2D_flat_membrane': 'p2D_flat_membrane',
  'p2D_membrane': 'p2D_membrane',
  'p2D_func': 'p2D_func',
  'p2D_iter': 'p2D_iter',
  'p2D_vc': 'p2D_vc',
  'p2D_class': 'p2D_class',
  'd2D_flat1': 'd2D_flat1',
  'd2D_flat2': 'd2D_flat2',
  'd2D_func': 'd2D_func'
}
%>

__Preface.__
This book gives a concise and gentle introduction to finite element
programming in Python based on the popular FEniCS software library.
The library delivers high performance since FEniCS automatically
delegates compute-intensive tasks to C++ by help of code
generation. We show in detail how to write finite element solvers for
the Poisson equation, the time-dependent diffusion equation, the
equations of elasticity, and the Navier-Stokes equations, in heterogeneous
media and with different types of boundary conditions.  After
having digested the examples in this tutorial, it should be easy
to learn more from the more advanced FEniCS documentation and the
numerous demo programs that come with the software.

This document is also available in
## Note: these are the official gh-pages documents, i.e., the original tutorial
## as long as we work in brief and do not merge gh-pages.
% if FORMAT in ("sphinx",):
"PDF": "http://hplgit.github.io/fenics-tutorial/doc/pub/fenics-tutorial-4print.pdf" and "Bootstrap web": "http://hplgit.github.io/fenics-tutorial/doc/pub/ftut.html"
format.
% elif FORMAT in ("latex", "pdflatex"):
"Sphinx": "http://hplgit.github.io/fenics-tutorial/doc/pub/sphinx/"
and "Bootstrap": "http://hplgit.github.io/fenics-tutorial/doc/pub/ftut.html"
format.
% elif FORMAT == "html":
"PDF": "http://hplgit.github.io/fenics-tutorial/doc/pub/fenics-tutorial-4print.pdf" and "Sphinx web": "http://hplgit.github.io/fenics-tutorial/doc/pub/sphinx/"
format.
% endif

DATE: today


!split
TOC: on

!split
========= Preface =========

# #include "newpreface.do.txt"

========= Preliminaries =========
label{ch:prelim}

# #include "preface.do.txt"

!split
# #include "fundamentals.do.txt"

!split
# #include "poisson.do.txt"

!split
# #include "diffusion.do.txt"

!split
# #include "nonlinear.do.txt"

!split
========= More old stuff =========

# #include "prepro.do.txt"

!split
# #include "multimat1.do.txt"

!split
# #include "more.do.txt"

!split
# #include "misc.do.txt"

!split
# #include "troubleshooting.do.txt"

!split
# #include "2DO_AL.do.txt"
# #include "2DO.do.txt"

!split
======= Bibliography =======

BIBFILE: papers.pub
