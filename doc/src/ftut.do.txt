% if FORMAT == "sphinx":
# Sphinx cannot have more than 63 chars in the title...
#TITLE: Writing State-of-the-Art Finite Element Solvers in Minutes
TITLE: The FEniCS Tutorial
% elif FORMAT == "pdflatex":
# Get newlines right
TITLE: Introduction to Finite Element\\ Programming - \\ The FEniCS Tutorial
% else:
#TITLE: Writing State-of-the-Art Finite Element Solvers in Minutes - The FEniCS Tutorial
TITLE: Introduction to Finite Element Programming - The FEniCS Tutorial
% endif
AUTHOR: Hans Petter Langtangen {copyright|CC BY} Email: hpl@simula.no at Center for Biomedical Computing, Simula Research Laboratory & Department of Informatics, University of Oslo
AUTHOR: Anders Logg {copyright|CC BY} Email: logg@chalmers.se at Department of Mathematics, Chalmers University of Technology & Center for Biomedical Computing, Simula Research Laboratory

## Mako variables and functions
<%
src_url = 'https://github.com/hplgit/fenics-tutorial/blob/master/src'

# Mapping from logical filenames to actual filenames for demo programs
prog = {
  'membrane': 'membrane',
  'alg_newton_np': 'alg_newton_np',
  'pde_newton_np': 'pde_newton_np',
  'picard_np': 'picard_np',
  'vp1_np': 'vp1_np',
  'vp2_np': 'vp2_np',
  'd1_d2D': 'd1_d2D',
  'd2_d2D': 'd2_d2D',
  'd3_d2D': 'd3_d2D',
  'd3_d2D_script': 'd3_d2D_script',
  'sin_daD': 'sin_daD',
  'define_layers': 'define_layers',
  'Poisson_layers': 'Poisson_layers',
  # New names:
  'p2D_plain': 'p2D_plain',
  'p2D_func': 'p2D_func',
  'p2D_iter': 'p2D_iter',
  'p2D_vc': 'p2D_vc',
  'p2D_class': 'p2D_class',
  'd2D_plain': 'd2D_plain',
  'd2D_func': 'd2D_func'
}
%>

__Preface.__

This book gives a concise and gentle introduction to finite element
programming in Python based on the popular FEniCS software library.
FEniCS can be programmed in both C++ and Python, but this tutorial
focuses exclusively on Python programming, since this is the simplest
and most effective approach for beginners. It will also deliver high
performance since FEniCS automatically delegates compute-intensive
tasks to C++ by help of code generation. After having digested the
examples in this tutorial, the reader should be able to learn more
from the FEniCS documentation, the numerous demo programs that come
with the software, and the comprehensive FEniCS book *Automated
Solution of Differential Equations by the Finite element Method*
cite{FEniCS}. This tutorial is a further development of the opening
chapter in cite{FEniCS}.

!bwarning Watch out for shortcomings!
This book is still in an initial state so the reader is encouraged
to send email to the authors on "`logg@chalmers.se`": "mailto:logg@chalmers.se"
about typos, errors, and suggestions for improvements.
!ewarning

DATE: today

This document is also available in
## Note: these are the official gh-pages documents, i.e., the original tutorial
## as long as we work in brief and do not merge gh-pages.
% if FORMAT in ("sphinx",):
"PDF": "http://hplgit.github.io/fenics-tutorial/doc/pub/fenics-tutorial-4print.pdf" and "Bootstrap web": "http://hplgit.github.io/fenics-tutorial/doc/pub/ftut.html"
format.
% elif FORMAT in ("latex", "pdflatex"):
"Sphinx": "http://hplgit.github.io/fenics-tutorial/doc/pub/sphinx/"
and "Bootstrap": "http://hplgit.github.io/fenics-tutorial/doc/pub/ftut.html"
format.
% elif FORMAT == "html":
"PDF": "http://hplgit.github.io/fenics-tutorial/doc/pub/fenics-tutorial-4print.pdf" and "Sphinx web": "http://hplgit.github.io/fenics-tutorial/doc/pub/sphinx/"
format.
% endif

!split
TOC: on

!split
# #include "preface.do.txt"

========= The fundamentals =========

# #include "fundamentals.do.txt"

========= Time-dependent and nonlinear problems =========

!split
# #include "timedep.do.txt"

!split
# #include "nonlinear.do.txt"

!split
# #include "prepro.do.txt"

!split
# #include "multimat1.do.txt"

!split
# #include "more.do.txt"

!split
# #include "misc.do.txt"

!split
# #include "troubleshooting.do.txt"

!split
# #include "2DO.do.txt"

!split
======= Bibliography =======

BIBFILE: papers.pub
