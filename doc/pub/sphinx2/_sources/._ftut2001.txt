.. !split

.. _ch:diffusion:

Developing a more advanced heat equation solver
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

.. Pointers backward...what is needed to be recaptured?

This chapter is devoted to solving diffusion problems of the
form

.. math::
         \frac{\partial u}{\partial t} = \nabla\cdot(p\nabla u) + f,

with initial condition :math:`u=I` and various types of Dirichlet, Neumann,
and Robin conditions.  A very simple FEniCS program for a diffusion
equation was introduced in in the Section `The
time-dependent diffusion equation <http://hplgit.github.io/fenics-tutorial/doc/pub/sphinx/._ftut1004.html#the-time-dependent-diffusion-equation>`__
in [Ref1]_, but here we shall discuss algorithmic optimization
strategies, how to store and animate time-dependent data, and how to
construct more advanced solvers in terms of classes.

.. _ch:diffusion:opt:

Optimization of algorithms and implementations
==============================================

.. _ch:diffusion:opt:bassembly:

Avoiding assembly of the coefficient matrix
-------------------------------------------

[**hpl 1**: I though this example can just be an exercise now that the Navier-Stokes example cover the topic. However, the Navier-Stokes example is relatively complicated, and many students do not have the background to really understand it. Therefore, I don't everybody will grasp the ``assemble`` idea. We probably need to repeat it for Poisson and heat. It can also be an idea to study this example and then go back to N-S for a better understanding.]

The time-dependent diffusion equation gives rise to a linear system
:math:`AU=b` at each time level, where the coefficient matrix :math:`A` is constant,
but :math:`b` depends on :math:`u` at the previous time level. To increase the
computational efficiency, we can therefore assemble :math:`A` once and
for all before the time loop. To be able to do this, we need to
explicitly create matrices and vectors from variational
formulations.

.. as demonstrated in the section :ref:`ch:poisson0:linalg`.

.. in N-S as well

Let us express the solution procedure in algorithmic form, writing :math:`u`
for the unknown spatial function at the new time level (:math:`u^n`) and
:math:`u_1` for the spatial solution at one earlier time level (:math:`u^{n-1}`):

 * define Dirichlet boundary condition (:math:`u_{\mathrm{b}}`, Dirichlet boundary, etc.)

 * let :math:`u_1` interpolate :math:`I` or be the projection of :math:`I`

 * define :math:`a` and :math:`L`

 * assemble matrix :math:`A` from :math:`a`

 * set some stopping time :math:`T`

 * :math:`t={{\Delta t}}`

 * while :math:`t\leq T`

   * assemble vector :math:`b` from :math:`L`

   * apply essential boundary conditions

   * solve :math:`AU=b` for :math:`U` and store in :math:`u`

   * :math:`t\leftarrow t + {{\Delta t}}`

   * :math:`u_1 \leftarrow u` (be ready for next step)

The code features the following changes from the ``ft03_heat.py``
program. We may define :math:`a` and :math:`L` from :math:`F` as before, or do it explicitly:

.. code-block:: python

    a = u*v*dx + dt*dot(grad(u), grad(v))*dx
    L = (u_1 + dt*f)*v*dx

Prior to the time loop we assemble the coefficient matrix :math:`A` once and
for all:

.. index:: assemble

.. code-block:: python

    A = assemble(a)   # assemble only once, before the time stepping

At each time level we can do a similar ``b = assemble(L)``. With this
construction, a new vector for ``b`` is allocated in memory in every
pass of the time loop.  It would be much more memory friendly to reuse
the storage of the ``b`` we already have.  This is easily accomplished
by

.. code-block:: python

    b = assemble(L, tensor=b)

That is, we send in our previous ``b``, which is then filled with new values
and returned from ``assemble``. Now there will be only a single
memory allocation of the right-hand side vector. Before the time loop
we set ``b = None`` such that ``b`` is defined in the first call to
``assemble``.

The necessary changes inside the time loop go as follows:

.. code-block:: python

    while t <= T:
        b = assemble(L, tensor=b)
        u_b.t = t
        bc.apply(A, b)
        solve(A, u.vector(), b)

The update ``u_b.t = t`` is of key importance as ``bc.apply(A, b)`` will
look up the ``u_b`` object to find the proper values in the Dirichlet condition,
and ``u_b`` changes with time in our test problem!

The complete program is found in the file
`ft11_heat2.py <https://github.com/hplgit/fenics-tutorial/blob/master/src/ft11_heat2.py>`__.

.. _ch:diffusion:opt:noassembly:

Avoiding all assembly
---------------------

.. index::
   single: assembly, increasing efficiency

The purpose of this section is to present a technique for speeding up
FEniCS simulators for time-dependent problems where it is possible to
perform all assembly operations prior to the time loop.  There are two
costly operations in the time loop: assembly of the right-hand side
:math:`b` and solution of the linear system via the ``solve`` call. The
assembly process involves work proportional to the number of degrees
of freedom :math:`N`, while the solve operation has a work estimate of
:math:`\mathcal{O}( N^{\alpha})`, for some :math:`\alpha\geq 1`.  Typically,
:math:`\alpha\in [1,2]`.  As :math:`N\rightarrow\infty`, the solve operation will
dominate for :math:`\alpha>1`, but for the values of :math:`N` typically used on
smaller computers, the assembly step may still represent a
considerable part of the total work at each time level. Avoiding
repeated assembly can therefore contribute to a significant speed-up
of a finite element code in time-dependent problems.

Deriving recursive linear systems
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To see how repeated assembly can be avoided, we look at the :math:`L(v)`
form,

.. math::
         \int_\Omega \left(u^{n-1} + {{\Delta t}}  f^n\right)v {\, \mathrm{d}x}, 

which in general varies with time through :math:`u^{n-1}`, :math:`f^n`, and
possibly also with :math:`{\Delta t}` if the time step is adjusted during the
simulation.  The technique for avoiding repeated assembly consists in
expanding the finite element functions in sums over the basis
functions :math:`\phi_i` to identify matrix-vector products that build up
the complete system. We have :math:`u^{n-1}=\sum_{j=1}^NU^{n-1}_j\phi_j`,
and we can expand :math:`f^n` as
:math:`f^{n}=\sum_{j=1}^NF^{n}_j\phi_j`. Inserting these expressions in
:math:`L(v)` and using :math:`v=\hat\phi_i` result in

[**hpl 2**: Why :math:`hat\phi_i`? No need for Petrov-Galerkin here... Cannot remember why the hat.]

.. math::
        
        \int_\Omega \left(u^{n-1} + {{\Delta t}}f^n\right)v {\, \mathrm{d}x} &=
        \int_\Omega \left(\sum_{j=1}^N U^{n-1}_j\phi_j + {{\Delta t}}\sum_{j=1}^N F^{n}_j\phi_j\right)\hat\phi_i {\, \mathrm{d}x},\\ 
        &=\sum_{j=1}^N\left(\int_\Omega \hat\phi_i\phi_j {\, \mathrm{d}x}\right)U^{n-1}_j
         + {{\Delta t}}\sum_{j=1}^N\left(\int_\Omega \hat\phi_i\phi_j {\, \mathrm{d}x}\right)F^{n}_j{\thinspace .}
        

Introducing :math:`M_{ij} = \int_\Omega \hat\phi_i\phi_j {\, \mathrm{d}x}`, we see that
the last expression can be written

.. math::
        
        \sum_{j=1}^NM_{ij}U^{n-1}_j + {{\Delta t}} \sum_{j=1}^NM_{ij}F^{n}_j,
        

which is nothing but two matrix-vector products,

.. math::
        
        MU^{n-1} + {{\Delta t}} MF^n,
        

if :math:`M` is the matrix with entries :math:`M_{ij}`,

.. math::
        
        U^{n-1}=(U^{n-1}_1,\ldots,U^{n-1}_N)^T,
        

and

.. math::
        
        F^n=(F^{n}_1,\ldots,F^{n}_N)^T{\thinspace .}
        

We have immediate access to :math:`U^{n-1}` in the program since that is the
vector in the ``u_1`` function. The :math:`F^n` vector can easily be computed
by interpolating the prescribed :math:`f` function (at each time level if
:math:`f` varies with time). Given :math:`M`, :math:`U^{n-1}`, and :math:`F^n`, the right-hand
side :math:`b` can be calculated as

.. math::
        
        b = MU^{n-1} + {{\Delta t}} MF^n {\thinspace .}
        

That is, no assembly is necessary to compute :math:`b`.

The coefficient matrix :math:`A` can also be split into two terms.  We
insert :math:`v=\hat\phi_i` and :math:`u^n = \sum_{j=1}^N U^n_j\phi_j` in the
bilinear expression to get

.. math::
        
        \sum_{j=1}^N \left(\int_\Omega \hat\phi_i\phi_j {\, \mathrm{d}x}\right)U^n_j + {{\Delta t}}
        \sum_{j=1}^N \left(\int_\Omega \nabla\hat\phi_i\cdot\nabla\phi_j {\, \mathrm{d}x}\right)U^n_j,
        

which can be written as a sum of matrix-vector products,

.. math::
        
        MU^n + {{\Delta t}} KU^n = (M + {{\Delta t}} K)U^n,
        

if we identify the matrix :math:`M` with entries :math:`M_{ij}` as above and
the matrix :math:`K` with entries

.. _Eq:_auto1:

.. math::

    \tag{1}
    K_{ij} = \int_\Omega \nabla\hat\phi_i\cdot\nabla\phi_j {\, \mathrm{d}x}{\thinspace .}
        
        

The matrix :math:`M` is often called the "mass matrix" while "stiffness
matrix" is a common nickname for :math:`K`. The associated bilinear forms
for these matrices, as we need them for the assembly process in a
FEniCS program, become

.. _Eq:ch:diffusion0:pde1:aK:

.. math::

    \tag{2}
    a_K(u,v) = \int_\Omega\nabla u\cdot\nabla v {\, \mathrm{d}x},
        
        

.. _Eq:ch:diffusion0:pde1:aM:

.. math::

    \tag{3}
    a_M(u,v) = \int_\Omega uv {\, \mathrm{d}x}
        {\thinspace .}
        

The linear system at each time level, written as :math:`AU^n=b`,
can now be computed by first computing :math:`M` and :math:`K`, and then forming
:math:`A=M+{{\Delta t}} K` at :math:`t=0`, while :math:`b` is computed as
:math:`b=MU^{n-1} + {{\Delta t}}MF^n` at each time level.

FEniCS implementation          (1)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following modifications are needed in the ``ft12_heat_func.py``
program from the previous section in order to implement the new
strategy of avoiding assembly at each time level:

 1. Define separate forms :math:`a_M` and :math:`a_K`

 2. Assemble :math:`a_M` to :math:`M` and :math:`a_K` to :math:`K`

 3. Compute :math:`A=M+{{\Delta t}}K`

 4. Define :math:`f` as an ``Expression``

 5. Interpolate the formula for :math:`f` to a finite element function :math:`F^n`

 6. Compute :math:`b=MU^{n-1} + {{\Delta t}}MF^n`

The relevant code segments become

.. code-block:: python

    # 1.
    a_K = dot(grad(u), grad(v))*dx
    a_M = u*v*dx
    # No need for L
    
    # 2. and 3.
    M = assemble(a_M)
    K = assemble(a_K)
    A = M + dt*K
    
    # 4.
    f = Expression('beta - 2 - 2*alpha', beta=beta, alpha=alpha)
    
    # 5. and 6.
    while t <= T:
        f_n = interpolate(f, V)
        F_n = f_n.vector()
        b = M*u_1.vector() + dt*M*F_n

We implement these modifications in a refactored version of the
program ``ft11_heat2.py``, where the solver is a function
as explained in the
section "Refactored implementation": "" in [Ref1]_ rather than a
flat program. The domain can also more flexibly be a 1D, 2D, or 3D
interval, rectangle, or box.
The new ``solver_minimize_assembly`` function resides in
`ft12_heat_func.py <ft12_heat_func.py>`__.

.. code-block:: python

    def solver_minimize_assembly(
        alpha, f, u0, I, dt, T, divisions, L, degree=1,
        user_action=None, I_project=False):
        """
        Solve diffusion PDE u_t = div(alpha*grad(u)) + f on
        an interval, rectangle, or box with side lengths in L.
        divisions reflect cell partitioning, degree the element
        degree. user_action(t, u, timetesp) is a callback function
        where the calling code can process the solution.
        If I_project is false, use interpolation for the initial
        condition.
        """
        # Create mesh and define function space
        d = len(L)  # No of space dimensions
        if d == 1:
            mesh = IntervalMesh(divisions[0], 0, L[0])
        elif d == 2:
            mesh = RectangleMesh(Point(0,0), Point(*L), *divisions)
        elif d == 3:
            mesh = BoxMesh(Point(0,0), Point(*L), *divisions)
        V = FunctionSpace(mesh, 'P', degree)
    
        class Boundary(SubDomain):  # define the Dirichlet boundary
            def inside(self, x, on_boundary):
                return on_boundary
    
        boundary = Boundary()
        bc = DirichletBC(V, u0, boundary)
    
        # Initial condition
        u_1 = project(I, V) if I_project else interpolate(I, V)
        if user_action is not None:
            user_action(0, u_1, 0)
    
        # Define variational problem
        u = TrialFunction(V)
        v = TestFunction(V)
        a_M = u*v*dx
        a_K = alpha*dot(grad(u), grad(v))*dx
    
        M = assemble(a_M)
        K = assemble(a_K)
        A = M + dt*K
        # Compute solution
        u = Function(V)   # the unknown at a new time level
    
        b_assemble = 0  # CPU time for assembling all the b vectors
        timestep = 1
        t = dt
        while t <= T:
            t0 = time.clock()
            f_n = interpolate(f, V)
            F_n = f_n.vector()
            b = M*u_1.vector() + dt*M*F_n
            b_assemble += time.clock() - t0
            try:
                u0.t = t
                f.t = t
            except AttributeError:
                pass  # ok if no t attribute in u0
            bc.apply(A, b)
            solve(A, u.vector(), b)
    
            if user_action is not None:
                user_action(t, u, timestep)
            t += dt
            timestep += 1
            u_1.assign(u)
        #info('total time for assembly of right-hand side: %.2f' % b_assemble)
    
    def application_animate(model_problem):
        import numpy as np, time
    
        if model_problem == 1:
            # Test problem with exact solution at the nodes also for P1 elements
            alpha = 3; beta = 1.2
            u0 = Expression('1 + x[0]*x[0] + alpha*x[1]*x[1] + beta*t',
                            alpha=alpha, beta=beta, t=0)
            f = Constant(beta - 2 - 2*alpha)
            I = u0
            dt = 0.05; T = 2
            Nx = Ny = 20
            u_range = [1, 1+1+alpha*1+beta*T]
        elif model_problem == 2:
            # Diffusion of a sin^8 spike
            I = Expression('pow(sin(pi*x[0])*sin(pi*x[1]), 8)')
            f = Constant(0)
            u0 = Constant(0)
            dt = 0.0005; T = 20*dt
            Nx = Ny = 60
            u_range = [0, 1]
    
        vtkfile = File('diffusion.pvd')
    
        def animate(t, u, timestep):
            global p
            if t == 0:
                p = plot(u, title='u',
                         range_min=float(u_range[0]),  # must be float
                         range_max=float(u_range[1]))  # must be float
            else:
                p.plot(u)
            print('t=%g' % t)
            time.sleep(0.5)
            vtkfile << (u, float(t))  # store time-dep Function
    
        solver_minimize_assembly(
            1.0, f, u0, I, dt, T, (Nx, Ny), (1, 1), degree=2,
            user_action=animate, I_project=False)

A special feature in this program is the ``user_action`` callback function:
at every time level, the solution is sent to ``user_action``, which is
some function provided by the user where the solution can be processed, e.g.,
stored, analyzed, or visualized. In a unit test for the test example without
numerical approximation errors, we can write a call to the solver function,

.. code-block:: python

    def test_solver():
        import numpy as np
        alpha = 3; beta = 1.2
        u_b = Expression('1 + x[0]*x[0] + alpha*x[1]*x[1] + beta*t',
                         alpha=alpha, beta=beta, t=0)
        f = Constant(beta - 2 - 2*alpha)
        dt = 0.3; T = 1.9
        u_b.t = 0
    
        # Define assert_error callback function
        ...
    
        solver_minimize_assembly(
            f, u_b, u_b, dt, T, Nx, Ny, degree,
            user_action=assert_error, I_project=False)

The ``user_action`` function ``assert_error`` asserts equality of the
exact and numerical solution at every time level:

.. code-block:: python

    def assert_error(t, u, timestep):
        u_e = interpolate(u_b, u.function_space())
        error= np.abs(u_e.vector().array() -
        	          u.vector().array()).max()
        tol = 2E-12
        assert error < tol, 'error: %g' % error

One can also use the user action callback function to visualize
the solution:

.. code-block:: python

    def assert_error(t, u, timestep):
        global p
        if t == 0:
            p = plot(u, title='u',
    	         # Fix the color scale
                     range_min=float(u_range[0]),  # must be float
                     range_max=float(u_range[1]))  # must be float
        else:
            p.plot(u)
        print('t=%g' % t)
        time.sleep(0.5)

It is key to fix the color scale to get a meaningful animation.

A complete function calling up ``solver_minimize_assembly`` for
animating the solution in two test problems is found in the
function ``application_animate`` in
`ft12_heat_func.py <ft12_heat_func.py>`__.

Note that ``p``, which must survive between subsequent calls to the
callback function, has to be declared as a global variable. This is
necessary when the user action function is a *closure* (function
inside function, "remembering" variables in the parent function) and
``p`` is changed inside the closure.  Some programmers find it more
convenient to let the user action be class instead, where ``p`` can be
an attribute. Later examples employ the class design.

The function ``solver_vs_solver_minimize_assembly`` measures the
impact of the optimization technique in this section compared to
the simpler technique from the previous section where we need
to assemble the right-hand side of the linear system at every time
level. The impact is not huge, just a speed-up factor of 1-2 for 2D problems
and around 2 for 3D problems. Still, this may be an important
improvement when you run a code a lot.

.. ===== Methods of lines and ODE solvers =====

.. _ch:diffusion:welding:

A welding example with post processing and animation
====================================================

The focus so far in this tutorial has been on producing the solution
of PDE problems. [**hpl 3**: This is book 2, it depends on how things end up in the previous chapter.] For scientific investigations, the primary work is
often with post processing results: computing quantities derived from
the solution and inspecting these with visualization or data analysis tools.
This is the focus of the present section.
To ease the programming, we shall make use of a convenient tool, ``cbcpost``,
for post processing, saving data to file(s), and animating solutions.
We recommend to use
``cbcpost`` in all time-dependent FEniCS solvers, but it also has a lot
to offer in stationary problems too.

To explain the usage of ``cbcpost`` for storage and plotting, we address
a real physical application: welding of a plate, where a moving heat
source gives rise to a moving temperature field.

.. _ch:diffusion:welding:cbcpost:

Post processing data and saving to file
---------------------------------------

Installation
~~~~~~~~~~~~

The ``cbcpost`` package is not a part of the ``fenics`` package so you
will need to install it.  The simplest installation method is to use
``pip``. We recommend to install a companion package ``fenicstools`` as
well. Just run

.. code-block:: text

    sudo pip install git+https://bitbucket.org/simula_cbc/cbcpost.git
    sudo pip install git+https://github.com/mikaem/fenicstools.git

in a terminal window (skip ``sudo`` on Windows machines).
Alternatively, you can grab the source code and run ``setup.py`` the usual
way Python packages are installed from source:

.. code-block:: text

    Terminal> git clone https://bitbucket.org/simula_cbc/cbcpost.git
    Terminal> cd cbcpost
    Terminal> python setup.py install
    Terminal> cd ..
    Terminal> git clone https://github.com/mikaem/fenicstools.git
    Terminal> cd fenicstools
    Terminal> python setup.py install

Basic commands
~~~~~~~~~~~~~~

We must create a *post processor* and then specify what kind of
results we want to be stored on file and (optionally) get visualized.
Suppose we have a field with logical name ``Temperature`` that we want
to save in XDMF/HDF5 format in files in a fresh subdirectory ``Results``:

.. code-block:: python

    import cbcpost as post
    # Create post processor
    pp = post.PostProcessor(dict(casedir='Results', clean_casedir=True))
    # Specify storage of a "Temperature" field
    pp.add_field(post.SolutionField(
        'Temperature',
        dict(save=True,
             save_as=['hdf5', 'xdmf'],
             plot=True,
             plot_args=dict(range_min=0.0, range_max=1.2))))

The ``plot=True`` automatically launches ``fenics.plot`` commands of
this scalar field during the simulation. The ranges of the color
scale must be given (as ``float`` variables) so that the color scale
stays fixed during the animation on the screen.

Inside the time loop, we have to feed a new solution to the post processor
to get it saved:

.. code-block:: python

    pp.update_all({'Temperature': lambda: T}, t, timestep)

Here, ``T`` is the ``Function`` object that we have solved for, ``t`` is
current time, and ``timestep`` is the corresponding time step number.

One can specify many fields to be saved (and plotted), but even more
important: ``cbcpost`` can calculate a lot of derived quantities from
the solution, such as

 * time derivatives and integrals of vector/scalar fields

 * extraction of fields over subdomains

 * slicing of fields in 3D geometries

 * averaging of fields in space or time

 * norms and point values of fields as function of time

 * user-defined post processing of fields

We refer to the online `cbcpost documentation <http://cbcpost.readthedocs.org/en/latest/index.html>`__ for further information on all the capabilities of this
package.


.. admonition:: Tip: Use ``cbcpost`` to visualize time-dependent data

   Instead of issuing your own ``plot`` commands in time-dependent
   problems, it is safer and more convenient to specify ``plot=True``
   and fix the range of the color scale, when you add fields
   to the post processor. Multiple fields will be synchronized during
   the animation.




.. _ch:diffusion:welding:problem:

Heat transfer due to a moving welding source
--------------------------------------------

Let us solve a diffusion problem taken from welding.  A moving
welding equipment acts as a moving heat source at the top of a thin
metal plate.  The question is how the heat from the equipment spreads
out in the material that is being welded. We use the standard heat
equation, treat the material as two dimensional, and do not take phase
transitions into account.  The governing PDE is then

.. math::
         \varrho c \frac{\partial u}{\partial t} = \kappa\nabla^2 u + f,

where :math:`u` is temperature, :math:`\varrho` is the density of the material,
:math:`c` is the heat capacity at constant volume, :math:`\kappa` is the heat
conduction coefficient, and :math:`f` models the heat source from the
welding equipment. The domain is :math:`\Omega = [0,L]\times [0,L]`.  An
additional major simplification is that we set :math:`u=U_s` at the
boundary, where :math:`U_s` is the temperature of the surroundings (a Robin
condition, modeling cooling at the boundary would be more accurate,
but then we should also consider cooling in the third dimension as
well).  The initial condition reads :math:`u=U_s`.

A welding source is moving and very localized in space.  The
localization can be modeled by a peak-shaped Gaussian function.  The
movement is taken to be a circle with radius :math:`R` about a point
:math:`(x_0,y_0)`. An appropriate :math:`f` is

.. math::
         f(x,y,t) = A\exp{\left(-\frac{1}{2\sigma^2}
        \left({x-(x_0 + R\cos\omega t)}\right)^2 -\frac{1}{2\sigma^2}
        \left({y-(y_0 + R\sin\omega t)}\right)^2\right)}{\thinspace .}

The parameter :math:`A` is the strength of the heat source, and :math:`\sigma` is
the "standard deviation" (i.e., a measure of the width) of the Gaussian
function.

.. _ch:diffusion:welding:scaling:

Scaling of the welding problem
------------------------------

There are 10 physical parameters in the problem: :math:`L`, :math:`\varrho`, :math:`c`,
:math:`\kappa`, :math:`A`, :math:`x_0`, :math:`y_0`, :math:`R`, :math:`\omega`, :math:`\sigma`.  Scaling can
dramatically reduce the number of parameters and also introduce new
parameters that are much easier to assign numerical values when doing
numerical experiments. We therefore scale the problem. As length
scale, we choose :math:`L` so the scaled domain becomes the unit square. As
time scale and characteristic size of :math:`u`, we just introduce :math:`t_c` ad
:math:`u_c`.  This means that we introduce scaled variables

.. math::
        
        \bar x = \frac{x}{L},\quad \bar y = \frac{y}{L},\quad \bar t =\frac{t}{t_c},
        \quad\bar u = \frac{u-U_s}{u_c}{\thinspace .}
        

The scaled form of :math:`f` is naturally :math:`\bar f = f/A`, since this makes
:math:`\bar f\in (0,1]`. The arguments in the exponential function in :math:`f` can
also be scaled:

.. math::
        
        \bar f &= \exp{\left(-\frac{1}{2\sigma^2}
        \left({\bar xL -(L \bar x_0 + L\bar R\cos\omega t_c t)}\right)^2 -\frac{1}{2\sigma^2}
        \left({L \bar y-(L\bar y0 + L\bar R\sin\omega t_c t)}\right)^2\right)}\\ 
        &= \exp{\left(-\frac{1}{2}\frac{L^2}{\sigma^2}
        \left(x -(\bar x_0 + \bar R\cos\omega t_c \bar t)\right)^2 -
        \frac{1}{2}\frac{L^2}{\sigma^2}
        \left(\bar y-(\bar y0 + \bar R\sin\omega t_c \bar t)\right)^2\right)}\\ 
        &= \exp{\left(-\frac{1}{2}\beta^2
        \left((x -(\frac{1}{2} + \bar R\cos\bar t)\right)^2 -
        \left(\bar y-(\frac{1}{2} + \bar R\sin\bar t))^2\right)\right)},
        

where :math:`\beta` is a dimensionless parameter,

.. math::
         \beta = \frac{L}{\sigma},

reflecting the ratio of the domain size and the width of the heat source.
Moreover, we have restricted the rotation point to be the center point
of the domain:

.. math::
         (\bar x_0,\bar y_0) = (\frac{1}{2},\frac{1}{2}){\thinspace .}

The time scale
in diffusion problems is usually related to the "speed of the
diffusion", but in this problem it is more natural to base the time
scale on the movement of the heat source, which suggests setting
:math:`t_c = 1/\omega`.

Inserting the new scaled variables in the PDE leads to

.. math::
         \frac{\partial \bar u}{\partial\bar t} =
        \frac{\kappa}{\omega\varrho c L^2}\bar\nabla^2\bar u +
        \frac{A}{\omega u_c\varrho c}\bar f(\bar x,\bar y,\bar t){\thinspace .}

The first coefficient is a dimensionless number,

.. math::
         \gamma = \frac{\kappa}{\omega\varrho c L^2},

while the second coefficient can be used to determine :math:`u_c` by demanding
the source term to balance the time derivative term,

.. math::
         u_c = \frac{A}{\omega\varrho c}{\thinspace .}

Our aim is to have :math:`\bar u \in [0,1]`, but this :math:`u_c` does not capture
the precise magnitude of :math:`u`. However, we believe that the characteristic
size of :math:`u` is

.. math::
         u_c = \delta^{-1}\frac{A}{\omega\varrho c},

for a scaling factor :math:`\delta`. Using this :math:`u_c` gives the PDE

.. math::
         \frac{\partial \bar u}{\partial\bar t} =
        \gamma\bar\nabla^2\bar u +
        \delta\bar f(\bar x,\bar y,\bar t),

with two dimensionless variables, but :math:`\delta` is quite easily
tuned from experiments to give :math:`\bar u` a typically size of unity.

Looking at :math:`\gamma`, we see that it can be written

.. math::
         \gamma = \frac{1/\omega}{\varrho c L^2/\kappa},

which is the ratio of the time scale for the heat source and the
time scale for diffusion. Multiplying by :math:`R/R` gives another
interpretation: :math:`\gamma` is the ratio of the speed of diffusion and
the speed of the heat source.


.. admonition:: The benefits of scaling

   The physics of our problem depends now on :math:`\beta`, :math:`\bar
   R`, and :math:`\gamma`, just three ratios of physical effects instead
   of 10 independent parameters.  Setting
   :math:`\bar R = 0.2` is an appropriate choice. For a quite localized heat
   source in space, :math:`\beta=10` is a suitable value.  Then we are
   actually left with only one interesting parameter to adjust: :math:`\gamma`.
   It is so much easier to assign this parameter a value (speed of
   diffusion versus speed of heat source) than to set :math:`\varrho`, :math:`c`, and
   :math:`\kappa` for some chosen material, and then determine relevant values for
   :math:`A`, :math:`L`, etc. There are no approximations in the scaling procedure;
   it just dramatically simplifies numerical simulations.
   The book [Ref2]_ gives a comprehensive treatment
   of scaling.




.. _ch:diffusion:welding:funcsolver:

A function-based solver
-----------------------

We can use the ``solver_minimize_assembly`` function to solve the
welding problem. The application code just declares the problem-dependent
parameters and calls the solver function:

.. code-block:: python

    def application_welding(gamma=1, delta=1, beta=10, num_rotations=2):
        """Circular moving heat source for simulating welding."""
        from math import pi, sin, cos
        u_b = Constant(0)
        I = Constant(0)
        R = 0.2
        f = Expression(
            'delta*exp(-0.5*pow(beta,2)*(pow(x[0]-(0.5+R*cos(t)),2) + '
                                        'pow(x[1]-(0.5+R*sin(t)),2)))',
            delta=delta, beta=beta, R=R, t=0)
        # Simulate to rotations with the equipment
        omega = 1.0      # Scaled angular velocity
        P = 2*pi/omega   # One period of rotation
        T = 2*P          # Total simulation time
        dt = P/40        # 40 steps per rotation
        Nx = Ny = 60
        solver_minimize_assembly(
            gamma, f, u_b, I, dt, T, (Nx, Ny), (1, 1), degree=1,
            user_action=ProcessResults(), I_project=False)

The remaining task is to write the user action callback function to
process the solution at teach time step. We want to make use of
``cbcpost`` for storage and plotting.  Since we need the post processor
variable, called ``pp`` in the section :ref:`ch:diffusion:welding:cbcpost`,
to survive between calls to the user action function, we find it
most convenient to implement this function in terms of a class with
``pp`` as attribute and ``__call__`` as the user action function.  We want
to make comparisons between the heat source and the temperature
response, so we register both fields for storage and plotting:

.. code-block:: python

    import cbcpost as post
    class ProcessResults(object):
        def __init__(self):
            """Define fields to be stored/plotted."""
            self.pp = post.PostProcessor(
                dict(casedir='Results', clean_casedir=True))
            self.pp.add_field(
                post.SolutionField(
                    'Temperature',
                    dict(save=True,
                         save_as=['hdf5', 'xdmf'],  # format
                         plot=True,
                         plot_args=
                         dict(range_min=0.0, range_max=1.1)
                         )))
            self.pp.add_field(
                post.SolutionField(
                    "Heat_source",
                    dict(save=True,
                         save_as=["hdf5", "xdmf"],  # format
                         plot=True,
                         plot_args=
                         dict(range_min=0.0, range_max=float(delta))
                         )))
            # Save separately to VTK files as well
            self.vtkfile_T = File('temperature.pvd')
            self.vtkfile_f = File('source.pvd')
        def __call__(self, t, T, timestep):
            """Store T and f to file (cbcpost and VTK)."""
            T.rename('T', 'solution')
            f_Function = interpolate(f, T.function_space())
            f_Function.rename('f', 'welding equipment')
            self.pp.update_all(
                {'Temperature': lambda: T,
                 'Heat_source': lambda: f_Function},
                t, timestep)
            self.vtkfile_T << (T, float(t))
            self.vtkfile_f << (f_Function, float(t))

We took the opportunity to also
store the ``u`` and ``f`` functions to VTK files, although this is really
not necessary since ParaView or VisIt can read XDMF files.

Note that the use of ``cbcpost`` is usually very dependent on the
problem at hand, so it does not make sense to include ``cbcpost`` code
in a general PDE solver, only in problem-specific code such as the
user action function.

Getting an animation on the screen with the built-in plotting tool is
a matter of running the welding example:

.. code-block:: python

    >>> from heat_func import application_welding as a
    >>> a(gamma=10, delta=700)

(We introduced the synonym ``a`` to save some typing.)
Or you can run this as a command in the terminal:

.. code-block:: text

    Terminal> python -c '\ 
    from heat_func import application_welding as a;
    a(gamma=10, delta=700)'

Since we have fixed the color scale of the temperature to have values
in :math:`[0,1.1]`, we must adjust :math:`\delta` appropriately to :math:`\gamma`.  For
example, running :math:`\gamma=40` reveals, from the output in the terminal,
that the maximum temperature is about 0.25, and consequently we do not
see much. For any given :math:`\gamma`, run the problem with :math:`\delta=1` (and
say ``num_rotations=0.2`` to make a quick simulation), and rerun with
:math:`\delta` as one over the maximum temperature.  Here we get an
approximate :math:`\delta = 66.7\gamma` for :math:`\gamma \leq 0.1`. Try running
:math:`\gamma=0.01` and :math:`\delta=1` to observe some more significant heat
transfer away from the welding equipment. With :math:`\gamma =0.001` there
is significant heat build-up, but for so small :math:`\gamma` we should
re-scale the problem and use the diffusion time scale as time scale.

In ParaView, load ``Results/Temperature/Temperature.xdmf`` as file,
click **Apply**, then the play button for animation. If the animation is
not correct, repeat the procedure. Thereafter, split the layout in
two, choose **3D View**, load ``Results/Heat source/Heat_source.xmdf``,
click **Apply**, and run the animation. The two plots are synchronized
in time.

.. raw:: html
        
        <div>
        <video  loop controls width='640' height='365' preload='none'>
            <source src='mov/welding_gamma1.ogg'  type='video/ogg;  codecs="theora, vorbis"'>
        </video>
        </div>
        <p><em>Welding example with :math:`\gamma=1`.</em></p>
        
        <!-- Issue warning if in a Safari browser -->
        <script language="javascript">
        if (!!(window.safari)) {
          document.write("<div style=\"width: 95%%; padding: 10px; border: 1px solid #100; border-radius: 4px;\"><p><font color=\"red\">The above movie will not play in Safari - use Chrome, Firefox, or Opera.</font></p></div>")}
        </script>
        

