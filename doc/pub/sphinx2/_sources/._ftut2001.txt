.. !split

.. _ch:diffusion:

Developing a more advanced heat equation solver
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

.. theta-rule is new?!

This chapter is devoted to some important issues when solving
time-dependent problems with FEniCS: avoiding unnecessary assembly,
dealing with time-dependent ``Expression`` objects, debugging the coding
of variational forms, lumping mass matrices, saving results to file,
and making animations.  We handle these topics through a welding
problem and address all aspects of code development, from scaling of
the physical problem via debugging to constructing unit tests and
sharing FEniCS best practices.

The PDE to be addressed is the heat equation

.. math::
         \varrho c \frac{\partial u}{\partial t} = \nabla\cdot(p\nabla u) + f,

with initial condition :math:`u=I` and various types of Dirichlet, Neumann,
and Robin conditions. The primary unknown is supposed to represent the
temperature, and the PDE governs heat transport in a solid
heterogeneous material.  The physical parameters, which may vary in
space, are the density of the medium, :math:`\varrho`, the heat capacity,
:math:`c`, and the heat conduction coefficient, :math:`p`, while :math:`f` is a heat
source.

A very simple FEniCS program for a diffusion equation was introduced
in in the
Section `The time-dependent diffusion equation <http://hplgit.github.io/fenics-tutorial/doc/pub/sphinx/._ftut1004.html#the-time-dependent-diffusion-equation>`__
in [Ref1]_. You should be familiar with that code prior to
reading the present chapter as the code to be presented has many more
advanced features.

.. _ch:diffusion:opt:

A flexible and efficient solver
===============================

.. _ch:diffusion:opt:num:

Numerical method
----------------

Let us use a :math:`\theta` rule for discretizing the problem in time. Given

.. math::
         \frac{\partial u}{\partial t} = \mathcal{G}(u) + f,

where :math:`\mathcal{G}` is some differential operator and :math:`f` some source
term, the :math:`\theta` rule reads

.. _Eq:ch:diffusion:opt:num:thetar1:

.. math::

    \tag{1}
    \frac{u^{n+1} - u^n}{{\Delta t}} = \theta\mathcal{G}(u^{n+1})
        + (1-\theta)\mathcal{G}(u^n) + f^{n+\theta},
        
        

or

.. _Eq:ch:diffusion:opt:num:thetar2:

.. math::

    \tag{2}
    \frac{u^{n+1} - u^n}{{\Delta t}} = \mathcal{G}(\theta u^{n+1} +
        (1-\theta)u^n) + f(t_{n+\theta}){\thinspace .}
        
        

These equations are equal only if :math:`\mathcal{G}` is a linear operator.
The notation :math:`f^{n+\theta}` means a weighted average of :math:`f` at
time points :math:`t_n` and :math:`t_n{n+1}`: :math:`\theta f^{n+1} + (1-\theta)f^n`, while
:math:`f(t_{n+\theta})` means :math:`f` evaluated at the time point
:math:`\theta t_{n+1} + (1-\theta)t_n`.

The nice feature of the :math:`\theta` rule is that it reproduces
three widely used discretization methods in time:
:math:`\theta=0` gives a classical Forward Euler scheme,
:math:`\theta=1` gives a Backward Euler scheme, and :math:`\theta=\frac{1}{2}` gives a
Crank-Nicolson (or midpoint/centered) scheme. The latter is
theoretically the most accurate, but suffers from non-physical
oscillations of high-frequency components of the solution, so many
applications may demand the more stable Backward Euler scheme (or a
more accurate backward difference formula utilizing a third time
level).

The corresponding variational formulation for :math:`u^{n+1}` is derived by
multiplying the time-discrete PDE :ref:`(1) <Eq:ch:diffusion:opt:num:thetar1>`
or :ref:`(2) <Eq:ch:diffusion:opt:num:thetar2>` by a test function :math:`v\in\hat V`
and integrating over the spatial domain :math:`\Omega`. Terms with
second-order derivatives are integrated by parts. We can express the
integration by parts as

.. math::
         \int_\Omega\mathcal{G}(u)v{\, \mathrm{d}x} = -\int_\Omega \mathcal{D}(u,v){\, \mathrm{d}x} +
        \int_\Gamma \mathcal{B}(u,v){\, \mathrm{d}s}{\thinspace .}

Using
:ref:`(2) <Eq:ch:diffusion:opt:num:thetar2>`, and introducing

.. math::
         U=\theta u^{n+1} + (1-\theta)u^n),

the variational formulation becomes

.. _Eq:ch:diffusion:opt:num:varform:

.. math::

    \tag{3}
    F = \int_\Omega \varrho c\frac{u^{n+1} - u^n}{{\Delta t}}v{\, \mathrm{d}x} +
        \int_\Omega \mathcal{D}(U,v) {\, \mathrm{d}x} -
        \int_\Omega f(\theta t_{n+\theta}) v{\, \mathrm{d}x}
        +
        \quad \int_\Gamma \mathcal{B}(U,v){\, \mathrm{d}s}
        
        

Note that we have inserted a factor :math:`\varrho c` in the time-derivative term
since our PDE has this factor. Also note that all terms are evaluated at
the time point :math:`t_{n+\theta}`.

We introduce a general initial condition

.. math::
         u(\boldsymbol{x}, 0) = u_0(\boldsymbol{x})\hbox{ in }\Omega{\thinspace .}

As boundary conditions, we assume either Dirichlet conditions on the
entire boundary or a Robin condition

.. math::
         -p\frac{\partial u}{\partial n} = r(u-s),

where :math:`r` is a heat transfer coefficient and :math:`s` is the surrounding
temperature. Note that insulated boundaries are modeled by :math:`r=0`.
For the present physical problem we have

.. math::
        \begin{align*}
        \mathcal{D}(u,v) &= \nabla\cdot(p\nabla u^{n}),\\ 
        \mathcal{B}(u,v) &= r(u-s)v{\thinspace .}
        \end{align*}

Normally, in finite element programs, we would need to break up the
variational formulation :ref:`(3) <Eq:ch:diffusion:opt:num:varform>` into
a bilinear and a linear part, but in FEniCS we can just use
``lhs(F)`` and ``rhs(F)`` for such calculations, which is very convenient from
a user's point of view. The final version of the variational
formulation to be coded reads

.. _Eq:ch:diffusion:opt:num:varform2:

.. math::

    \tag{4}
    F = \int_\Omega (\varrho c\frac{u^{n+1} - u^n}{{\Delta t}}v +
         p\nabla U\cdot\nabla v  -
         f(\theta t_{n+\theta}) v){\, \mathrm{d}x}
        + \int_\Gamma r(U-s)v{\, \mathrm{d}s}
        
        

If :math:`s` varies with time, we need to evaluate it as :math:`s(t_{n+\theta})`.

.. _ch:diffusion:opt:alg:

Algorithm
---------

Let us express the solution procedure in algorithmic form, writing :math:`u`
for the unknown spatial function at the new time level (:math:`u^n`) and
:math:`u_1` for the spatial solution at one earlier time level (:math:`u^{n-1}`):

 * mark boundary segments for prescribing boundary conditions

 * let initial condition :math:`u^n` interpolate :math:`I` or be the projection of :math:`I`

 * define :math:`F`

 * ask FEniCS to recognize :math:`a(u,v)` and :math:`L(v)`

 * assemble matrix :math:`A` from :math:`a(u,v)` if :math:`A` is time independent

 * assign some stopping time :math:`T`

 * :math:`t={{\Delta t}}`

 * while :math:`t\leq T`

   * update time-dependent objects with new time

   * assemble matrix :math:`A` from :math:`a(u,v)` if :math:`A` is time dependent

   * assemble vector :math:`b` from :math:`L`

   * apply essential boundary conditions

   * solve linear system

   * :math:`t\leftarrow t + {{\Delta t}}`

   * :math:`u^n \leftarrow u` (be ready for next step)

Our time-dependent heat equation gives rise to a linear system
with coefficient matrix :math:`A` and right-hand side :math:`b` at every time
level. When :math:`\varrho`, :math:`c`, :math:`p`, and :math:`r` do not depend on time,
and :math:`{\Delta t}` is constant,
:math:`A` is constant, and it suffices to assemble the matrix once -
before the time loop. To be able to do this, we need to
explicitly create matrices and vectors from variational
formulations, using the ``assemble`` function.

The code features a lot of changes from the ``ft03_heat.py``
program. We shall go through each part of the above algorithm.

.. _ch:diffusion:opt:solver:

The solver function
-------------------

Instead of a flat program, we wrap the solver in a function:

.. code-block:: python

    def solver(
        rho, c, p, f, r, s, u0, T, L,       # physical parameters
        dt, divisions, degree=1, theta=1,   # numerical parameters
        user_action=None,                   # callback function
        u0_project=False,                   # project/interpolate u0
        BC='Dirichlet',                     # interpretation of r
        A_is_const=False,                   # is A time independent?
        debug=False):

We assume that the domain is an interval, rectangle, or box, with
dimensions given by the list ``L`` and where ``divisions`` specifies
the number of cells in each spatial direction.
Alternatively, we could demand that a ready-made mesh is provided by
the calling code, but we take the opportunity here to illustrate
once again the setting of different boundary conditions at different
parts of the boundary.

Boundary condition conventions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A convention is introduced for the boundary conditions:
if ``BC == 'Dirichlet'``, the variable ``r`` is a list with Dirichlet
values (``Constant`` or ``Expression`` objects) for each side of the
domain. Side 0 means :math:`x=0`, 1 is :math:`x=1`, 2 is :math:`y=0`, 3 is :math:`y=1`,
4 is :math:`z=0`, and 5 is :math:`z=1`. If ``BC == 'Robin'``, ``r[i]`` holds
the heat transfer coefficient for boundary side ``i``.
(The variable ``s``, related to the Robin condition, has no meaning
if ``BC == 'Dirichlet'``).

.. index:: assert

Checking input data
~~~~~~~~~~~~~~~~~~~

It is wise to start the function with checking the values of some
of the input parameters. Python's ``assert`` function is ideal for
quick writing of tests, at the cost of cryptic error messages for
less experienced programmers. When we have some test expressed as
a boolean condition ``cond``, we can just write ``assign cond``. The statement
is silent if ``cond`` is ``True``, otherwise an exception is raised and the
program is aborted.

.. code-block:: python

    assert len(divisions) == len(L)
    d = len(L)  # no of space dimensions
    assert len(r) == 2*d
    for obj in p, f, s:
        assert isinstance(obj, (Expression, Constant))
    if user_action is not None: assert callable(user_action)

Creating the mesh
~~~~~~~~~~~~~~~~~

For now we restrict the geometry to a hypercube (but the ``solver``
function can compute on any type of domain and mesh). We use the
recipe from the
section "Parameterizing the number of space dimensions": "" in
[Ref1]_.

.. code-block:: python

    if d == 1:
        mesh = IntervalMesh(divisions[0], 0, L[0])
    elif d == 2:
        mesh = RectangleMesh(Point(0,0), Point(*L), *divisions)
    elif d == 3:
        mesh = BoxMesh(Point(0,0), Point(*L), *divisions)
    V = FunctionSpace(mesh, 'P', degree)

Note that ``*L`` for a list or tuple variable ``L`` in a function call
is the same as sending the elements as separate arguments
``L[0], L[1], ..., L[len(L)-1]``.

.. _ch:diffusion:opt:markboundary:

Marking the boundary
--------------------

We need to mark each side of our hypercube domain since we can have
Robin or Dirichlet conditions that differ on different sides.
We could write something straightforward as

.. code-block:: python

    def mark_boundaries_in_rectangle(mesh, x0=0, x1=1, y0=0, y1=1):
        """
        Return mesh function FacetFunction with each side in a rectangle
        marked by boundary indicator 0, 1, 2, 3.
        Side 0 is x=x0, 1 is x=x1, 2 is y=y0, and 3 is y=y1.
        """
        tol = 1E-14
    
        class BoundaryX0(SubDomain):
            def inside(self, x, on_boundary):
                return on_boundary and near(x[0], x0, tol)
    
        class BoundaryX1(SubDomain):
            def inside(self, x, on_boundary):
                return on_boundary and near(x[0], x1, tol)
    
        class BoundaryY0(SubDomain):
            def inside(self, x, on_boundary):
                return on_boundary and near(x[1], y0, tol)
    
        class BoundaryY1(SubDomain):
            def inside(self, x, on_boundary):
                return on_boundary and near(x[1], y1, tol)
    
        # Mark boundaries
        boundary_parts = FacetFunction('uint', mesh)
        boundary_parts.set_all(9999)
        bx0 = BoundaryX0()
        bx1 = BoundaryX1()
        by0 = BoundaryY0()
        by1 = BoundaryY1()
        bx0.mark(boundary_parts, 0)
        bx1.mark(boundary_parts, 1)
        by0.mark(boundary_parts, 2)
        by1.mark(boundary_parts, 3)
        return boundary_parts

Unfortunately, this is quite tedious and repetitive code, and the
code has to be repeated for a 1D interval
and a 3D box-shaped domain. It is possible to
write more general, compact code valid both for an interval, rectangle, or
box:

.. code-block:: python

    def mark_boundaries_in_hypercube(
        mesh, d=2, x0=0, x1=1, y0=0, y1=1, z0=0, z1=1):
        """
        Return mesh function FacetFunction with each side in a hypercube
        in d dimensions. Sides are marked by indicators 0, 1, 2, ..., 6.
        Side 0 is x=x0, 1 is x=x1, 2 is y=y0, 3 is y=y1, and so on.
        """
        side_definitions = [
            'near(x[0], %(x0)s, tol)', 'near(x[0], %(x1)s, tol)',
            'near(x[1], %(y0)s, tol)', 'near(x[1], %(y1)s, tol)',
            'near(x[2], %(z0)s, tol)', 'near(x[2], %(z1)s, tol)']
        boundaries = [CompiledSubDomain(
            ('on_boundary && ' + side_definition) % vars(), tol=1E-14)
                      for side_definition in side_definitions[:2*d]]
        # Mark boundaries
        boundary_parts = FacetFunction('uint', mesh)
        boundary_parts.set_all(9999)
        for i in range(len(boundaries)):
            boundaries[i].mark(boundary_parts, i)
        return boundary_parts

The use of this function in the solver function goes as follows:

.. code-block:: python

    boundary_parts = mark_boundaries_in_hypercube(mesh, d)
    ds =  Measure('ds', domain=mesh, subdomain_data=boundary_parts)
    
    bcs = []
    if BC == 'Dirichlet':
        for i in range(2*d):
            bcs.append(DirichletBC(V, r[i], boundary_parts, i))

Recall that we *either* have Dirichlet *or* Robin conditions
at the entire boundary. This is just a convention that we, as
developers of the ``solver`` function, has imposed. Later, in
the chapter :ref:`ch:classes`, we leave it to the user to define the mesh
and boundary conditions, which results in a very flexible solver, but
a significant amount of problem-specific code on the user's side.

[**hpl 1**: I'm really not sure whether it would be better to require a mesh variable from the user also here, along with some representations of the boundary conditons, as arguments for ``solver`` and put the setting of boundary conditions in the calling code. Now the examples with a *function* ``solver`` operates on hypercube geometries and deal with the partitioning of the boundary and setting of conditions, while the examples with a solver *class* just requires an API where the user supplies the mesh and info on boundary conditions. Maybe best with showing both ways. The bottom line is to explain something sufficiently general so the user does not copy the entire solver to change the boundary conditions and ends up with multiple solvers.]

.. _ch:diffusion:opt:varform:

Implementation of the variational formulation
---------------------------------------------

We shall now implement the variational formulation and demonstrate how
that formulation can be coded in separate parts, utilizing Python
variables and functions. Later, we can examine the individual parts
in search for programming errors.

We start with implementing the initial condition:

.. code-block:: python

    u_n = project(u0, V) if u0_project else interpolate(u0, V)
    u_n.rename('u', 'initial condition')
    if user_action is not None:
        user_action(0, u_n, 0)

In the variational form, we make use of some convenient constructions
like ``U`` as the :math:`\theta` weighted averaged of :math:`u` in time and separate
Python functions for various terms in the formulation:

.. code-block:: python

    u = TrialFunction(V)
    v = TestFunction(V)
    
    def D(u):
        return p*dot(grad(u), grad(v))*dx
    
    def B(u, i):
        return r[i]*(u-s)*v*ds(i)
    
    # In time loop: must set the t attribute in f, s, and r[i] to
    # theta*t + (1-theta)*(t-dt) before evaluating the forms
    
    U = theta*u + (1-theta)*u_n
    F_M = rho*c*(u-u_n)/dt*v*dx
    F_K = D(U)
    F_f = f*v*dx
    F = F_M + F_K - F_f
    if BC == 'Robin':
        # Add cooling condition integrals from each side
        F_R = sum(B(U, i) for i in range(2*d))
        F += F_R
    a, L = lhs(F), rhs(F)

We have with purpose split the expression for ``F`` into separate terms for
easier debugging later, as this allows us to assemble terms independently
and compare with hand calculations.

It remains to assemble the coefficient matrix, here once and for all before
the time loop if :math:`A` is constant throughout the simulations:

.. code-block:: python

    if A_is_const:
        A = assemble(a)

At each time level we must do a similar ``b = assemble(L)``. However, with this
construction, a new vector for ``b`` is allocated in memory in every
pass of the time loop.  It would be much more memory friendly to reuse
the storage of the ``b`` we already have.  This is easily accomplished
by

.. code-block:: python

    b = assemble(L, tensor=b)

That is, we send in our previous ``b``, which is then filled with new values
and returned from ``assemble``. Now there will be only a single
memory allocation of the right-hand side vector. Before the time loop
we must set ``b = None`` such that ``b`` is defined as a variable
in the first call to ``assemble`` inside the time loop.

.. _ch:diffusion:opt:timeloop:

The time loop
-------------

The complete time loop goes as follows:

.. code-block:: python

    u = Function(V)   # the unknown at a new time level
    u.rename('u', 'solution')
    cpu_assemble = 0  # CPU time for assembling
    timestep = 1
    t = dt
    
    while t <= T:
        # Evaluate f, s, r[i] for right t value
        t_m = theta*t + (1-theta)*(t-dt)
        if hasattr(f, 't'): f.t = t_m
        if hasattr(s, 't'): s.t = t_m
        for i in range(len(r)):
            if BC == 'Robin':
                if hasattr(r[i], 't'): r[i].t = t_m
            elif BC == 'Dirichlet':
                if hasattr(r[i], 't'): r[i].t = t
            else:
                raise ValueError('BC=%s' % BC)
        t0 = time.clock()  # measure CPU time of assemble part
        if not A_is_const:
            A = assemble(a)
        b = assemble(L, tensor=b)
        cpu_assemble += time.clock() - t0
    
        [bc.apply(A, b) for bc in bcs]
        solve(A, u.vector(), b)
    
        if user_action is not None:
            user_action(t, u, timestep)
        t += dt
        timestep += 1
        u_n.assign(u)


.. admonition:: Make sure Expression objects have the right time value

   The first part of the loop, where we update ``Expression`` objects, is
   really key to get right and one of the most error-prone tasks for
   FEniCS programmers. All given formulas in the variational form are to
   be evaluated at the intermediate time point ``t_m`` (:math:`t_{n+\theta}`).
   The variational forms can work with time-dependent ``Expression``
   objects and evaluate the time variable in these objects when we
   require an ``assemble`` operation. Hence, at each time level, every
   ``Expression`` object that enters the variational formulation that is
   subject to ``assemble`` calls must have its right time value (or more
   precisely and general: all of its parameters must have the correct
   values). In addition, ``Expression`` objects related to Dirichlet values
   must contain the same time value as that of the unknown to be
   computed.  In the present case, ``f``, ``s``, and ``r[i]`` enter the
   variational formulation at the weighted time :math:`t_m = t_{n+\theta} =
   \theta t_{n+1} +
   (1-\theta)t_{n+1}`, so this time value must be assigned to the ``t``
   attribute in these objects. However, it may happen that one or more of
   the objects are ``Constant`` objects, or ``Expression`` objects without a
   time value, so a straight assignment ``f.t = t_m`` may fail. Therefore,
   we use ``hasattr`` to check that the object has a ``t`` attribute before
   trying to update the value.
   
   The update of ``r[i].t`` depends on whether ``r`` is used for Dirichlet or
   Robin conditions. In the latter case, the :math:`r` quantity is to be
   evaluated at the weighted time, ``r[i].t = t_m``, while for a Dirichlet
   condition, ``r[i].t`` must reflect the same time level as the unknown we
   compute for, i.e., :math:`t_{n+1}`, or the variable ``t`` in the time loop.




The rest of the statements in the time loop should be quite familiar.
Note that ``[bc.apply(A, b) for bc in bcs]`` is a quick way of writing
a for loop on one line (using Python's list comprehension syntax,
but the resulting
list is never used for anything, just the calls ``bc.apply(A, b)`` are
important for incorporating the Dirichlet conditions at each boundary
segment).

The complete ``solver`` function is found in the file
`ft12_heat_func.py <https://github.com/hplgit/fenics-tutorial/blob/master/src/ft12_heat_func.py>`__.
[**hpl 2**: Recall to rerun utility script for renaming these files prior to refereeing and publishing.]

.. _ch:diffusion:opt:verify:

Verification
------------

The first implementation of a solver of the complexity above is
likely to suffer from programming errors or mathematical
misunderstandings.  We must therefore carefully set up tests so that we know
that the implementation works. As usual, we favor manufactured
solutions that can be exactly reproduced by the numerical method. With
variable coefficients and a lot of input data to adjust, the choice of
manufactured solution must be flexible. We therefore feed some
symbolic expression for :math:`u(\boldsymbol{x},t)` into a function ``verify`` and let
this function compute the consistent source term and the coefficients
``r[i]`` in the Robin/Dirichlet conditions. Then ``solver`` is called with
a callback function that asserts the error to be within machine
precision for this problem, if the manufactured solution is without
approximation errors.

We use SymPy to do the mathematics and the code generation
utility in SymPy to translate the symbolic expressions to C++
code needed in FEniCS ``Expression`` objects.

.. code-block:: python

    def verify(
        manufactured_u,         # SymPy expression
        d=2,                    # no of space dimensions
        degree=1,               # degree of finite element polynomials
        BC='Robin',             # type of boundary condition
        N=16,                   # partitioning in each space direction
        theta=1,                # time discretization parameter
        expect_exact_sol=True,  # True: no approximation errors
        lumped_mass=False,      # True: lump mass matrix
        avoid_b_assembly=False, # True: construct b as matrix-vector products
        A_is_const=None,        # None: set True if BC is 'Dirichlet'
        debug=False,            # True: dump a lot of debugging info
        error_tol=1E-13):       # tolerance for exact numerical solution
    
        u = manufactured_u  # short form
        x, y, z, t = sym.symbols('x[0] x[1] x[2] t')
    
        if d == 1:  # 1D test problem
            p = 1
            s = 1
            rho = c = 1
            # Fit f, r[i]
            f = rho*c*sym.diff(u, t) - sym.diff(p*sym.diff(u, x), x)
            f = sym.simplify(f)
            # Boundary conditions: r = -p*(du/dn)/(u-s)
            r = [None]*(2*d)
            r[0] = (+p*sym.diff(u, x)/(u-s)).subs(x, 0)
            r[1] = (-p*sym.diff(u, x)/(u-s)).subs(x, 1)
    
        elif d == 2:  # 2D
            p = 1
            s = 2
            rho = c = 1
            f = rho*c*sym.diff(u, t) \ 
                - sym.diff(p*sym.diff(u, x), x) \ 
                - sym.diff(p*sym.diff(u, y), y)
            f = sym.simplify(f)           # fitted source term
            # For Robin boundary conditions: r = -p*(du/dn)/(u-s)
            r = [None]*(2*d)
            r[0] = (+p*sym.diff(u, x)/(u-s)).subs(x, 0)
            r[1] = (-p*sym.diff(u, x)/(u-s)).subs(x, 1)
            r[2] = (+p*sym.diff(u, y)/(u-s)).subs(y, 0)
            r[3] = (-p*sym.diff(u, y)/(u-s)).subs(y, 1)
    
        elif d == 3:  # 3D
            p = 1
            s = 2
            rho = c = 1
            f = rho*c*sym.diff(u, t) \ 
                - sym.diff(p*sym.diff(u, x), x) \ 
                - sym.diff(p*sym.diff(u, y), y) \ 
                - sym.diff(p*sym.diff(u, z), z)
            f = sym.simplify(f)           # fitted source term
            # For Robin boundary conditions: r = -p*(du/dn)/(u-s)
            r = [None]*(2*d)
            r[0] = (+p*sym.diff(u, x)/(u-s)).subs(x, 0)
            r[1] = (-p*sym.diff(u, x)/(u-s)).subs(x, 1)
            r[2] = (+p*sym.diff(u, y)/(u-s)).subs(y, 0)
            r[3] = (-p*sym.diff(u, y)/(u-s)).subs(y, 1)
            r[4] = (+p*sym.diff(u, z)/(u-s)).subs(z, 0)
            r[5] = (-p*sym.diff(u, z)/(u-s)).subs(z, 1)
    
        for i in range(len(r)):
            r[i] = sym.simplify(r[i])
        print('f:', f, 'r:', r)
    
        # Convert symbolic expressions to Expression or Constant
        s = Constant(s)
        rho = Constant(rho)
        c = Constant(c)
        f = Expression(sym.printing.ccode(f), t=0)
        p = Expression(sym.printing.ccode(p))
        u_exact = Expression(sym.printing.ccode(u), t=0)
    
        if BC == 'Dirichlet':
            for i in range(len(r)):
                r[i] = u_exact
        elif BC == 'Robin':
            for i in range(len(r)):
                r[i] = Expression(sym.printing.ccode(r[i]), t=0)
    
        def print_error(t, u, timestep):
            """user_action function: print max error at dofs."""
            u_exact.t = t
            u_e = interpolate(u_exact, u.function_space())
            error = np.abs(u_e.vector().array() -
                           u.vector().array()).max()
            print('t=%.4f, error: %-10.3E max u: %-10.3f' %
                  (t, error, u.vector().array().max()))
            if debug:
                print('u exact:', u_e.vector().array())
            if expect_exact_sol:
                assert error < error_tol, error
    
        if A_is_const is None:
            A_is_const = BC == 'Dirichlet'
        if lumped_mass:
            assert A_is_const
        # Match dt to N to keep dt/(2*d*dx**q) const,
        # q=1 for theta=0.5 else q=2
        dx = 1./N
        q = 1 if theta == 0.5 else 2
        dt = (0.05/(2*d*0.5**q))*2*d*dx**q
        print('dx=%g, dt=%g (p=1)' % (dx, dt))
        T = 5*dt  # always 5 steps
        if d == 1:
            divisions = (N,)
            L = (1,)
        elif d == 2:
            divisions = (N, N)
            L = (1, 1)
        elif d == 3:
            divisions = (N, N, N)
            L = (1, 1, 1)
        solver(rho, c, p, f, r, s, u_exact, T, L,
               dt, divisions, degree=degree, theta=theta,
               user_action=print_error,
               u0_project=False, BC=BC, A_is_const=A_is_const,
               lumped_mass=lumped_mass,
               avoid_b_assembly=avoid_b_assembly, debug=debug)

With the ``verify`` function we can easily construct a range of unit tests.
For example, one test function might look as

.. code-block:: python

    def test_solver():
        x, y, z, t = sym.symbols('x[0] x[1] x[2] t')
    
        # 1D
        u = 1 + x**2 + 3*t
        verify(u, d=1, degree=1, BC='Dirichlet', N=20, theta=1)
        verify(u, d=1, degree=2, BC='Dirichlet', N=2, theta=1)
        verify(u, d=1, degree=1, BC='Robin', N=2,  theta=1)
        verify(u, d=1, degree=1, BC='Robin', N=20, theta=1)
        verify(u, d=1, degree=2, BC='Robin', N=2,  theta=1, error_tol=1.5E-13)
        verify(u, d=1, degree=2, BC='Robin', N=2,  theta=0.5)
        # Optimized versions
        verify(u, d=1, degree=1, BC='Dirichlet', N=2, theta=1,
               lumped_mass=True, avoid_b_assembly=True)
        verify(u, d=1, degree=1, BC='Dirichlet', N=2, theta=0.5,
               lumped_mass=True, avoid_b_assembly=True)
        verify(u, d=1, degree=1, BC='Dirichlet', N=2, theta=0,
               lumped_mass=True, avoid_b_assembly=True)
    
        # 2D
        u = 1 + x - 4*y**2 + 3*t
        verify(u, d=2, degree=1, BC='Dirichlet', N=2, theta=0.5)
        verify(u, d=2, degree=1, BC='Dirichlet', N=2, theta=1)
        verify(u, d=2, degree=1, BC='Dirichlet', N=2, theta=0)

Recall that ``verify`` performs the right ``assert`` only if the numerical
solution is without approximation errors. Robin conditions may lead to
exact solutions in 1D, but this is not so easy in 2D and 3D.
In higher dimensions, we normally get
a varying :math:`r`, depending on the manufactured solution, which destroys
the exact computation of derivatives. An extension of ``verify`` is
necessary such that we measure convergence rates when ``expect_exact_sol``
is ``False``.

.. _ch:diffusion:opt:debug:

Debugging of FEniCS programs
----------------------------

[**hpl 3**: This section is unfinished.]

When the first author implemented the ``solver`` function at hand, the
solution looked nice in visualizations, but the verification tests
where the solutions should be reproduced to machine precision, were
not fulfilled, although the numerical solutions converged. These
observations pointed to bugs in the code, but the author could not
spot them from pure reading. How can such a FEniCS code be systematically
debugged?  The safest way involves the following steps:

1. Reduce the problem to one spatial dimension.

2. Work with P1 elements.

3. Work with the smallest sensible mesh, e.g., two cells.

4. Compute by hand the contribution to the coefficient matrix and
   right-hand side from each term in the PDEs.

5. Assemble each term in the PDEs individually in FEniCS (easy!)
   for comparison with hand calculations. (Be aware of the ``vertex_to_dof``
   mapping in FEniCS!)

6. Write out all the Dirichlet conditions and check that they are correct.

7. Finally assert that the linear system computed by hand and by FEniCS
   are identical.

This procedure requires, of course, that one masters the basic algorithms
in the finite element method and can perform these by hand or by a
separate program. The details in the present PDE application are documented
next.

We start with reducing the problem to 1D. There are four types of terms
in our PDE: the mass matrix term :math:`\int\varrho c\frac{1}{{\Delta t}}u^{n+1}v`,
the stiffness matrix term :math:`\int p\nabla u\cdot\nabla v`, the source term
:math:`\int fv`, and the Robin condition term :math:`\int_\Gamma r(u-s)v`. We must
compute the element matrix or vector for each of these terms and
assemble the corresponding matrix or vector. Alternatively, we may compute
the matrix or vector directly, without considering element contributions.
We prefer the former approach here.

Numbering of the unknowns
~~~~~~~~~~~~~~~~~~~~~~~~~

Before diving into the calculations, we must know what type of mesh
our FEniCS code works with. The potential issue is how the unknowns in
the linear system (i.e., the degrees of freedom or dofs) are numbered,
see in the section
"Examining the degrees of freedom": "" in [Ref1]_.
While hand calculations typically prefer a numbering from left to right,
FEniCS may employ more sophisticated numberings. Each cell has two
vertices with numbers. For P1 elements, where the degrees of freedom coincide
with the function values at the vertices, we need to figure out what
the dof numbering is:

.. code-block:: python

    >>> from fenics import *
    >>> mesh = UnitIntervalMesh(2)
    >>> for i, p in enumerate(mesh.coordinates()):  # vertex numbering
    ...   print(i, p)
    ...
    0 [ 0.]
    1 [ 0.5]
    2 [ 1.]
    >>> V = FunctionSpace(mesh, 'P', 1)
    >>> print vertex_to_dof_map(V)
    [2 1 0]

We see that vertex number 0 corresponds to dof 2, vertex 1 to dof 1, and
vertex 2 to dof 0. This is very important to remember when doing the
hand calculations!

Hand calculations
~~~~~~~~~~~~~~~~~

The mass matrix term :math:`\int\varrho c\frac{1}{{\Delta t}}u^{n+1}v` leads to
an integral over each element involving the finite element basis functions:
:math:`\int\varrho c\frac{1}{{\Delta t}}\phi_i\phi_j{\, \mathrm{d}x}`. The corresponding element matrix
becomes (constant :math:`\varrho c`):

.. math::
        
        \varrho c \frac{h}{6{\Delta t}}
        \left(\begin{array}{rr}
        2 & 1\\ 
        1 & 2
        \end{array}\right)
        

The parameter :math:`h` is the length of an element.
Our computational case consists of two elements only, so
:math:`h=\frac{1}{2}` and the global mass matrix reads

.. math::
        
        \varrho c\frac{h}{6{\Delta t}}
        \left(\begin{array}{rrr}
        2 & 1 & 0\\ 
        1 & 4 & 1\\ 
        0 & 1 & 2
        \end{array}\right)
        

The corresponding computation in FEniCS is

.. code-block:: python

    F_M = rho*c*(u-v)/dt*v*dx
    if debug:
        M = assemble(lhs(F_M))  # assemble rho*c*u/dt*v*dx
        print('Mass matrix:\n', M.array())

The "backward" dof numbering of unknowns used in FEniCS in this case does
not influence the assembly by hand of the two element matrices.

The stiffness matrix term :math:`\int p\nabla u\cdot\nabla v` leads to
an element-wise integral :math:`\int \phi_i'\phi_j'{\, \mathrm{d}x}` when :math:`p=1` and the
associated element matrix

.. math::
        
        \frac{1}{h}
        \left(\begin{array}{rr}
        1 & -1\\ 
        -1 & 1
        \end{array}\right)
        

The assembled, global matrix becomes

.. math::
        
        \frac{1}{h}
        \left(\begin{array}{rrr}
        1 & -1 & 0\\ 
        -1 & 2 & -1\\ 
        0 & -1 & 1
        \end{array}\right)
        

Also here, there is no impact of the dof numbering in FEniCS.

The Robin condition in 1D reduces to

.. math::
         \int_\Gamma r(u-s)v{\, \mathrm{d}s} = [r(u-s)v]_0^1,

which gives a contribution :math:`[ruv]^1_0` to the coefficient matrix
and a contribution :math:`[rsv]^1_0` to the right-hand side vector.
We have :math:`[ruv]^1_0=r(1)u(1)v(1)-r(0)u(0)v(0)`. The first term gives
a contribution to the dof that corresponds to :math:`x=1` only, since
:math:`\phi_i(1)\phi_j(1)\neq 0` iff :math:`i` and :math:`j` is the dof at :math:`x=1`.
We typically get the global matrix

.. math::
        
        r(1,t)
        \left(\begin{array}{rrr}
         1 & 0 & 0\\ 
         0 & 0 & 0\\ 
         0 & 0 & 0
        \end{array}\right)
        

when dof 0
corresponds to the point (vertex) :math:`x=1`.
Now the FEniCS numbering of dofs becomes important!
The term :math:`r(0)u(0)v(0)` gives a similar contribution

.. math::
        
        r(0,t)
        \left(\begin{array}{rrr}
         0 & 0 & 0\\ 
         0 & 0 & 0\\ 
         0 & 0 & 1
        \end{array}\right)
        

to the global matrix.
The corresponding contributions to the right-hand side vector are

.. math::
        
        r(1,t)s
        \left(\begin{array}{r}
         1\\ 
         0\\ 
         0
        \end{array}\right),\qquad
        r(0,t)s
        \left(\begin{array}{r}
         0\\ 
         0\\ 
         1
        \end{array}\right){\thinspace .}
        

Our final term to be computed is :math:`\int fv`, which in the case :math:`f=1`
gives rise to element integrals :math:`\int \phi_i{\, \mathrm{d}x}` and the element
vector :math:`(h/2)(1,1)`. The assembled, global vector for two
elements reads :math:`h(\frac{1}{2},1,\frac{1}{2})`.

Comparing hand and FEniCS calculations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Now we are ready to see if the hand calculations correspond with those
in FEniCS.
With the variational form split into different pieces, it is easy to
assemble each piece individually and print the corresponding matrix or vector:

.. code-block:: python

    def D(u):
        return p*dot(grad(u), grad(v))*dx
    
    def B(u, i):
        return r[i]*(u-s)*v*ds(i)
    
    U = theta*u + (1-theta)*u_n
    F_M = rho*c*(u-u_n)/dt*v*dx
    F_K = D(U)
    F_f = f*v*dx
    F = F_M + F_K - F_f
    if BC == 'Robin':
        # Add cooling condition integrals from each side
        F_R = sum(B(U, i) for i in range(2*d))
        F += F_R
    
    if debug:
        print('M:\n', assemble(lhs(F_M)).array())
        print('K:\n', assemble(lhs(F_K)).array())
        print('R:\n', assemble(lhs(F_R)).array())
        print('A:\n', assemble(lhs(F)).array())
        print('rhs M:', assemble(rhs(F_M)).array())
        print('rhs f:', assemble(rhs(F_f)).array())
        print('rhs R:', assemble(rhs(F_R)).array())
        print('b:', assemble(rhs(F)).array())
    a, L = lhs(F), rhs(F)

Start with a case with Dirichlet conditions and then proceed with
testing Robin conditions.

.. _ch:diffusion:opt:noassembly:

Avoiding all assembly
---------------------

.. index::
   single: assembly, increasing efficiency

The purpose of this section is to present a technique for speeding up
FEniCS simulators for time-dependent problems where it is possible to
perform all assembly operations prior to the time loop.  There are two
costly operations in the time loop: assembly of the right-hand side
:math:`b` and solution of the linear system via the ``solve`` call. The
assembly process involves work proportional to the number of degrees
of freedom :math:`N`, while the solve operation has a work estimate of
:math:`\mathcal{O}( N^{\alpha})`, for some :math:`\alpha\geq 1`.  Typically,
:math:`\alpha\in [1,2]`.  As :math:`N\rightarrow\infty`, the solve operation will
dominate for :math:`\alpha>1`, but for the values of :math:`N` typically used on
smaller computers, the assembly step may still represent a
considerable part of the total work at each time level. Avoiding
repeated assembly can therefore contribute to a significant speed-up
of a finite element code in time-dependent problems.

Deriving recursive linear systems
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To see how repeated assembly can be avoided, we look at the
"right-hand side part" of the variational form (i.e., the linear form
:math:`L(v)`) when, for simplicity, :math:`\theta=1`:

.. math::
        \int_\Omega \left(\frac{1}{{\Delta t}}u^{n} + f^{n+1}\right)v {\, \mathrm{d}x}{\thinspace .} 

This expression varies in general with time through :math:`u^{n}`, :math:`f^{n+1}`, and
possibly also with :math:`{\Delta t}` if the time step is adjusted during the
simulation.  The technique for avoiding repeated assembly consists in
expanding the finite element functions in sums over the basis
functions :math:`\phi_i` to identify matrix-vector products that build up
the complete system. We have :math:`u^{n}=\sum_{j=1}^NU^{n}_j\phi_j`,
and we can expand :math:`f^n` as
:math:`f^{n}=\sum_{j=1}^NF^{n}_j\phi_j`. Inserting these expressions in
:math:`L(v)` and using :math:`v=\phi_i` result in

[**hpl 4**: Why :math:`hat\phi_i`? No need for Petrov-Galerkin here... Cannot remember why the hat. Remove it.]

.. math::
        \begin{align*}
        \int_\Omega \left(\frac{1}{{\Delta t}}u^{n} + f^{n+1}\right)v {\, \mathrm{d}x} &=
        \int_\Omega \left(\frac{1}{{\Delta t}}\sum_{j=1}^N U^{n}_j\phi_j + \sum_{j=1}^N F^{n+1}_j\phi_j\right)\phi_i {\, \mathrm{d}x},\\ 
        &=\sum_{j=1}^N\frac{1}{{\Delta t}}\left(\int_\Omega \phi_i\phi_j {\, \mathrm{d}x}\right)U^{n}_j
         + \sum_{j=1}^N\left(\int_\Omega \phi_i\phi_j {\, \mathrm{d}x}\right)F^{n+1}_j{\thinspace .}
        \end{align*}

Introducing :math:`M_{ij} = \int_\Omega \phi_i\phi_j {\, \mathrm{d}x}`, we see that
the last expression can be written

.. math::
        
        \sum_{j=1}^N \frac{1}{{\Delta t}}M_{ij}U^{n}_j + \sum_{j=1}^NM_{ij}F^{n+1}_j,
        

which is nothing but two matrix-vector products,

.. math::
        
        \frac{1}{{\Delta t}}MU^{n} + MF^{n+1},
        

if :math:`M` is the matrix with entries :math:`M_{ij}`,

.. math::
        
        U^{n}=(U^{n}_1,\ldots,U^{n}_N)^T,
        

and

.. math::
        
        F^{n+1}=(F^{n+1}_1,\ldots,F^{n+1}_N)^T{\thinspace .}
        

We have immediate access to :math:`U^{n}` in the program since that is the
vector in the ``u_n`` function. The :math:`F^{n+1}` vector can easily be computed
by interpolating the prescribed :math:`f` function (at each time level if
:math:`f` varies with time). Given :math:`M`, :math:`U^{n}`, and :math:`F^{n+1}`, the right-hand
side :math:`b` can be calculated as

.. math::
        
        b = \frac{1}{{\Delta t}}MU^{n} + MF^n {\thinspace .}
        

That is, no assembly is necessary to compute :math:`b`!

Generalization to the full model
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

It now remains to extend the results to the full :math:`\theta` rule and
to the boundary terms arising from the Robin conditions. Looking
at :ref:`(4) <Eq:ch:diffusion:opt:num:varform2>`, inserting

.. math::
         U = \theta\sum_j\phi_jU_j + (1-\theta)\sum_j\phi_jU_j^{n},

and utilizing that :math:`p\nabla U\cdot\nabla v` and :math:`r(U-s)v` are linear in :math:`U`,
we get a right-hand side contribution

.. _Eq:_auto1:

.. math::

    \tag{5}
    b = \frac{1}{{\Delta t}}MU^{n} + \theta MF^n - (1-\theta)KU^n - (1-theta)RU^n
        - g,
        
        

where :math:`R` is the matrix arising from the Robin condition:

.. math::
         R_{i,j} = \int_\Gamma r\phi_i\phi_j{\, \mathrm{d}s},

and :math:`g` is the associated vector,

.. math::
         g_i = \int_\Gamma rs\phi_i{\, \mathrm{d}s}{\thinspace .}

Splitting the coefficient matrix
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If we decide to use a varying time step :math:`{\Delta t}`, the :math:`A` matrix
will vary with time, but it has a special structure so that it can
easily and cheaply be computed at each time level.
To see this, we
insert :math:`v=\phi_i` and :math:`u^n = \sum_{j=1}^N U^n_j\phi_j` in the
bilinear expression for the simplified case :math:`\theta=1` and no Robin
conditions to get

.. math::
        
        \sum_{j=1}^N \left(\int_\Omega \frac{1}{{\Delta t}}
        \phi_i\phi_j {\, \mathrm{d}x}\right)U^n_j +
        \sum_{j=1}^N \left(\int_\Omega \nabla\phi_i\cdot\nabla\phi_j {\, \mathrm{d}x}\right)U^n_j,
        

which can be written as a sum of matrix-vector products,

.. math::
        
        \frac{1}{{\Delta t}}MU^n + KU^n = (\frac{1}{{\Delta t}}M + {{\Delta t}} K)U^n,
        

if we identify the matrix :math:`M` with entries :math:`M_{ij}` as above and
the matrix :math:`K` with entries

.. _Eq:_auto2:

.. math::

    \tag{6}
    K_{ij} = \int_\Omega \nabla\phi_i\cdot\nabla\phi_j {\, \mathrm{d}x}{\thinspace .}
        
        

The matrix :math:`M` is often called the "mass matrix" while "stiffness
matrix" is a common nickname for :math:`K`. The associated bilinear forms
for these matrices, as we need them for the assembly process in a
FEniCS program, become

=====================================================================  ====================================  
                             Mathematics                                           FEniCS Code               
=====================================================================  ====================================  
:math:`a_K(u,v) = \int_\Omega \nabla u\cdot\nabla v {\, \mathrm{d}x}`  ``a_K = dot(nabla(u), nabla(v))*dx``  
:math:`a_M(u,v) = \int_\Omega uv {\, \mathrm{d}x}`                     ``a_M = u*v*dx``                      
=====================================================================  ====================================  

The linear system at each time level, written as :math:`AU^n=b`,
can now be computed by first computing :math:`M` and :math:`K`, and then forming
:math:`A={{\Delta t}}^{-1} M+ K` at :math:`t=0`, while :math:`b` is computed as
:math:`b={{\Delta t}}^{-1} MU^{n-1} + MF^n` at each time level.

[**hpl 5**: Using :math:`u^n` and :math:`u^{n-1}`, should be :math:`n+1` and :math:`n`.]

Generalization to full model
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The coefficient matrix associated with the complete variational form
:ref:`(4) <Eq:ch:diffusion:opt:num:varform2>` leads to somewhat more complicated
formulas. Just for simplicity, we
drop this optimization when we have Robin conditions only. Ignoring the
integral over the boundary, we get that

.. math::
         A=\varrho c\frac{1}{{\Delta t}}M + \theta K,

and

.. math::
         b = \varrho c\frac{1}{{\Delta t}} Mu^{n} + MF^m - (1-\theta)Ku^n,

where :math:`F^{n+\theta}` is the vector of interpolated :math:`f`
values at time :math:`t_{n+\theta} = f(\theta t_{n+1} + (1-\theta) t_n)`.

[**hpl 6**: Not finished.]

FEniCS implementation          (1)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

It is tempting to construct :math:`A` as

.. code-block:: python

    A = rho*c*(1./dt)*M + theta*K

but that statement invokes a problem: matrix arithmetics works with scalars
only, while ``rho``, and ``c`` are ``Constant`` objects. We therefore need to
convert them to plain real numbers:

.. code-block:: python

    A = float(rho)*float(c)*(1./dt)*M + theta*K

Assume that we have already made the mass and stiffness matrices prior
to the time loop,

.. code-block:: python

    if avoid_b_assemble:
        M = assemble(u*v*dx)
        K = assemble(D(u))

we can in the time loop write

.. code-block:: python

    if avoid_b_assemble:
        assert BC == 'Dirichlet'  # restrict for simplicity
        f_m = interpolate(f, V)
        F_m = f_m.vector()
        A = float(rho)*float(c)*(1./dt)*M + theta*K
        b = float(rho)*float(c)*(1./dt*M*u_n.vector() + \ 
            M*F_m - (1-theta)*K*u_n.vector()
    else:
        # Assume A is assembled initially as A = assemble(lhs(F))
        b = assemble(L, tensor=b)

That is, no assembly at all is needed inside the time loop, just
matrix-vector operations. We hope that this can give a performance
boost, but experiments to be reported later show that the gain is
about a factor of 4 compared to full assembly of :math:`A` and :math:`b` the
usual way.

Finished here. [[[

The ``user_action`` function ``assert_error`` asserts equality of the
exact and numerical solution at every time level:

.. code-block:: python

    def assert_error(t, u, timestep):
        u_e = interpolate(u_b, u.function_space())
        error= np.abs(u_e.vector().array() -
        	          u.vector().array()).max()
        tol = 2E-12
        assert error < tol, 'error: %g' % error

One can also use the user action callback function to visualize
the solution:

.. code-block:: python

    def assert_error(t, u, timestep):
        global p
        if t == 0:
            p = plot(u, title='u',
    	         # Fix the color scale
                     range_min=float(u_range[0]),  # must be float
                     range_max=float(u_range[1]))  # must be float
        else:
            p.plot(u)
        print('t=%g' % t)
        time.sleep(0.5)

It is key to fix the color scale to get a meaningful animation.

A complete function calling up ``solver_minimize_assembly`` for
animating the solution in two test problems is found in the
function ``application_animate`` in
`ft12_heat_func.py <ft12_heat_func.py>`__.

.. _ch:diffusion:opt:lumping:

Lumped mass matrix
------------------

What is the problem with the mass matrix?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Comparing a P1 finite element method with a standard finite difference
method, on a uniformly partitioned hypercube mesh, reveals that the
stiffness matrix :math:`K`, arising from :math:`\int p\nabla u\cdot\nabla v{\, \mathrm{d}x}`,
is the same for both methods, while the mass matrix :math:`M`, arising from
a term like :math:`\int uv{\, \mathrm{d}x}`, is very different in the two methods.  The
mass matrix is diagonal in the finite difference method, thus making
:math:`\theta=0` a truly explicit scheme with no need for solving a system
of linear algebraic equations in each time step. It would be very
convenient to have this mass matrix also in finite element solvers to
speed up computations. Moreover, analysis of the damping properties of
the finite element and finite difference methods in diffusion problems
:math:`\frac{\partial u}{\partial t} = \alpha\frac{\partial^2 u}{\partial
x^2}` shows that the finite difference method, with its diagonal mass
matrix, is more accurate than the finite element method. For :math:`\theta=0`
it also has less strict stability properties.

To be more precise with the mentioned analysis, a Fourier component
:math:`u(x,t)=A(t)\sin(kx)` of the solution is damped by a factor :math:`A` from
one time step to the next (:math:`A=e^{-\alpha k^2 t}`).  It turns out that
in a P1 finite element method or a finite difference method with
second-order, centered spatial differences, :math:`A` depends on :math:`p=kh/2`
and :math:`F=\alpha\Delta t/ h^2`, where :math:`h` is the cell length. The
dimensionless number :math:`F` is known as the mesh Fourier number. The
Forward Euler scheme, :math:`\theta=0`, is unstable unless :math:`F\leq 1/6` in the
finite element method and :math:`F\leq 1/2` in the finite difference method.
Figure :ref:`ch:diffusion:opt:lumping:fig:FE` compares the graphs of :math:`A`
for the two methods an values of :math:`F` that give stable solutions. We
clearly see that the finite element method gives rise to :math:`A<0` for
short waves, which is manifested as "flipping noise" in animations where
the solution oscillates from time step to time step. In very smooth solutions,
the short waves have too small amplitudes for this effect to be visible,
but in problems with discontinuities, it is easy to spot that reducing :math:`F`
increases the noise.

Figures :ref:`ch:diffusion:opt:lumping:fig:BE` and
:ref:`ch:diffusion:opt:lumping:fig:CN` compares :math:`A` for a wider range of
:math:`F` values for the Backward Euler and Crank-Nicolson schemes,
respectively. Also here we clearly see that the finite element method
leads to inferior damping properties compared to the finite difference
method. "Flipping noise" for high frequencies (due to :math:`A<0`) is a
well-known flaw in the Crank-Nicolson scheme, but the negative
effect is more pronounced in the finite element method. However, it is
easy to come up with a remedy for the finite element method: if we
make the mass matrix diagonal, the method will be equivalent to the
finite difference method on a uniformly partitioned mesh and hence
equally accurate.

.. _ch:diffusion:opt:lumping:fig:FE:

.. figure:: diffu_A_factors_fine_FE.png
   :width: 600

   *Comparison of damping factors for the Forward Euler scheme*

.. _ch:diffusion:opt:lumping:fig:BE:

.. figure:: diffu_A_factors_BE.png
   :width: 800

   *Comparison of damping factors for the Backward Euler scheme*

.. _ch:diffusion:opt:lumping:fig:CN:

.. figure:: diffu_A_factors_CN.png
   :width: 800

   *Comparison of damping factors for the Crank-Nicolson scheme*

Lumping the mass matrix
~~~~~~~~~~~~~~~~~~~~~~~

A widely used method for making the mass matrix diagonal, or *lump* it as
the phrase often goes [#lumping]_, is to sum all elements in a row, set
the sum on the diagonal, and put zeros in all the other columns. This is
called the row-sum technique and applies well to P1 elements, but it does
not work well with P2 and higher-order elements. For these elements, one
should instead use a quadrature that only samples the integrands at the
points where we have the function value degrees of freedom. This
is not yet possible in FEniCS [**hpl 7**: Anders, right?] so lumping remains
restricted to P1 elements as explained here.

.. [#lumping] The term arose in the days where the primary application
   was wave motion (in elastic or other media) and the diagonalization
   consisted in concentrating uniformly distributed mass as lumps at the
   nodes only.

Implementation in FEniCS
~~~~~~~~~~~~~~~~~~~~~~~~

The row sum can be computed by multiplying the matrix by a vector with 1
for all elements,

.. code-block:: python

    unity = Function(V)
    unity.vector()[:] = 1.
    
    [bc.apply(M, b) for bc in bcs]
    ML = M*unity.vector()  # lump M

It is very important that we carry out the multiplication with ``unity``
(i.e., the row sum) *after* Dirichlet boundary conditions are inserted in the
matrix ``M``! Otherwise, the boundary conditions will not be incorporated
in the vector ``ML``.

We introduce a boolean ``lumped_mass`` in the ``solver`` function for indicating
computations with a lumped mass matrix. Prior to the time loop we need
to make sure we have the ``unity`` field available as well as ``M`` and ``K``
for the mass matrix and the stiffness matrix:

.. code-block:: python

    if lumped_mass:
        M = assemble(u*v*dx)
        K = assemble(D(u))

We need to distinguish between two cases: :math:`\theta=0` and :math:`\theta >0`.
In the former case, the entire coefficient matrix is lumped and we can avoid
calling ``solve``, while in the latter case, parts of the coefficient matrix
involves a lumped mass matrix while other parts employ standard, assembled
matrices. For :math:`\theta =0` we create the coefficient matrix as the
matrix ``rho*c*M`` or

.. code-block:: python

    if lumped_mass and theta == 0:
        A = assemble(lhs(F_M)) # make consistent mass, lump later
    else:
        A = assemble(lhs(F))

For :math:`\theta >0`, the implementation is a bit tricky. We would like to
write

.. code-block:: python

    ML = M*unity.vector()  # lump
    A1 = float(rho)*float(c)*(1./dt)*ML
    A = A1 + theta*K

but ``A1 + theta*K`` does not work because it is a vector plus a matrix.
The trick is to add ``A1`` to the diagonal of ``theta*K``:

.. code-block:: text

    A2 = theta*K
    diag = unity.vector().copy()  # allocate vector
    A2.get_diagonal(diag)
    A2.set_diagonal(diag + A1)
    A = A2

Now, ``A`` is a matrix, but with a lumped mass matrix contribution.

The right-hand side :math:`b=\varrho c {{\Delta t}}^{-1}Mu^n + MF^m - (1-\theta)K`
is for a lumped mass matrix and :math:`\theta >0` computed as

.. code-block:: python

    b = float(rho)*float(c)*1./dt*ML*u_n.vector() + \ 
        ML*F_m - (1-theta)*K*u_n.vector()

We have decided to put all the mentioned methods together in the ``solver``
function, and together with debug output, this makes a quite
lengthy function in file `ft12_heat_func.py <https://github.com/hplgit/fenics-tutorial/blob/master/src/ft12_heat_func.py>`__. There are four methods for different kinds of assembly
and three boolean variables to control them:

 * ``lumped_mass``: ``True`` if the mass matrix is lumped

 * ``avoid_b_assembly``: ``True`` if the right-hand side is to be computed
   from matrix-vector products and no assembly

 * ``A_is_const``: ``True`` if the coefficient matrix is constant (assumption
   when using lumped mass).

Four methods are available for assembling the coefficient matrix :math:`A` and
right-hand side :math:`b`:

1. Full assembly of :math:`A` and :math:`b` at each time level:
   ``lumped_mass=False``, ``avoid_b_assembly=False``, ``A_is_const=False``

2. Initial assembly of :math:`A`, full assembly of :math:`b` at each time level:
   ``lumped_mass=False``, ``avoid_b_assembly=False``, ``A_is_const=True``

3. No assembly of :math:`A` and :math:`b` at each time level, just construction
   through matrix-vector products:
   ``lumped_mass=False``, ``avoid_b_assembly=True``, ``A_is_const=True``

4. No assembly of :math:`A` and :math:`b` at each time level, just construction
   through matrix-vector products, but with lumped mass matrices:
   ``lumped_mass=True``, ``avoid_b_assembly=True``, ``A_is_const=True``

The function ``test_efficiency`` measures the impact of the four
optimization technique using the verification problem from
the section :ref:`ch:diffusion:opt:verify`.
The results are independent of the number of space
dimensions and the number of unknowns. We find typically for :math:`\theta
=0` that method 2-4, compared to method 1, speeds up the code by a
factor of 2, 4, and 6, respectively.  The factor 2 is easy to explain:
if the work of creating :math:`A` and :math:`b` by assembly is about the same, we
gain a factor of two by omitting one of them at every time
step. One would perhaps expect that the factors 4 and 6 would be
better, but in these tests, we have used a sparse matrix
representation of :math:`A`, and matrix - vector arithmetics with sparse
matrices are demanding to implement efficiently because of the many
cache misses, a problem shared with the assembly algorithm. It may well
happen that both algorithms suffer from spending most of the time grabbing data
from memory and not on computing (where matrix - vector arithmetics should
involve far fewer operations than the assembly algorithm).
The trick with manipulating the diagonal of ``A2`` is also
more costly than tailored support for lumped mass matrices in FEniCS.
Anyway, a factor 6 may be important in many applications, and the increased
accuracy for less smooth solutions of the diffusion equations,
as provided by a lumped mass matrix, may often be more important.

Application: diffusion of a spike
---------------------------------

Just to demonstrate how to use the ``solver`` function in an application,
we consider pure diffusion of a spike in a domain :math:`[0,L]\times [0,L]`:

.. math::
         u_0(x,y) = T_0 + A\sin^m(\pi\frac{x}{L})\sin^m(\pi\frac{y}{L}),

for some parameters :math:`T_0`, :math:`A`, and :math:`m`. The latter governs the thickness
of the spike.
It is convenient to scale the problem by introducing

.. math::
         \bar u = \frac{u-T_0}{A},\quad \bar x=\frac{x}{L},\quad \bar y
        = \frac{y}{L},\quad \bar t = \frac{p t}{L^2\varrho c},

resulting in the homogeneous, constant-coefficient, scaled diffusion equation
(now dropping bars over scaled quantities)

.. math::
         \frac{\partial u}{\partial t} = \nabla^2 u{\thinspace .}

The Robin boundary condition with surrounding temperature :math:`T_0` becomes

.. math::
         -\frac{\partial u}{\partial n} = \mathrm{Nu}\,u,

with the Nusselt number :math:`\mathrm{Nu}=Lr/p` as a dimensionless variable.


.. admonition:: Partial verification

   With :math:`\mathrm{Nu}=0` and insulated boundaries one can integrate the
   PDE over the spatial domain and obtain :math:`\frac{\partial}{\partial t}\int_\Omega
   u{\, \mathrm{d}x} = 0` (the :math:`\nabla^2 u` term is converted to a surface integral
   involving :math:`\partial u/partial n`).
   That is, the integral under the solution remains constant in time.
   We can use this result as a partial verification at each time level
   in the ``user_action`` function. The integral is easily calculated in
   FEniCS by ``assemble(u*dx)``.




Observe that running the solver with :math:`p=c=\varrho =1`, :math:`f=0`, :math:`s=0`,
:math:`r=\mathrm{Nu}` (on each side of the square domain), and
:math:`u(x,y,0)=\sin^8(\pi x)\sin^8(\pi y)` solves the scaled problem.  The
scaled domain :math:`[0,1]\times[0,1]` is divided into a :math:`60\times 60`
partitioning with P1 elements.

The integral of :math:`u` for a thin (:math:`m=8`) and a thick (:math:`m=2`) spike is

.. code-block:: text

    Terminal> isympy
    In [1]: m=2
    
    In [2]: integrate(sin(pi*x)**m*sin(pi*y)**m, (x,0,1), (y,0,1))
    Out[2]: 1/4
    
    In [3]: m=8
    
    In [4]: integrate(sin(pi*x)**m*sin(pi*y)**m, (x,0,1), (y,0,1))
    Out[4]: 1225/16384
    

(The SymPy interactive shell, ``isympy``, is a convenient symbolic calculator
that predefines ``x`` and ``y`` as
symbols and automatically performs ``from sympy import *``.)

We want to animate the solution using the FEniCS built-in ``plot`` command.
The necessary actions must be done in the ``user_action`` function, here
called ``animate``.

The application code reads

.. code-block:: python

    def animate_sine_spike(m=2):
        import numpy as np, time
    
        # Diffusion of a sin^8 spike, scaled homogeneous PDE
        u0 = Expression('pow(sin(pi*x[0])*sin(pi*x[1]), m)', m=m)
        c = rho = p = Constant(1)
        f = Constant(0)
        dt = 0.0005
        T = 20*dt
        L = [1, 1]
        divisions = (60, 60)
        u_range = [0, 1]
    
        # Neumann conditions (insulated boundary)
        BC = 'Robin'
        Nu = 0
        r = [Constant(Nu) for i in range(4)]   # Scaled Robin cond
        s = Constant(0)  # dummy, not used
    
        vtkfile = File('diffusion.pvd')
    
        def animate(t, u, timestep):
            global plt
            if t == 0:
                plt = plot(u, title='u',
                           range_min=float(u_range[0]),  # must be float
                           range_max=float(u_range[1]))  # must be float
            else:
                plt.plot(u)
                # Integral of u should remain constant
                u_integral = {2: 1./4, 8: 1225./16384}
                if m in u_integral:
                    assert abs(assemble(u*dx) - u_integral[m]) < 1E-12
            print('t=%g' % t)
            time.sleep(0.5)           # pause between frames
            vtkfile << (u, float(t))  # store time-dep Function
    
        solver(
            rho, c, p, f, r, s, u0, T, L,
            dt, divisions, degree=1, theta=0.5,
            user_action=animate,
            u0_project=False,
            lumped_mass=False,
            BC=BC)
            #avoid_b_assembly=True does not yet work with Robin cond.

A little trick is needed in the ``animate`` function. To fix the
color scale throughout the animation, we must initially provide the
range of :math:`u` values for the scale, while later we must update the plot
using the object returned from initial ``plot`` call. This object must
survive between successive calls to ``animate`` so it cannot be a local
variable. The solution is to let it be a global variable ``plt``
(or one could implement ``animate`` via a class that has ``plt`` as an
attribute and the callback function as method, usually ``__call__``).

The animation shows that the thick spike raises the values at the
boundaries with time, and we can see the solution approaches a
constant (1/4), while the thin spike (:math:`m=8`) just diffusions and
vanishes with minor impact on the boundary values (these values are to
end up at 0.075 as :math:`t\rightarrow\infty`, but this is hardly visible in
the plot).

.. ===== Methods of lines and ODE solvers =====

.. _ch:diffusion:welding:

A welding example with post processing and animation
====================================================

The focus so far in this tutorial has been on producing the solution
of PDE problems. [**hpl 8**: This is book 2, it depends on how things end up in the previous chapter.] For scientific investigations, the primary
work is often with post processing results: computing quantities
derived from the solution and inspecting these with visualization or
data analysis tools.  This is the focus of the present section.  To
ease the programming, we shall make use of a convenient tool,
``cbcpost``, for post processing, saving data to file(s), and animating
solutions.  We recommend to use ``cbcpost`` in all time-dependent FEniCS
solvers.

To explain the usage of ``cbcpost`` for storage and plotting, we address
a real physical application: welding of a plate, where a moving heat
source gives rise to a moving temperature field.

.. _ch:diffusion:welding:cbcpost:

Post processing data and saving to file
---------------------------------------

Installation
~~~~~~~~~~~~

The ``cbcpost`` package is not a part of the ``fenics`` package so you
will need to install it.  The simplest installation method is to use
``pip``. We recommend to install a companion package ``fenicstools`` as
well. Just run

.. code-block:: text

    sudo pip install git+https://bitbucket.org/simula_cbc/cbcpost.git
    sudo pip install git+https://github.com/mikaem/fenicstools.git

in a terminal window (skip ``sudo`` on Windows machines).
Alternatively, you can grab the source code and run ``setup.py`` the usual
way Python packages are installed from source:

.. code-block:: text

    Terminal> git clone https://bitbucket.org/simula_cbc/cbcpost.git
    Terminal> cd cbcpost
    Terminal> python setup.py install
    Terminal> cd ..
    Terminal> git clone https://github.com/mikaem/fenicstools.git
    Terminal> cd fenicstools
    Terminal> python setup.py install

Basic commands
~~~~~~~~~~~~~~

We must create a *post processor* and then specify what kind of
results we want to be stored on file and (optionally) get visualized.
Suppose we have a field with logical name ``Temperature`` that we want
to save in XDMF/HDF5 format in files in a fresh subdirectory ``Results``:

.. code-block:: python

    import cbcpost as post
    # Create post processor
    pp = post.PostProcessor(dict(casedir='Results', clean_casedir=True))
    # Specify storage of a "Temperature" field
    pp.add_field(post.SolutionField(
        'Temperature',
        dict(save=True,
             save_as=['hdf5', 'xdmf'],
             plot=True,
             plot_args=dict(range_min=0.0, range_max=1.2))))

The ``plot=True`` automatically launches ``fenics.plot`` commands of
this scalar field during the simulation. The ranges of the color
scale must be given (as ``float`` variables) so that the color scale
stays fixed during the animation on the screen.

Inside the time loop, we have to feed a new solution to the post processor
to get it saved:

.. code-block:: python

    pp.update_all({'Temperature': lambda: T}, t, timestep)

Here, ``T`` is the ``Function`` object that we have solved for, ``t`` is
current time, and ``timestep`` is the corresponding time step number.

One can specify many fields to be saved (and plotted), but even more
important: ``cbcpost`` can calculate a lot of derived quantities from
the solution, such as

 * time derivatives and integrals of vector/scalar fields

 * extraction of fields over subdomains

 * slicing of fields in 3D geometries

 * averaging of fields in space or time

 * norms and point values of fields as function of time

 * user-defined post processing of fields

We refer to the online `cbcpost documentation <http://cbcpost.readthedocs.org/en/latest/index.html>`__ for further information on all the capabilities of this
package.


.. admonition:: Tip: Use ``cbcpost`` to visualize time-dependent data

   Instead of issuing your own ``plot`` commands in time-dependent
   problems, it is safer and more convenient to specify ``plot=True``
   and fix the range of the color scale, when you add fields
   to the post processor. Multiple fields will be synchronized during
   the animation.




.. _ch:diffusion:welding:problem:

Heat transfer due to a moving welding source
--------------------------------------------

Let us solve a diffusion problem taken from welding.  A moving
welding equipment acts as a moving heat source at the top of a thin
metal plate.  The question is how the heat from the equipment spreads
out in the material that is being exposed to the external heat source.
We use the standard heat
equation and do not take phase
transitions into account.  The governing PDE is then

.. math::
         \varrho c \frac{\partial u}{\partial t} = p\nabla^2 u + f,

where :math:`u` is temperature, :math:`\varrho` is the density of the material,
:math:`c` is the heat capacity at constant volume, :math:`p` is the heat
conduction coefficient, and :math:`f` models the heat source from the
welding equipment. The domain is :math:`\Omega = [0,L]\times [0,L]\times [0,L_z]`.
The plate is thin, meaning that :math:`L_z\ll L`. The relevant boundary
condition is a cooling law; that is, a Robin condition

.. math::
         -p\frac{\partial u}{\partial n} = r(u-s),

on the entire boundary. Here, :math:`r` is the heat transfer coefficient at
the boundary and :math:`s` is the surrounding temperature.
The natural initial condition is :math:`u=s`. Note that when the plate is thin,
one might be tempted to use a 2D model, but this implies the assumption of
:math:`\partial u/\partial z =0`, which again means insulated boundaries at the
top and bottom surfaces of the plate. This is not physically relevant as we
know there will be quite some heat loss from the surfaces of the plate.
We must therefore have a cooling condition in these surfaces, which implies
:math:`\partial u/\partial z \neq0` and hence a 3D problem. (Nevertheless, one
could integrate over the thickness and develop a 2D model that takes the
heat loss at the surfaces into account - the PDE will then get an extra
:math:`r(u-s)` term and turn into a reaction-diffusion equation.)

A welding source is moving and very localized in space.  The
localization can be modeled by a peak-shaped Gaussian function.  The
movement is taken to be a circle with radius :math:`R` about a point
:math:`(x_0,y_0,L_z)`. The velocity of the equipment is constant. A possible
form of :math:`f` is

.. math::
         f(x,y,t) = A\exp{\left(-\frac{1}{2\sigma^2}
        \left({x-(x_0 + R\cos\omega t)}\right)^2 -\frac{1}{2\sigma^2}
        \left({y-(y_0 + R\sin\omega t)}\right)^2\right)}{\thinspace .}

The parameter :math:`A` is the strength of the heat source, and :math:`\sigma` is
the "standard deviation" (i.e., a measure of the width) of the Gaussian
function. This source is equally strong throughout the thickness of
the material. We could easily multiply by some function modeling decay
of the source in :math:`z` direction as we move away from the top surface where
the welding equipment is applied.

.. _ch:diffusion:welding:scaling:

Scaling of the welding problem
------------------------------

There are 10 physical parameters in the problem: :math:`L`, :math:`\varrho`, :math:`c`,
:math:`p`, :math:`A`, :math:`x_0`, :math:`y_0`, :math:`R`, :math:`\omega`, :math:`\sigma`.  Scaling can
dramatically reduce the number of parameters and also introduce new
parameters that are much easier to assign numerical values when doing
numerical experiments. In the present application, we end up with essentially
one interesting parameter to vary in the scaled problem!
As length
scale, we choose :math:`L` so the scaled domain becomes :math:`[0,1]\times [0,1]\times
[0,\Delta]`, where :math:`\Delta = L_z/L` is a small dimensionless parameter. As
time scale and characteristic size of :math:`u`, we just introduce :math:`t_c` ad
:math:`u_c`.  This means that we introduce scaled variables

.. math::
        
        \bar x = \frac{x}{L},\quad \bar y = \frac{y}{L},\quad \bar t =\frac{t}{t_c},
        \quad\bar u = \frac{u-s}{u_c}{\thinspace .}
        

The scaled form of :math:`f` is naturally :math:`\bar f = f/A`, since this makes
:math:`\bar f\in (0,1]`. The arguments in the exponential function in :math:`f` can
also be scaled:

.. math::
        \begin{align*}
        \bar f &= \exp{\left(-\frac{1}{2\sigma^2}
        \left({\bar xL -(L \bar x_0 + L\bar R\cos\omega t_c t)}\right)^2 -
        \frac{1}{2\sigma^2}
        \left({L \bar y-(L\bar y0 + L\bar R\sin\omega t_c t)}\right)^2\right)}\\ 
        &= \exp{\left(-\frac{1}{2}\frac{L^2}{\sigma^2}
        \left(x -(\bar x_0 + \bar R\cos\omega t_c \bar t)\right)^2 -
        \frac{1}{2}\frac{L^2}{\sigma^2}
        \left(\bar y-(\bar y0 + \bar R\sin\omega t_c \bar t)\right)^2\right)}\\ 
        &= \exp{\left(-\frac{1}{2}\beta^2
        \left((x -(\frac{1}{2} + \bar R\cos\bar t)\right)^2 -
        \left(\bar y-(\frac{1}{2} + \bar R\sin\bar t))^2\right)\right)},
        \end{align*}

where :math:`\beta` is a dimensionless parameter,

.. math::
         \beta = \frac{L}{\sigma},

reflecting the ratio of the domain size and the width of the heat source.
Moreover, we have restricted the rotation point to be the center point
of the domain:

.. math::
         (\bar x_0,\bar y_0) = (\frac{1}{2},\frac{1}{2}){\thinspace .}

The time scale in diffusion problems is usually related to the "speed
of diffusion", but in this problem it is more natural to base the
time scale on the movement of the heat source, which suggests setting
:math:`t_c = 1/\omega`.

Inserting the new scaled variables in the PDE leads to

.. math::
         \frac{\partial \bar u}{\partial\bar t} =
        \frac{p}{\omega\varrho c L^2}\bar\nabla^2\bar u +
        \frac{A}{\omega u_c\varrho c}\bar f(\bar x,\bar y,\bar t){\thinspace .}

The first coefficient is a dimensionless number,

.. math::
         \gamma = \frac{p}{\omega\varrho c L^2},

while the second coefficient can be used to determine :math:`u_c` by demanding
the source term to balance the time derivative term,

.. math::
         u_c = \frac{A}{\omega\varrho c}{\thinspace .}

Our aim is to have :math:`\bar u \in [0,1]`, but this :math:`u_c` does not capture
the precise magnitude of :math:`u`. However, we believe that the characteristic
size of :math:`u` is

.. math::
         u_c = \delta^{-1}\frac{A}{\omega\varrho c},

for a scaling factor :math:`\delta`. Using this :math:`u_c` gives the PDE

.. math::
         \frac{\partial \bar u}{\partial\bar t} =
        \gamma\bar\nabla^2\bar u +
        \delta\bar f(\bar x,\bar y,\bar t),

with two dimensionless variables, but :math:`\delta` is quite easily
tuned from experiments to give :math:`\bar u` a typically size of unity.

Looking at :math:`\gamma`, we see that it can be written

.. math::
         \gamma = \frac{1/\omega}{\varrho c L^2/p},

which is the ratio of the time scale for the heat source and the
time scale for diffusion. Multiplying by :math:`R/R` gives another
interpretation: :math:`\gamma` is the ratio of the speed of diffusion and
the speed of the heat source. In welding, the speed of the heat
source is very much larger than the speed of heat conduction.

[**hpl 9**: This is vol II and we have done scaling many times, so we perhaps don't need more selling points. We had some in the introduction to this section.]


.. admonition:: The benefits of scaling

   The physics of our problem depends now on :math:`\beta`, :math:`\bar
   R`, and :math:`\gamma`, just three ratios of physical effects instead
   of 10 independent parameters.  Setting
   :math:`\bar R = 0.2` is an appropriate choice. For a quite localized heat
   source in space, :math:`\beta=10` is a suitable value.  Then we are
   actually left with only one interesting parameter to adjust: :math:`\gamma`.
   It is so much easier to assign this parameter a value (speed of
   diffusion versus speed of heat source) than to set :math:`\varrho`, :math:`c`, and
   :math:`p` for some chosen material, and then determine relevant values for
   :math:`A`, :math:`L`, etc. There are no approximations in the scaling procedure;
   it just dramatically simplifies numerical simulations.
   The book [Ref2]_ gives a comprehensive treatment
   of scaling.




.. _ch:diffusion:welding:funcsolver:

A function-based solver
-----------------------

We can use the ``solver`` function from the section :ref:`ch:diffusion:opt` to
solve the welding problem. The application code just declares the
problem-dependent parameters and calls the solver function:

.. code-block:: python

    def welding(gamma=1, delta=70, beta=10, num_rotations=2, Nu=1):
        """Circular moving heat source for simulating welding."""
        d = 3  # number of space dim
        from math import pi, sin, cos
        # Define physical parameters and boundary conditions
        u0 = Constant(0)
        rho = c = Constant(1)
        p = Constant(1.0/gamma)
        BC = 'Robin'
        Nu = 1
        r = [Constant(Nu) for i in range(2*d)]
        s = Constant(0)
    
        # Define welding source
        R = 0.2
        f = Expression(
            'delta*exp(-b*(pow(x[0]-(0.5+R*cos(t)),2) + '
            'pow(x[1]-(0.5+R*sin(t)),2)))',
            delta=delta, b=0.5*beta**2, R=R, t=0)
        omega = 1.0      # Scaled angular velocity
        P = 2*pi/omega   # One period of rotation
        T = num_rotations*P
        dt = P/40        # 40 steps per rotation
    
        divisions = (40, 40, 4)
        L = (1, 1, 0.05)
    
        solver(
            rho, c, p, f, r, s, u0, T, L,
            dt, divisions, degree=1, theta=0.5,
            user_action=ProcessResults(),
            u0_project=False,
            lumped_mass=False,
            BC=BC,
            A_is_const=False,
            avoid_b_assembly=False)

Note that our efficiency enhancements in the ``solver`` function do
not incorporate contributions from Robin conditions, so we cannot
take advantage here of the fact that the coefficient matrix is constant
and that assembly can be completely avoided.

The remaining task is to write the user action callback function
(class ``ProcessResults``) to
process the solution at teach time step. We want to make use of
``cbcpost`` for storage and plotting.  Since we need the post processor
variable, called ``pp`` in the section :ref:`ch:diffusion:welding:cbcpost`,
to survive between calls to the user action function, we find it
most convenient to implement this function in terms of a class with
``pp`` as attribute and ``__call__`` as the user action function.  We want
to make comparisons between the heat source and the temperature
response, so we register both fields for storage and plotting:

.. code-block:: python

    import cbcpost as post
    class ProcessResults(object):
        def __init__(self):
            """Define fields to be stored/plotted."""
            # Dump temperature solution to std FEniCS file temp.h5
            self.timeseries_T = TimeSeries(mpi_comm_world(), 'temp')
            # Also dump temperature and source to cbcpost files
            self.pp = post.PostProcessor(
                dict(casedir='Results', clean_casedir=True))
            self.pp.add_field(
                post.SolutionField(
                    'Temperature',
                    dict(save=True,
                         save_as=['hdf5', 'xdmf'],  # format
                         plot=True,
                         plot_args=
                         dict(range_min=0.0, range_max=1.1)
                         )))
            self.pp.add_field(
                post.SolutionField(
                    "Heat_source",
                    dict(save=True,
                         save_as=["hdf5", "xdmf"],  # format
                         plot=True,
                         plot_args=
                         dict(range_min=0.0, range_max=float(delta))
                         )))
            # Save separately to VTK files as well
            self.vtkfile_T = File('temperature.pvd')
            self.vtkfile_f = File('source.pvd')
        def __call__(self, t, T, timestep):
            """Store T and f to file (cbcpost and VTK)."""
            T.rename('T', 'solution')
            self.timeseries_T.store(T.vector(), t)
            f_Function = interpolate(f, T.function_space())
            f_Function.rename('f', 'welding equipment')
            self.pp.update_all(
                {'Temperature': lambda: T,
                 'Heat_source': lambda: f_Function},
                t, timestep)
            self.vtkfile_T << (T, float(t))
            self.vtkfile_f << (f_Function, float(t))

We took the opportunity to store the results in various ways, not only
using ``cbcpost`` tools. The basic functionality in FEniCS for storing
time series of ``Function`` objects in files is called ``TimeSeries``
(the storage format is HDF5). Other solvers can easily read a field
at a specified point of time from a ``TimeSeries`` object. We therefore
make such an object in the class and dump the solution to this file
each time the callback function is called. We also store the solution
and the heat source in VTK files, although this is really
not necessary since ParaView or VisIt can read XDMF files that ``cbcpost``
produces.

Note that the use of ``cbcpost`` is usually very dependent on the
problem at hand, so it does not make sense to include ``cbcpost`` code
in a general PDE solver, only in problem-specific code such as the
user action function.

Getting an animation on the screen with the built-in plotting tool is
a matter of running the welding example:

[**hpl 10**: The welding source velocity is much larger than the diffusion velocity. Are the :math:`\gamma` values compatible with this?]

.. code-block:: python

    >>> from heat_func import welding as a
    >>> a(gamma=10, delta=700)

(We introduced the synonym ``a`` to save some typing.)
Or you can run this as a command in the terminal:

.. code-block:: text

    Terminal> python -c '\ 
    from heat_func import application_welding as a;
    a(gamma=10, delta=700)'

Since we have fixed the color scale of the temperature to have values
in :math:`[0,1.1]`, we must adjust :math:`\delta` appropriately to :math:`\gamma`. To this end,
it is important that we monitor the maximum :math:`u` value printed in the
terminal window. We find that for :math:`\gamma=30`, a value :math:`\delta=15`
gives :math:`u` close to unity. Actually, we must have :math:`\gamma=2000` for :math:`\delta=1`
to give maximum values of :math:`u` close to unity. The values of :math:`\delta` indicates
that the scaling is "right" for large :math:`\gamma` values - for small :math:`\gamma`
we need a very large :math:`\delta`, pointing to the fact that the characteristic
temperature in the scaling is not correct (one would then use a time scale
based on heat conductivity and not the movement of the welding equipment).

In ParaView, load ``Results/Temperature/Temperature.xdmf`` as file,
click **Apply**, then the play button for animation. If the animation is
not correct, repeat the procedure. Thereafter, split the layout in
two, choose **3D View**, load ``Results/Heat source/Heat_source.xmdf``,
click **Apply**, and run the animation. The two plots are synchronized
in time. The plots and movies below were made in Paraview.

.. _ch:diffusion:welding:fig1:

.. figure:: welding3D.png
   :width: 800

   *Heat source (upper left) and temperature distributions for :math:`\gamma=0.1` (upper right), :math:`\gamma=1` (lower left), and :math:`\gamma=30` (lower right), after two rotations*

.. _ch:diffusion:welding:fig2:

.. figure:: welding_gamma2000_temp.png
   :width: 500

   *The temperature field for :math:`\gamma=2000` after two rotations*

.. raw:: html
        
        <div>
        <video  loop controls width='640' height='365' preload='none'>
            <source src='mov/welding/welding_gamma1_2D.ogg'  type='video/ogg;  codecs="theora, vorbis"'>
        </video>
        </div>
        <p><em>:math:`\gamma=1`, 2D view.</em></p>
        
        <!-- Issue warning if in a Safari browser -->
        <script language="javascript">
        if (!!(window.safari)) {
          document.write("<div style=\"width: 95%%; padding: 10px; border: 1px solid #100; border-radius: 4px;\"><p><font color=\"red\">The above movie will not play in Safari - use Chrome, Firefox, or Opera.</font></p></div>")}
        </script>
        

.. raw:: html
        
        <div>
        <video  loop controls width='640' height='365' preload='none'>
            <source src='mov/welding/welding_gamma01_3D.ogg'  type='video/ogg;  codecs="theora, vorbis"'>
        </video>
        </div>
        <p><em>:math:`\gamma=0.1`.</em></p>
        
        <!-- Issue warning if in a Safari browser -->
        <script language="javascript">
        if (!!(window.safari)) {
          document.write("<div style=\"width: 95%%; padding: 10px; border: 1px solid #100; border-radius: 4px;\"><p><font color=\"red\">The above movie will not play in Safari - use Chrome, Firefox, or Opera.</font></p></div>")}
        </script>
        

.. raw:: html
        
        <div>
        <video  loop controls width='640' height='365' preload='none'>
            <source src='mov/welding/welding_gamma1_3D.ogg'  type='video/ogg;  codecs="theora, vorbis"'>
        </video>
        </div>
        <p><em>:math:`\gamma=1`.</em></p>
        
        <!-- Issue warning if in a Safari browser -->
        <script language="javascript">
        if (!!(window.safari)) {
          document.write("<div style=\"width: 95%%; padding: 10px; border: 1px solid #100; border-radius: 4px;\"><p><font color=\"red\">The above movie will not play in Safari - use Chrome, Firefox, or Opera.</font></p></div>")}
        </script>
        

.. raw:: html
        
        <div>
        <video  loop controls width='640' height='365' preload='none'>
            <source src='mov/welding/welding_gamma30_3D.ogg'  type='video/ogg;  codecs="theora, vorbis"'>
        </video>
        </div>
        <p><em>:math:`\gamma=30`.</em></p>
        
        <!-- Issue warning if in a Safari browser -->
        <script language="javascript">
        if (!!(window.safari)) {
          document.write("<div style=\"width: 95%%; padding: 10px; border: 1px solid #100; border-radius: 4px;\"><p><font color=\"red\">The above movie will not play in Safari - use Chrome, Firefox, or Opera.</font></p></div>")}
        </script>
        

.. raw:: html
        
        <div>
        <video  loop controls width='640' height='365' preload='none'>
            <source src='mov/welding/welding_gamma2000_3D.ogg'  type='video/ogg;  codecs="theora, vorbis"'>
        </video>
        </div>
        <p><em>:math:`\gamma=2000`.</em></p>
        
        <!-- Issue warning if in a Safari browser -->
        <script language="javascript">
        if (!!(window.safari)) {
          document.write("<div style=\"width: 95%%; padding: 10px; border: 1px solid #100; border-radius: 4px;\"><p><font color=\"red\">The above movie will not play in Safari - use Chrome, Firefox, or Opera.</font></p></div>")}
        </script>
        

.. ========= Implementing PDE solvers as classes =========

