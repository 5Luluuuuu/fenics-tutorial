.. !split

.. _ch:diffusion:

Developing a more advanced heat equation solver
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

.. theta-rule is new?!

This chapter is devoted to some important topics when solving
time-dependent problems with FEniCS: avoiding unnecessary assembly,
dealing with time-dependent ``Expression`` objects, debugging the coding of
variational forms, saving results to file, and making animations.  We
illustrate these techniques in a welding problem and go through all
aspects of the code development, from scaling of the physical problem
via debugging to constructing unit tests.

The PDE to be addressed is the heat equation

.. math::
         \varrho c \frac{\partial u}{\partial t} = \nabla\cdot(p\nabla u) + f,

with initial condition :math:`u=I` and various types of Dirichlet, Neumann,
and Robin conditions. The primary unknown is supposed to represent the
temperature, and the PDE governs heat transport in a solid
heterogeneous material.  The physical parameters, which may vary in
space, are the density of the medium, :math:`\varrho`, the heat capacity,
:math:`c`, and the heat conduction coefficient, :math:`p`, while :math:`f` is a heat
source.

A very simple FEniCS program for a diffusion equation was introduced
in in the
Section `The time-dependent diffusion equation <http://hplgit.github.io/fenics-tutorial/doc/pub/sphinx/._ftut1004.html#the-time-dependent-diffusion-equation>`__
in [Ref1]_. You should be familiar with that code prior to
reading the present chapter as the code to be presented has many more
advanced features.

.. _ch:diffusion:opt:

A flexible and efficient solver
===============================

.. _ch:diffusion:opt:num:

Numerical method
----------------

Let us use a :math:`\theta` rule for discretizing the problem in time. Given

.. math::
         \frac{\partial u}{\partial t} = \mathcal{G}(u) + f,

where :math:`\mathcal{G}` is some differential operator and :math:`f` some source
term, the :math:`\theta` rule reads

.. _Eq:ch:diffusion:opt:num:thetar1:

.. math::

    \tag{1}
    \frac{u^{n+1} - u^n}{{\Delta t}} = \theta\mathcal{G}(u^{n+1})
        + (1-\theta)\mathcal{G}(u^n) + \theta f^{n+1} + (1-\theta)f^n,
        
        

or

.. _Eq:ch:diffusion:opt:num:thetar2:

.. math::

    \tag{2}
    \frac{u^{n+1} - u^n}{{\Delta t}} = \mathcal{G}(\theta u^{n+1} +
        (1-\theta)u^n) + f(\theta t_{n+1} + (1-\theta)t_n){\thinspace .}
        
        

Note that :math:`\theta=0` gives a classical Forward Euler scheme,
:math:`\theta=1` gives a Backward Euler scheme, and :math:`\theta=\frac{1}{2}` gives a
Crank-Nicolson (or midpoint/centered) scheme. The latter is
theoretically the most accurate, but suffers from non-physical
oscillations of high-frequency components of the solution, so many
applications may demand the more stable Backward Euler scheme (or a
more accurate backward difference formula utilizing a third time
level).

The corresponding variational formulation for :math:`u^{n+1}` is derived by
multiplying the time-discrete PDE (:ref:`ch:diffusion:opt:PDEtheta`) by
a test function :math:`v\in\hat V` and integrating over the spatial domain
:math:`\Omega`. Terms with second-order derivatives are integrated by parts,
meaning that :math:`\int_\Omega\mathcal{G}(u)v{\, \mathrm{d}x} = -\int_\Omega
\mathcal{D}(u,v){\, \mathrm{d}x} + \int_\Gamma \mathcal{B}(u,v){\, \mathrm{d}s}`. Using
:ref:`(2) <Eq:ch:diffusion:opt:num:thetar2>`, and introducing :math:`U=\theta u^{n+1}
+ (1-\theta)u^n)`, the variational formulation then becomes

.. _Eq:ch:diffusion:opt:num:varform:

.. math::

    \tag{3}
    F = \int_\Omega \varrho c\frac{u^{n+1} - u^n}{{\Delta t}}v{\, \mathrm{d}x} +
        \int_\Omega \mathcal{D}(U,v) {\, \mathrm{d}x} -
        \int_\Omega f(\theta t_{n+1}+(1-\theta)t_n) v{\, \mathrm{d}x}
        + \int_\Gamma \mathcal{B}(U,v){\, \mathrm{d}s}
        
        

Note that we have inserted a factor :math:`\varrho c` in the time-derivative term
since our PDE has this factor. We introduce a general initial condition

.. math::
         u(\boldsymbol{x}, 0) = u_0(\boldsymbol{x})\hbox{ in }\Omega{\thinspace .}

As boundary conditions, we assume either Dirichlet conditions on the
entire boundary or a Robin condition

.. math::
         -p\frac{\partial u}{\partial n} = r(u-s),

where :math:`r` is a heat transfer coefficient and :math:`s` is the surrounding
temperature. Note that insulated boundaries are obtained by :math:`r=0`.
We also have

.. math::
        
        \mathcal{D}(u,v) &= \nabla\cdot(p\nabla u^{n}),\\ 
        \mathcal{B}(u,v) &= r(u-s)v{\thinspace .}
        

Normally, in finite element programs, we would need to break up the
variational formulation :ref:`(3) <Eq:ch:diffusion:opt:num:varform>` into
a bilinear and a linear part, but in FEniCS we can just use
``lhs(F)`` and ``rhs(F)`` for such calculations, which is very convenient from
a user's point of view. The final version of the variational
formulation to be coded reads

.. _Eq:ch:diffusion:opt:num:varform2:

.. math::

    \tag{4}
    F = \int_\Omega (\varrho c\frac{u^{n+1} - u^n}{{\Delta t}}v +
         p\nabla U\cdot\nabla v  -
         f(\theta t_{n+1}+(1-\theta)t_n) v){\, \mathrm{d}x}
        + \int_\Gamma r(U-s)v{\, \mathrm{d}s}
        
        

.. _ch:diffusion:opt:bassembly:

Avoiding assembly of the coefficient matrix
-------------------------------------------

[**hpl 1**: I thought this example can just be an exercise now that the Navier-Stokes example covers the topic of ``assemble``. However, the Navier-Stokes example is relatively complicated, and many students do not have the background to really understand it, so we cannot it rely on all details from all gallery examples to be digested. Therefore, I explain in more detail the pre-assemble idea here.]

Our time-dependent heat equation gives rise to a linear system
with coefficient matrix :math:`A` and right-hand side :math:`b` at every time
level. When :math:`\varrho`, :math:`c`, :math:`p`, and :math:`r` do not depend on time,
and :math:`{\Delta t}` is constant,
:math:`A` is constant, and it suffices to assemble the matrix once -
before the time loop. To be able to do this, we need to
explicitly create matrices and vectors from variational
formulations.

.. as demonstrated in the section :ref:`ch:poisson0:linalg`.

.. in N-S as well

.. _ch:diffusion:opt:alg:

Algorithm
---------

Let us express the solution procedure in algorithmic form, writing :math:`u`
for the unknown spatial function at the new time level (:math:`u^n`) and
:math:`u_1` for the spatial solution at one earlier time level (:math:`u^{n-1}`):

 * mark boundary segments for prescribing boundary conditions

 * let initial condition :math:`u^n` interpolate :math:`I` or be the projection of :math:`I`

 * define :math:`F`

 * ask FEniCS to recognize :math:`a(u,v)` and :math:`L(v)`

 * assemble matrix :math:`A` from :math:`a(u,v)` if :math:`A` is time independent

 * assign some stopping time :math:`T`

 * :math:`t={{\Delta t}}`

 * while :math:`t\leq T`

   * update time-dependent objects with new time

   * assemble matrix :math:`A` from :math:`a(u,v)` if :math:`A` is time dependent

   * assemble vector :math:`b` from :math:`L`

   * apply essential boundary conditions

   * solve linear system

   * :math:`t\leftarrow t + {{\Delta t}}`

   * :math:`u^n \leftarrow u` (be ready for next step)

The code features a lot of changes from the ``ft03_heat.py``
program. We shall go through each part of the above algorithm.

.. _ch:diffusion:opt:solver:

The solver function
-------------------

Instead of a flat program, we wrap the solver in a function:

.. code-block:: python

    def solver(
        rho, c, p, f, r, s, u0, T, L,       # physical parameters
        dt, divisions, degree=1, theta=1,   # numerical parameters
        user_action=None,                   # callback function
        u0_project=False,                   # project/interpolate u0
        BC='Dirichlet',                     # interpretation of r
        A_is_const=False,                   # is A time independent?
        debug=False):

We assume that the domain is an interval, rectangle, or box, with
dimensions given by the list ``L`` and where ``divisions`` specifies
the number of cells in each spatial direction.

Boundary condition conventions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A convention is introduced for the boundary conditions:
if ``BC == 'Dirichlet'``, the variable ``r`` is a list with Dirichlet
values (``Constant`` or ``Expression`` objects) for each side of the
domain. Side 0 means :math:`x=0`, 1 is :math:`x=1`, 2 is :math:`y=0`, 3 is :math:`y=1`,
4 is :math:`z=0`, and 5 is :math:`z=1`. If ``BC == 'Robin'``, ``r[i]`` holds
the heat transfer coefficient for boundary side ``i``.
(The variable ``s``, related to the Robin condition, has no meaning
if ``BC == 'Dirichlet'``).

.. index:: assert

Checking input data
~~~~~~~~~~~~~~~~~~~

It is wise to start the function with checking the values of some
of the input parameters. Python's ``assert`` function is ideal for
quick writing of tests, at the cost of cryptic error messages for
less experienced programmers.

.. code-block:: python

    assert len(divisions) == len(L)
    d = len(L)  # no of space dimensions
    assert len(r) == 2*d
    for obj in p, f, s:
        assert isinstance(obj, (Expression, Constant))
    if user_action is not None: assert callable(user_action)

Creating the mesh
~~~~~~~~~~~~~~~~~

This solver is supposed to work on any domain, but for now we
restrict the geometry to a hypercube (an alternative is to send
a ready-made mesh as argument to ``solver`` - then we could handle
arbitrary domains).

.. code-block:: python

    if d == 1:
        mesh = IntervalMesh(divisions[0], 0, L[0])
    elif d == 2:
        mesh = RectangleMesh(Point(0,0), Point(*L), *divisions)
    elif d == 3:
        mesh = BoxMesh(Point(0,0), Point(*L), *divisions)
    V = FunctionSpace(mesh, 'P', degree)

Note that ``*L`` for a list or tuple variable ``L`` in a function call
is the same as sending
``L[0], L[1], ..., L[len(L)-1]``.

.. _ch:diffusion:opt:markboundary:

Marking the boundary
--------------------

We need to mark each side of our hypercube domain since we can have
Robin or Dirichlet conditions that differ on different sides.
We could write something straightforward as

.. code-block:: python

    def mark_boundaries_in_rectangle(mesh, x0=0, x1=1, y0=0, y1=1):
        """
        Return mesh function FacetFunction with each side in a rectangle
        marked by boundary indicator 0, 1, 2, 3.
        Side 0 is x=x0, 1 is x=x1, 2 is y=y0, and 3 is y=y1.
        """
        tol = 1E-14
    
        class BoundaryX0(SubDomain):
            def inside(self, x, on_boundary):
                return on_boundary and near(x[0], x0, tol)
    
        class BoundaryX1(SubDomain):
            def inside(self, x, on_boundary):
                return on_boundary and near(x[0], x1, tol)
    
        class BoundaryY0(SubDomain):
            def inside(self, x, on_boundary):
                return on_boundary and near(x[1], y0, tol)
    
        class BoundaryY1(SubDomain):
            def inside(self, x, on_boundary):
                return on_boundary and near(x[1], y1, tol)
    
        # Mark boundaries
        boundary_parts = FacetFunction('uint', mesh)
        boundary_parts.set_all(9999)
        bx0 = BoundaryX0()
        bx1 = BoundaryX1()
        by0 = BoundaryY0()
        by1 = BoundaryY1()
        bx0.mark(boundary_parts, 0)
        bx1.mark(boundary_parts, 1)
        by0.mark(boundary_parts, 2)
        by1.mark(boundary_parts, 3)
        return boundary_parts

Unfortunately, this is quite tedious and repetitive code, and the
code has to be repeated for a 1D interval
and a 3D box-shaped domain. It is possible to
write more general, compact code valid both for an interval, rectangle, or
box:

.. code-block:: python

    def mark_boundaries_in_hypercube(
        mesh, d=2, x0=0, x1=1, y0=0, y1=1, z0=0, z1=1):
        """
        Return mesh function FacetFunction with each side in a hypercube
        in d dimensions. Sides are marked by indicators 0, 1, 2, ..., 6.
        Side 0 is x=x0, 1 is x=x1, 2 is y=y0, 3 is y=y1, and so on.
        """
        side_definitions = [
            'near(x[0], %(x0)s, tol)', 'near(x[0], %(x1)s, tol)',
            'near(x[1], %(y0)s, tol)', 'near(x[1], %(y1)s, tol)',
            'near(x[2], %(z0)s, tol)', 'near(x[2], %(z1)s, tol)']
        boundaries = [CompiledSubDomain(
            ('on_boundary && ' + side_definition) % vars(), tol=1E-14)
                      for side_definition in side_definitions[:2*d]]
        # Mark boundaries
        boundary_parts = FacetFunction('uint', mesh)
        boundary_parts.set_all(9999)
        for i in range(len(boundaries)):
            boundaries[i].mark(boundary_parts, i)
        return boundary_parts

The use of this function in the solver function goes as follows:

.. code-block:: python

    boundary_parts = mark_boundaries_in_hypercube(mesh, d)
    ds =  Measure('ds', domain=mesh, subdomain_data=boundary_parts)
    
    bcs = []
    if BC == 'Dirichlet':
        for i in range(2*d):
            bcs.append(DirichletBC(V, r[i], boundary_parts, i))

Note that we either have Dirichlet values at all boundaries or we
have Robin conditions.

Implementation of the variational formulation
---------------------------------------------

[**hpl 2**: Important messgage: the variational form can be implemented in many steps, utilizing Python functions if desired, and this is very convenient, especially for debugging later. Not sure how this message can be explicitly formulated...]

We start with implementing the initial condition:

.. code-block:: python

    u_n = project(u0, V) if u0_project else interpolate(u0, V)
    u_n.rename('u', 'initial condition')
    if user_action is not None:
        user_action(0, u_n, 0)

In the variational form, we make use of some convenient constructions
like ``U`` as the :math:`\theta` weighted averaged of :math:`u` in time and separate
Python functions for various terms in the formulation:

.. code-block:: python

    u = TrialFunction(V)
    v = TestFunction(V)
    
    def D(u):
        return p*dot(grad(u), grad(v))*dx
    
    def B(u, i):
        return r[i]*(u-s)*v*ds(i)
    
    # Must set the t attribute in f, s, and r[i] to
    # theta*t + (1-theta)*(t-dt) before evaluating the forms
    U = theta*u + (1-theta)*u_n
    F_M = rho*c*(u-u_n)/dt*v*dx
    F_K = D(U)
    F_f = -f*v*dx
    F = F_M + F_K + F_f
    if BC == 'Robin':
        F_R = sum(B(U, i) for i in range(2*d))
        F += F_R
    a, L = lhs(F), rhs(F)

We have with purpose split the expression for ``F`` into separate terms for
easier debugging later, as this allows us to assemble terms independently
and compare with hand calculations.

It remains to assemble the coefficient matrix:

.. code-block:: python

    if A_is_const:
        A = assemble(a)

At each time level we must do a similar ``b = assemble(L)``. However, with this
construction, a new vector for ``b`` is allocated in memory in every
pass of the time loop.  It would be much more memory friendly to reuse
the storage of the ``b`` we already have.  This is easily accomplished
by

.. code-block:: python

    b = assemble(L, tensor=b)

That is, we send in our previous ``b``, which is then filled with new values
and returned from ``assemble``. Now there will be only a single
memory allocation of the right-hand side vector. Before the time loop
we must set ``b = None`` such that ``b`` is defined as a variable
in the first call to ``assemble`` inside the time loop.

The time loop
-------------

The complete time loop goes as follows:

.. code-block:: python

    u = Function(V)   # the unknown at a new time level
    u.rename('u', 'solution')
    cpu_assemble = 0  # CPU time for assembling
    timestep = 1
    t = dt
    
    while t <= T:
        # Evaluate f, s, r[i] for right t value
        t_m = theta*t + (1-theta)*(t-dt)
        if hasattr(f, 't'): f.t = t_m
        if hasattr(s, 't'): s.t = t_m
        for i in range(len(r)):
            if BC == 'Robin':
                if hasattr(r[i], 't'): r[i].t = t_m
            elif BC == 'Dirichlet':
                if hasattr(r[i], 't'): r[i].t = t
            else:
                raise ValueError('BC=%s' % BC)
        t0 = time.clock()  # measure CPU time of assemble part
        if not A_is_const:
            A = assemble(a)
        b = assemble(L, tensor=b)
        cpu_assemble += time.clock() - t0
    
        [bc.apply(A, b) for bc in bcs]
        solve(A, u.vector(), b)
    
        if user_action is not None:
            user_action(t, u, timestep)
        t += dt
        timestep += 1
        u_n.assign(u)

The first part of the loop where we update ``Expression`` objects is
key to get right and one of the most error-prone tasks for FEniCS
programmers. The variational forms can work with time-dependent
``Expression`` objects and evaluate the time when we require an
``assemble`` operation. Hence, at each time level, every ``Expression``
object that enters the variational formulations that are subject to
``assemble`` calls must have its right time value. In addition,
``Expression`` objects related to Dirichlet values must contain the
same time value as that of the unknown to be computed.
In the present case, ``f``, ``s``, and ``r[i]`` enter the variational
formulation at the weighted time :math:`t_m = \theta t_{n+1} + (1-\theta)t_{n+1}`,
so this time value must be assigned to the ``t`` attribute in these
objects. However, it may happen that one or more of the objects
are ``Constant`` objects, or ``Expression`` objects without a time value,
so a straight assignment ``f.t = t_m`` may fail. Therefore, we
use ``hasattr`` to check that the object has a ``t`` attribute before
updating the value.

The update of ``r[i].t`` depends on whether ``r`` is used for Dirichlet or
Robin conditions. In the latter case, the :math:`r` quantity is to be
evaluated at the weighted time, ``r[i].t = t_m``, while for a Dirichlet
condition, ``r[i].t`` must reflect the same time level as the unknown we
compute for, i.e., :math:`t_{n+1}`, or ``t`` in the time loop.

The rest of the statements in the time loop should be quite familiar.
Note that ``[bc.apply(A, b) for bc in bcs]`` is a quick way of writing
a for loop in one line (using a list comprehension, but the resulting
list is never used for anything, just the calls ``bc.apply(A, b)`` are
important for incorporating the Dirichlet conditions at each boundary
segment).

The complete ``solver`` function is found in the file
`ft12_heat_func.py <https://github.com/hplgit/fenics-tutorial/blob/master/src/ft12_heat_func.py>`__.

Verification
------------

The first implementation of a solver the complexity above is
likely to suffer from programming errors or mathematical
misunderstandings.  We must therefore set up tests so that we know
that the implementation works. As usual, we favor manufactured
solutions that can be exactly reproduced by the numerical method. With
variable coefficients and a lot of input data to adjust, the choice of
manufactured solution must be flexible. We therefore feed some
symbolic expression for :math:`u(\boldsymbol{x},t)` into a function ``verify`` and let
this function compute the consistent source term and the coefficients
``r[i]`` in the Robin/Dirichlet conditions. Then ``solver`` is called with
a callback function that asserts the error to be within machine
precision for this problem, if the manufactured solution is without
approximation errors.

We use SymPy to do the mathematics and then we use the code generation
utility in SymPy to translate the symbolic expressions to C++
code needed in FEniCS ``Expression`` objects.

.. code-block:: python

    def verify(
        manufactured_u, d=2, degree=1, BC='Robin',
        N=16, theta=1, expect_exact_sol=True,
        lumped_mass=False, debug=False):
    
        import sympy as sym
        u = manufactured_u  # short form
        x, y, t = sym.symbols('x[0] x[1] t')
        if d == 1:  # 1D
            p = 1
            s = 1
            rho = c = 1
            # Fit f, r[i]
            f = rho*c*sym.diff(u, t) - sym.diff(p*sym.diff(u, x), x)
            f = sym.simplify(f)
            # Boundary conditions: r = -p*(du/dn)/(u-s)
            r = [None]*(2*d)
            r[0] = (+p*sym.diff(u, x)/(u-s)).subs(x, 0)
            r[1] = (-p*sym.diff(u, x)/(u-s)).subs(x, 1)
        elif d == 2:  # 2D
            #p = 2 + x + 2*y
            p = 1
            s = 2
            rho = c = 1
            f = rho*c*sym.diff(u, t) \ 
                - sym.diff(p*sym.diff(u, x), x) \ 
                - sym.diff(p*sym.diff(u, y), y)
            f = sym.simplify(f)           # fitted source term
            # Boundary conditions: r = -p*(du/dn)/(u-s)
            r = [None]*(2*d)
            r[0] = (+p*sym.diff(u, x)/(u-s)).subs(x, 0)
            r[1] = (-p*sym.diff(u, x)/(u-s)).subs(x, 1)
            r[2] = (+p*sym.diff(u, y)/(u-s)).subs(y, 0)
            r[3] = (-p*sym.diff(u, y)/(u-s)).subs(y, 1)
    
        for i in range(len(r)):
            r[i] = sym.simplify(r[i])
        print('f:', f, 'r:', r)
    
        # Convert symbolic expressions to Expression or Constant
        s = Constant(s)
        rho = Constant(rho)
        c = Constant(c)
        f = Expression(sym.printing.ccode(f), t=0)
        p = Expression(sym.printing.ccode(p))
        u_exact = Expression(sym.printing.ccode(u), t=0)
    
        if BC == 'Dirichlet':
            for i in range(len(r)):
                r[i] = u_exact
        elif BC == 'Robin':
            for i in range(len(r)):
                r[i] = Expression(sym.printing.ccode(r[i]), t=0)
    
        def print_error(t, u, timestep):
            """user_action function: print max error at dofs."""
            u_exact.t = t
            u_e = interpolate(u_exact, u.function_space())
            error = np.abs(u_e.vector().array() -
                           u.vector().array()).max()
            print('t=%.4f, error: %-10.3E max u: %-10.3f' %
                  (t, error, u.vector().array().max()))
            if debug:
                print('u exact:', u_e.vector().array())
            if expect_exact_sol:
                assert error < 1E-13, error
    
        A_is_const = BC == 'Dirichlet'
        # Match dt to N to keep dt/(2*d*dx**q) const,
        # q=1 for theta=0.5 else q=2
        dx = 1./N
        q = 1 if theta == 0.5 else 2
        dt = (0.05/(2*d*0.5**q))*2*d*dx**q
        T = 5*dt  # always 5 steps
        if d == 1:
            divisions = (N,)
            L = (1,)
        elif d == 2:
            divisions = (N, N)
            L = (1, 1)
        solver(rho, c, p, f, r, s, u_exact, T, L,
               dt, divisions, degree=degree, theta=theta,
               user_action=print_error,
               u0_project=False, BC=BC, A_is_const=A_is_const,
               lumped_mass=lumped_mass, debug=debug)

Debugging of FEniCS programs
----------------------------

[**hpl 3**: This section is unfinished.]

When the first author implemented the present ``solver`` function, the
solution looked nice in visualizations, but the verification tests
where the solutions should be reproduced to machine precision, were
not fulfilled, but the numerical solutions converged. These
observations pointed to bugs in the code, but the author could not
spot them from pure reading. How can such a FEniCS code systematically
debugged?  The safest way involves the following steps:

 * Reduce the problem to one spatial dimension.

 * Work with P1 elements.

 * Work with the smallest sensible mesh, e.g., two cells.

 * Compute by hand the contribution to the coefficient matrix and
   right-hand side from each term in the PDEs.

 * Assemble each term in the PDEs individually in FEniCS (easy!)
   for comparison with hand calculations. Be aware of the ``vertex_to_dof``
   mapping in FEniCS.

 * Write out all the Dirichlet conditions and check that they are correct.

 * Finally assert that the linear system computed by hand and by FEniCS
   are identical.

This procedure requires, of course, that one masters the basic algorithms
in the finite element method and can perform these by hand or by a
separate program. The details in the present PDE application are documented
next.

We start with reducing the problem to 1D. There are four types of terms
in our PDE: the mass matrix term :math:`\int\frac{1}{{\Delta t}}u^{n+1}v`,
the stiffness matrix term :math:`\int p\nabla u\cdot\nabla v`, the source term
:math:`\int fv`, and the Robin condition term :math:`\int_\Gamma r(u-s)v`.

.. math::
        
        \frac{h}{6{\Delta t}}
        \left(\begin{array}{rr}
        2 & 1\\ 
        1 & 2
        \end{array}\right)
        

.. math::
        
        \frac{h}{6{\Delta t}}
        \left(\begin{array}{rrr}
        2 & 1 & 0\\ 
        1 & 4 & 1\\ 
        0 & 1 & 2
        \end{array}\right)
        

.. math::
        
        \frac{1}{h}
        \left(\begin{array}{rr}
        1 & -1\\ 
        -1 & 1
        \end{array}\right)
        

.. math::
        
        \frac{1}{h}
        \left(\begin{array}{rrr}
        1 & -1 & 0\\ 
        -1 & 2 & -1\\ 
        0 & -1 & 1
        \end{array}\right)
        

The Robin condition in 1D reduces to :math:`\int_\Gamma r(u-s)v{\, \mathrm{d}s}`, which
gives a contribution :math:`[ruv]^1_0` to the coefficient matrix
and a contribution :math:`[rsv]^1_0` to the right-hand side vector.
We have :math:`[ruv]^1_0=r(1)u(1)v(1)-r(0)u(0)v(0)`. The first term gives
a contribution to the dof that corresponds to :math:`x=1` only, since
:math:`\hat\phi_i(1)\phi_j(1)\neq 0` iff :math:`i` and :math:`j` is the dof at :math:`x=1`.
We typically get the global matrix

.. math::
        
        r(1,t)
        \left(\begin{array}{rrr}
         1 & 0 & 0\\ 
         0 & 0 & 0\\ 
         0 & 0 & 0
        \end{array}\right)
        

if doc 0 corresponds to :math:`x=1` (as in this FEniCS numbering).
The term :math:`r(0)u(0)v(0)` gives a similar contribution

.. math::
        
        r(0,t)
        \left(\begin{array}{rrr}
         0 & 0 & 0\\ 
         0 & 0 & 0\\ 
         0 & 0 & 1
        \end{array}\right)
        

to the global matrix.
The corresponding contributions to the right-hand side vector are

.. math::
        
        r(1,t)s
        \left(\begin{array}{r}
         1\\ 
         0\\ 
         0
        \end{array}\right),\qquad
        r(0,t)s
        \left(\begin{array}{r}
         0\\ 
         0\\ 
         1
        \end{array}\right)
        

.. _ch:diffusion:opt:noassembly:

Avoiding all assembly
---------------------

.. index::
   single: assembly, increasing efficiency

The purpose of this section is to present a technique for speeding up
FEniCS simulators for time-dependent problems where it is possible to
perform all assembly operations prior to the time loop.  There are two
costly operations in the time loop: assembly of the right-hand side
:math:`b` and solution of the linear system via the ``solve`` call. The
assembly process involves work proportional to the number of degrees
of freedom :math:`N`, while the solve operation has a work estimate of
:math:`\mathcal{O}( N^{\alpha})`, for some :math:`\alpha\geq 1`.  Typically,
:math:`\alpha\in [1,2]`.  As :math:`N\rightarrow\infty`, the solve operation will
dominate for :math:`\alpha>1`, but for the values of :math:`N` typically used on
smaller computers, the assembly step may still represent a
considerable part of the total work at each time level. Avoiding
repeated assembly can therefore contribute to a significant speed-up
of a finite element code in time-dependent problems.

Deriving recursive linear systems
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To see how repeated assembly can be avoided, we look at the
"right-hand side part" of the variational form (i.e., the linear form
:math:`L(v)`) when, for simplicity, :math:`\theta=1`:

.. math::
        \int_\Omega \left(\frac{1}{{\Delta t}}u^{n} + f^{n+1}\right)v {\, \mathrm{d}x}{\thinspace .} 

This expression varies in general with time through :math:`u^{n}`, :math:`f^{n+1}`, and
possibly also with :math:`{\Delta t}` if the time step is adjusted during the
simulation.  The technique for avoiding repeated assembly consists in
expanding the finite element functions in sums over the basis
functions :math:`\phi_i` to identify matrix-vector products that build up
the complete system. We have :math:`u^{n}=\sum_{j=1}^NU^{n}_j\phi_j`,
and we can expand :math:`f^n` as
:math:`f^{n}=\sum_{j=1}^NF^{n}_j\phi_j`. Inserting these expressions in
:math:`L(v)` and using :math:`v=\hat\phi_i` result in

[**hpl 4**: Why :math:`hat\phi_i`? No need for Petrov-Galerkin here... Cannot remember why the hat. Remove it.]

.. math::
        
        \int_\Omega \left(\frac{1}{{\Delta t}}u^{n} + f^{n+1}\right)v {\, \mathrm{d}x} &=
        \int_\Omega \left(\frac{1}{{\Delta t}}\sum_{j=1}^N U^{n}_j\phi_j + \sum_{j=1}^N F^{n+1}_j\phi_j\right)\hat\phi_i {\, \mathrm{d}x},\\ 
        &=\sum_{j=1}^N\frac{1}{{\Delta t}}\left(\int_\Omega \hat\phi_i\phi_j {\, \mathrm{d}x}\right)U^{n}_j
         + \sum_{j=1}^N\left(\int_\Omega \hat\phi_i\phi_j {\, \mathrm{d}x}\right)F^{n+1}_j{\thinspace .}
        

Introducing :math:`M_{ij} = \int_\Omega \hat\phi_i\phi_j {\, \mathrm{d}x}`, we see that
the last expression can be written

.. math::
        
        \sum_{j=1}^N \frac{1}{{\Delta t}}M_{ij}U^{n}_j + \sum_{j=1}^NM_{ij}F^{n+1}_j,
        

which is nothing but two matrix-vector products,

.. math::
        
        \frac{1}{{\Delta t}}MU^{n} + MF^{n+1},
        

if :math:`M` is the matrix with entries :math:`M_{ij}`,

.. math::
        
        U^{n}=(U^{n}_1,\ldots,U^{n}_N)^T,
        

and

.. math::
        
        F^{n+1}=(F^{n+1}_1,\ldots,F^{n+1}_N)^T{\thinspace .}
        

We have immediate access to :math:`U^{n}` in the program since that is the
vector in the ``u_n`` function. The :math:`F^{n+1}` vector can easily be computed
by interpolating the prescribed :math:`f` function (at each time level if
:math:`f` varies with time). Given :math:`M`, :math:`U^{n}`, and :math:`F^{n+1}`, the right-hand
side :math:`b` can be calculated as

.. math::
        
        b = \frac{1}{{\Delta t}}MU^{n} + MF^n {\thinspace .}
        

That is, no assembly is necessary to compute :math:`b`!

Generalization to the full model
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

It now remains to extend the results to the full :math:`\theta` rule and
to the boundary terms arising from the Robin conditions. Looking
at :ref:`(4) <Eq:ch:diffusion:opt:num:varform2>`, inserting

.. math::
         U = \theta\sum_j\phi_jU_j + (1-\theta)\sum_j\phi_jU_j^{n},

and utilizing that :math:`p\nabla U\cdot\nabla v` and :math:`r(U-s)v` are linear in :math:`U`,
we get a right-hand side contribution

.. _Eq:_auto1:

.. math::

    \tag{5}
    b = \frac{1}{{\Delta t}}MU^{n} + \theta MF^n - (1-\theta)KU^n - (1-theta)RU^n
        - g,
        
        

where :math:`R` is the matrix arising from the Robin condition:

.. math::
         R_{i,j} = \int_\Gamma r\phi_i\phi_j{\, \mathrm{d}s},

and :math:`g` is the associated vector,

.. math::
         g_i = \int_\Gamma rs\phi_i{\, \mathrm{d}s}{\thinspace .}

Splitting the coefficient matrix
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If we decide to use a varying time step :math:`{\Delta t}`, the :math:`A` matrix
will vary with time, but it has a special structure so that it can
easily and cheaply be computed at each time level.
To see this, we
insert :math:`v=\hat\phi_i` and :math:`u^n = \sum_{j=1}^N U^n_j\phi_j` in the
bilinear expression for the simplified case :math:`\theta=1` and no Robin
conditions to get

.. math::
        
        \sum_{j=1}^N \left(\int_\Omega \frac{1}{{\Delta t}}
        \hat\phi_i\phi_j {\, \mathrm{d}x}\right)U^n_j +
        \sum_{j=1}^N \left(\int_\Omega \nabla\hat\phi_i\cdot\nabla\phi_j {\, \mathrm{d}x}\right)U^n_j,
        

which can be written as a sum of matrix-vector products,

.. math::
        
        \frac{1}{{\Delta t}}MU^n + KU^n = (\frac{1}{{\Delta t}}M + {{\Delta t}} K)U^n,
        

if we identify the matrix :math:`M` with entries :math:`M_{ij}` as above and
the matrix :math:`K` with entries

.. _Eq:_auto2:

.. math::

    \tag{6}
    K_{ij} = \int_\Omega \nabla\hat\phi_i\cdot\nabla\phi_j {\, \mathrm{d}x}{\thinspace .}
        
        

The matrix :math:`M` is often called the "mass matrix" while "stiffness
matrix" is a common nickname for :math:`K`. The associated bilinear forms
for these matrices, as we need them for the assembly process in a
FEniCS program, become

====================================================================  ====================================  
                            Mathematics                                           FEniCS Code               
====================================================================  ====================================  
:math:`a_K(u,v) = \int_\Omega\nabla u\cdot\nabla v {\, \mathrm{d}x}`  ``a_K = dot(nabla(u), nabla(v))*dx``  
:math:`a_M(u,v) = \int_\Omega uv {\, \mathrm{d}x}`                    ``a_M = u*v*dx``                      
====================================================================  ====================================  

The linear system at each time level, written as :math:`AU^n=b`,
can now be computed by first computing :math:`M` and :math:`K`, and then forming
:math:`A=M+{{\Delta t}} K` at :math:`t=0`, while :math:`b` is computed as
:math:`b=\frac{1}{{\Delta t}}MU^{n-1} + MF^n` at each time level.

Generalization to full model
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The coefficient matrix associated with the complete variational form
:ref:`(4) <Eq:ch:diffusion:opt:num:varform2>`

[**hpl 5**: Not finished.]

FEniCS implementation          (1)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following modifications are needed

.. in the ``ft12_heat_func.py`` program from the previous section

in order to implement the new
strategy of avoiding assembly at each time level:

 1. Define separate forms :math:`a_M` and :math:`a_K`

 2. Assemble :math:`a_M` to :math:`M` and :math:`a_K` to :math:`K`

 3. Compute :math:`A=\frac{1}{{\Delta t}}M+K`

 4. Define :math:`f` as an ``Expression``

 5. Interpolate the formula for :math:`f` to a finite element function :math:`F^n`

 6. Compute :math:`b=\frac{1}{{\Delta t}}MU^{n-1} + MF^n`

The relevant code segments become

.. code-block:: python

    # 1.
    a_K = dot(grad(u), grad(v))*dx
    a_M = u*v*dx
    # No need for L
    
    # 2. and 3.
    M = assemble(a_M)
    K = assemble(a_K)
    A = M + dt*K
    
    # 4.
    f = Expression('beta - 2 - 2*alpha', beta=beta, alpha=alpha)
    
    # 5. and 6.
    while t <= T:
        f_n = interpolate(f, V)
        F_n = f_n.vector()
        b = M*u_1.vector() + dt*M*F_n

We implement these modifications in a refactored version of the
program ``ft11_heat2.py``, where the solver is a function
as explained in the
section "Refactored implementation": "" in [Ref1]_ rather than a
flat program. The domain can also more flexibly be a 1D, 2D, or 3D
interval, rectangle, or box.
The new ``solver_minimize_assembly`` function resides in
`ft12_heat_func.py <ft12_heat_func.py>`__.

.. code-block:: python

    def solver_minimize_assembly(
        alpha, f, u0, I, dt, T, divisions, L, degree=1,
        user_action=None, I_project=False):
        """
        Solve diffusion PDE u_t = div(alpha*grad(u)) + f on
        an interval, rectangle, or box with side lengths in L.
        divisions reflect cell partitioning, degree the element
        degree. user_action(t, u, timetesp) is a callback function
        where the calling code can process the solution.
        If I_project is false, use interpolation for the initial
        condition.
        """
        # Create mesh and define function space
        d = len(L)  # No of space dimensions
        if d == 1:
            mesh = IntervalMesh(divisions[0], 0, L[0])
        elif d == 2:
            mesh = RectangleMesh(Point(0,0), Point(*L), *divisions)
        elif d == 3:
            mesh = BoxMesh(Point(0,0), Point(*L), *divisions)
        V = FunctionSpace(mesh, 'P', degree)
    
        class Boundary(SubDomain):  # define the Dirichlet boundary
            def inside(self, x, on_boundary):
                return on_boundary
    
        boundary = Boundary()
        bc = DirichletBC(V, u0, boundary)
    
        # Initial condition
        u_1 = project(I, V) if I_project else interpolate(I, V)
        if user_action is not None:
            user_action(0, u_1, 0)
    
        # Define variational problem
        u = TrialFunction(V)
        v = TestFunction(V)
        a_M = u*v*dx
        a_K = alpha*dot(grad(u), grad(v))*dx
    
        M = assemble(a_M)
        K = assemble(a_K)
        A = M + dt*K
        # Compute solution
        u = Function(V)   # the unknown at a new time level
    
        b_assemble = 0  # CPU time for assembling all the b vectors
        timestep = 1
        t = dt
        while t <= T:
            t0 = time.clock()
            f_n = interpolate(f, V)
            F_n = f_n.vector()
            b = M*u_1.vector() + dt*M*F_n
            b_assemble += time.clock() - t0
            try:
                u0.t = t
                f.t = t
            except AttributeError:
                pass  # ok if no t attribute in u0
            bc.apply(A, b)
            solve(A, u.vector(), b)
    
            if user_action is not None:
                user_action(t, u, timestep)
            t += dt
            timestep += 1
            u_1.assign(u)
        #info('total time for assembly of right-hand side: %.2f' % b_assemble)
    
    def application_animate(model_problem):
        import numpy as np, time
    
        if model_problem == 1:
            # Test problem with exact solution at the nodes also for P1 elements
            alpha = 3; beta = 1.2
            u0 = Expression('1 + x[0]*x[0] + alpha*x[1]*x[1] + beta*t',
                            alpha=alpha, beta=beta, t=0)
            f = Constant(beta - 2 - 2*alpha)
            I = u0
            dt = 0.05; T = 2
            Nx = Ny = 20
            u_range = [1, 1+1+alpha*1+beta*T]
        elif model_problem == 2:
            # Diffusion of a sin^8 spike
            I = Expression('pow(sin(pi*x[0])*sin(pi*x[1]), 8)')
            f = Constant(0)
            u0 = Constant(0)
            dt = 0.0005; T = 20*dt
            Nx = Ny = 60
            u_range = [0, 1]
    
        vtkfile = File('diffusion.pvd')
    
        def animate(t, u, timestep):
            global p
            if t == 0:
                p = plot(u, title='u',
                         range_min=float(u_range[0]),  # must be float
                         range_max=float(u_range[1]))  # must be float
            else:
                p.plot(u)
            print('t=%g' % t)
            time.sleep(0.5)
            vtkfile << (u, float(t))  # store time-dep Function
    
        solver_minimize_assembly(
            1.0, f, u0, I, dt, T, (Nx, Ny), (1, 1), degree=2,
            user_action=animate, I_project=False)

A special feature in this program is the ``user_action`` callback function:
at every time level, the solution is sent to ``user_action``, which is
some function provided by the user where the solution can be processed, e.g.,
stored, analyzed, or visualized. In a unit test for the test example without
numerical approximation errors, we can write a call to the solver function,

.. code-block:: python

    def test_solver():
        import numpy as np
        alpha = 3; beta = 1.2
        u_b = Expression('1 + x[0]*x[0] + alpha*x[1]*x[1] + beta*t',
                         alpha=alpha, beta=beta, t=0)
        f = Constant(beta - 2 - 2*alpha)
        dt = 0.3; T = 1.9
        u_b.t = 0
    
        # Define assert_error callback function
        ...
    
        solver_minimize_assembly(
            f, u_b, u_b, dt, T, Nx, Ny, degree,
            user_action=assert_error, I_project=False)

The ``user_action`` function ``assert_error`` asserts equality of the
exact and numerical solution at every time level:

.. code-block:: python

    def assert_error(t, u, timestep):
        u_e = interpolate(u_b, u.function_space())
        error= np.abs(u_e.vector().array() -
        	          u.vector().array()).max()
        tol = 2E-12
        assert error < tol, 'error: %g' % error

One can also use the user action callback function to visualize
the solution:

.. code-block:: python

    def assert_error(t, u, timestep):
        global p
        if t == 0:
            p = plot(u, title='u',
    	         # Fix the color scale
                     range_min=float(u_range[0]),  # must be float
                     range_max=float(u_range[1]))  # must be float
        else:
            p.plot(u)
        print('t=%g' % t)
        time.sleep(0.5)

It is key to fix the color scale to get a meaningful animation.

A complete function calling up ``solver_minimize_assembly`` for
animating the solution in two test problems is found in the
function ``application_animate`` in
`ft12_heat_func.py <ft12_heat_func.py>`__.

Note that ``p``, which must survive between subsequent calls to the
callback function, has to be declared as a global variable. This is
necessary when the user action function is a *closure* (function
inside function, "remembering" variables in the parent function) and
``p`` is changed inside the closure.  Some programmers find it more
convenient to let the user action be class instead, where ``p`` can be
an attribute. Later examples employ the class design.

The function ``solver_vs_solver_minimize_assembly`` measures the
impact of the optimization technique in this section compared to
the simpler technique from the previous section where we need
to assemble the right-hand side of the linear system at every time
level. The impact is not huge, just a speed-up factor of 1-2 for 2D problems
and around 2 for 3D problems. Still, this may be an important
improvement when you run a code a lot.

.. ===== Methods of lines and ODE solvers =====

.. _ch:diffusion:welding:

A welding example with post processing and animation
====================================================

The focus so far in this tutorial has been on producing the solution
of PDE problems. [**hpl 6**: This is book 2, it depends on how things end up in the previous chapter.] For scientific investigations, the primary work is
often with post processing results: computing quantities derived from
the solution and inspecting these with visualization or data analysis tools.
This is the focus of the present section.
To ease the programming, we shall make use of a convenient tool, ``cbcpost``,
for post processing, saving data to file(s), and animating solutions.
We recommend to use
``cbcpost`` in all time-dependent FEniCS solvers, but it also has a lot
to offer in stationary problems too.

To explain the usage of ``cbcpost`` for storage and plotting, we address
a real physical application: welding of a plate, where a moving heat
source gives rise to a moving temperature field.

.. _ch:diffusion:welding:cbcpost:

Post processing data and saving to file
---------------------------------------

Installation
~~~~~~~~~~~~

The ``cbcpost`` package is not a part of the ``fenics`` package so you
will need to install it.  The simplest installation method is to use
``pip``. We recommend to install a companion package ``fenicstools`` as
well. Just run

.. code-block:: text

    sudo pip install git+https://bitbucket.org/simula_cbc/cbcpost.git
    sudo pip install git+https://github.com/mikaem/fenicstools.git

in a terminal window (skip ``sudo`` on Windows machines).
Alternatively, you can grab the source code and run ``setup.py`` the usual
way Python packages are installed from source:

.. code-block:: text

    Terminal> git clone https://bitbucket.org/simula_cbc/cbcpost.git
    Terminal> cd cbcpost
    Terminal> python setup.py install
    Terminal> cd ..
    Terminal> git clone https://github.com/mikaem/fenicstools.git
    Terminal> cd fenicstools
    Terminal> python setup.py install

Basic commands
~~~~~~~~~~~~~~

We must create a *post processor* and then specify what kind of
results we want to be stored on file and (optionally) get visualized.
Suppose we have a field with logical name ``Temperature`` that we want
to save in XDMF/HDF5 format in files in a fresh subdirectory ``Results``:

.. code-block:: python

    import cbcpost as post
    # Create post processor
    pp = post.PostProcessor(dict(casedir='Results', clean_casedir=True))
    # Specify storage of a "Temperature" field
    pp.add_field(post.SolutionField(
        'Temperature',
        dict(save=True,
             save_as=['hdf5', 'xdmf'],
             plot=True,
             plot_args=dict(range_min=0.0, range_max=1.2))))

The ``plot=True`` automatically launches ``fenics.plot`` commands of
this scalar field during the simulation. The ranges of the color
scale must be given (as ``float`` variables) so that the color scale
stays fixed during the animation on the screen.

Inside the time loop, we have to feed a new solution to the post processor
to get it saved:

.. code-block:: python

    pp.update_all({'Temperature': lambda: T}, t, timestep)

Here, ``T`` is the ``Function`` object that we have solved for, ``t`` is
current time, and ``timestep`` is the corresponding time step number.

One can specify many fields to be saved (and plotted), but even more
important: ``cbcpost`` can calculate a lot of derived quantities from
the solution, such as

 * time derivatives and integrals of vector/scalar fields

 * extraction of fields over subdomains

 * slicing of fields in 3D geometries

 * averaging of fields in space or time

 * norms and point values of fields as function of time

 * user-defined post processing of fields

We refer to the online `cbcpost documentation <http://cbcpost.readthedocs.org/en/latest/index.html>`__ for further information on all the capabilities of this
package.


.. admonition:: Tip: Use ``cbcpost`` to visualize time-dependent data

   Instead of issuing your own ``plot`` commands in time-dependent
   problems, it is safer and more convenient to specify ``plot=True``
   and fix the range of the color scale, when you add fields
   to the post processor. Multiple fields will be synchronized during
   the animation.




.. _ch:diffusion:welding:problem:

Heat transfer due to a moving welding source
--------------------------------------------

Let us solve a diffusion problem taken from welding.  A moving
welding equipment acts as a moving heat source at the top of a thin
metal plate.  The question is how the heat from the equipment spreads
out in the material that is being welded. We use the standard heat
equation, treat the material as two dimensional, and do not take phase
transitions into account.  The governing PDE is then

.. math::
         \varrho c \frac{\partial u}{\partial t} = \kappa\nabla^2 u + f,

where :math:`u` is temperature, :math:`\varrho` is the density of the material,
:math:`c` is the heat capacity at constant volume, :math:`\kappa` is the heat
conduction coefficient, and :math:`f` models the heat source from the
welding equipment. The domain is :math:`\Omega = [0,L]\times [0,L]`.  An
additional major simplification is that we set :math:`u=U_s` at the
boundary, where :math:`U_s` is the temperature of the surroundings (a Robin
condition, modeling cooling at the boundary would be more accurate,
but then we should also consider cooling in the third dimension as
well).  The initial condition reads :math:`u=U_s`.

A welding source is moving and very localized in space.  The
localization can be modeled by a peak-shaped Gaussian function.  The
movement is taken to be a circle with radius :math:`R` about a point
:math:`(x_0,y_0)`. An appropriate :math:`f` is

.. math::
         f(x,y,t) = A\exp{\left(-\frac{1}{2\sigma^2}
        \left({x-(x_0 + R\cos\omega t)}\right)^2 -\frac{1}{2\sigma^2}
        \left({y-(y_0 + R\sin\omega t)}\right)^2\right)}{\thinspace .}

The parameter :math:`A` is the strength of the heat source, and :math:`\sigma` is
the "standard deviation" (i.e., a measure of the width) of the Gaussian
function.

.. _ch:diffusion:welding:scaling:

Scaling of the welding problem
------------------------------

There are 10 physical parameters in the problem: :math:`L`, :math:`\varrho`, :math:`c`,
:math:`\kappa`, :math:`A`, :math:`x_0`, :math:`y_0`, :math:`R`, :math:`\omega`, :math:`\sigma`.  Scaling can
dramatically reduce the number of parameters and also introduce new
parameters that are much easier to assign numerical values when doing
numerical experiments. We therefore scale the problem. As length
scale, we choose :math:`L` so the scaled domain becomes the unit square. As
time scale and characteristic size of :math:`u`, we just introduce :math:`t_c` ad
:math:`u_c`.  This means that we introduce scaled variables

.. math::
        
        \bar x = \frac{x}{L},\quad \bar y = \frac{y}{L},\quad \bar t =\frac{t}{t_c},
        \quad\bar u = \frac{u-U_s}{u_c}{\thinspace .}
        

The scaled form of :math:`f` is naturally :math:`\bar f = f/A`, since this makes
:math:`\bar f\in (0,1]`. The arguments in the exponential function in :math:`f` can
also be scaled:

.. math::
        
        \bar f &= \exp{\left(-\frac{1}{2\sigma^2}
        \left({\bar xL -(L \bar x_0 + L\bar R\cos\omega t_c t)}\right)^2 -\frac{1}{2\sigma^2}
        \left({L \bar y-(L\bar y0 + L\bar R\sin\omega t_c t)}\right)^2\right)}\\ 
        &= \exp{\left(-\frac{1}{2}\frac{L^2}{\sigma^2}
        \left(x -(\bar x_0 + \bar R\cos\omega t_c \bar t)\right)^2 -
        \frac{1}{2}\frac{L^2}{\sigma^2}
        \left(\bar y-(\bar y0 + \bar R\sin\omega t_c \bar t)\right)^2\right)}\\ 
        &= \exp{\left(-\frac{1}{2}\beta^2
        \left((x -(\frac{1}{2} + \bar R\cos\bar t)\right)^2 -
        \left(\bar y-(\frac{1}{2} + \bar R\sin\bar t))^2\right)\right)},
        

where :math:`\beta` is a dimensionless parameter,

.. math::
         \beta = \frac{L}{\sigma},

reflecting the ratio of the domain size and the width of the heat source.
Moreover, we have restricted the rotation point to be the center point
of the domain:

.. math::
         (\bar x_0,\bar y_0) = (\frac{1}{2},\frac{1}{2}){\thinspace .}

The time scale
in diffusion problems is usually related to the "speed of the
diffusion", but in this problem it is more natural to base the time
scale on the movement of the heat source, which suggests setting
:math:`t_c = 1/\omega`.

Inserting the new scaled variables in the PDE leads to

.. math::
         \frac{\partial \bar u}{\partial\bar t} =
        \frac{\kappa}{\omega\varrho c L^2}\bar\nabla^2\bar u +
        \frac{A}{\omega u_c\varrho c}\bar f(\bar x,\bar y,\bar t){\thinspace .}

The first coefficient is a dimensionless number,

.. math::
         \gamma = \frac{\kappa}{\omega\varrho c L^2},

while the second coefficient can be used to determine :math:`u_c` by demanding
the source term to balance the time derivative term,

.. math::
         u_c = \frac{A}{\omega\varrho c}{\thinspace .}

Our aim is to have :math:`\bar u \in [0,1]`, but this :math:`u_c` does not capture
the precise magnitude of :math:`u`. However, we believe that the characteristic
size of :math:`u` is

.. math::
         u_c = \delta^{-1}\frac{A}{\omega\varrho c},

for a scaling factor :math:`\delta`. Using this :math:`u_c` gives the PDE

.. math::
         \frac{\partial \bar u}{\partial\bar t} =
        \gamma\bar\nabla^2\bar u +
        \delta\bar f(\bar x,\bar y,\bar t),

with two dimensionless variables, but :math:`\delta` is quite easily
tuned from experiments to give :math:`\bar u` a typically size of unity.

Looking at :math:`\gamma`, we see that it can be written

.. math::
         \gamma = \frac{1/\omega}{\varrho c L^2/\kappa},

which is the ratio of the time scale for the heat source and the
time scale for diffusion. Multiplying by :math:`R/R` gives another
interpretation: :math:`\gamma` is the ratio of the speed of diffusion and
the speed of the heat source.


.. admonition:: The benefits of scaling

   The physics of our problem depends now on :math:`\beta`, :math:`\bar
   R`, and :math:`\gamma`, just three ratios of physical effects instead
   of 10 independent parameters.  Setting
   :math:`\bar R = 0.2` is an appropriate choice. For a quite localized heat
   source in space, :math:`\beta=10` is a suitable value.  Then we are
   actually left with only one interesting parameter to adjust: :math:`\gamma`.
   It is so much easier to assign this parameter a value (speed of
   diffusion versus speed of heat source) than to set :math:`\varrho`, :math:`c`, and
   :math:`\kappa` for some chosen material, and then determine relevant values for
   :math:`A`, :math:`L`, etc. There are no approximations in the scaling procedure;
   it just dramatically simplifies numerical simulations.
   The book [Ref2]_ gives a comprehensive treatment
   of scaling.




.. _ch:diffusion:welding:funcsolver:

A function-based solver
-----------------------

We can use the ``solver_minimize_assembly`` function to solve the
welding problem. The application code just declares the problem-dependent
parameters and calls the solver function:

.. code-block:: python

    def application_welding(gamma=1, delta=1, beta=10, num_rotations=2):
        """Circular moving heat source for simulating welding."""
        from math import pi, sin, cos
        u_b = Constant(0)
        I = Constant(0)
        R = 0.2
        f = Expression(
            'delta*exp(-0.5*pow(beta,2)*(pow(x[0]-(0.5+R*cos(t)),2) + '
                                        'pow(x[1]-(0.5+R*sin(t)),2)))',
            delta=delta, beta=beta, R=R, t=0)
        # Simulate to rotations with the equipment
        omega = 1.0      # Scaled angular velocity
        P = 2*pi/omega   # One period of rotation
        T = 2*P          # Total simulation time
        dt = P/40        # 40 steps per rotation
        Nx = Ny = 60
        solver_minimize_assembly(
            gamma, f, u_b, I, dt, T, (Nx, Ny), (1, 1), degree=1,
            user_action=ProcessResults(), I_project=False)

The remaining task is to write the user action callback function to
process the solution at teach time step. We want to make use of
``cbcpost`` for storage and plotting.  Since we need the post processor
variable, called ``pp`` in the section :ref:`ch:diffusion:welding:cbcpost`,
to survive between calls to the user action function, we find it
most convenient to implement this function in terms of a class with
``pp`` as attribute and ``__call__`` as the user action function.  We want
to make comparisons between the heat source and the temperature
response, so we register both fields for storage and plotting:

.. code-block:: python

    import cbcpost as post
    class ProcessResults(object):
        def __init__(self):
            """Define fields to be stored/plotted."""
            self.pp = post.PostProcessor(
                dict(casedir='Results', clean_casedir=True))
            self.pp.add_field(
                post.SolutionField(
                    'Temperature',
                    dict(save=True,
                         save_as=['hdf5', 'xdmf'],  # format
                         plot=True,
                         plot_args=
                         dict(range_min=0.0, range_max=1.1)
                         )))
            self.pp.add_field(
                post.SolutionField(
                    "Heat_source",
                    dict(save=True,
                         save_as=["hdf5", "xdmf"],  # format
                         plot=True,
                         plot_args=
                         dict(range_min=0.0, range_max=float(delta))
                         )))
            # Save separately to VTK files as well
            self.vtkfile_T = File('temperature.pvd')
            self.vtkfile_f = File('source.pvd')
        def __call__(self, t, T, timestep):
            """Store T and f to file (cbcpost and VTK)."""
            T.rename('T', 'solution')
            f_Function = interpolate(f, T.function_space())
            f_Function.rename('f', 'welding equipment')
            self.pp.update_all(
                {'Temperature': lambda: T,
                 'Heat_source': lambda: f_Function},
                t, timestep)
            self.vtkfile_T << (T, float(t))
            self.vtkfile_f << (f_Function, float(t))

We took the opportunity to also
store the ``u`` and ``f`` functions to VTK files, although this is really
not necessary since ParaView or VisIt can read XDMF files.

Note that the use of ``cbcpost`` is usually very dependent on the
problem at hand, so it does not make sense to include ``cbcpost`` code
in a general PDE solver, only in problem-specific code such as the
user action function.

Getting an animation on the screen with the built-in plotting tool is
a matter of running the welding example:

.. code-block:: python

    >>> from heat_func import application_welding as a
    >>> a(gamma=10, delta=700)

(We introduced the synonym ``a`` to save some typing.)
Or you can run this as a command in the terminal:

.. code-block:: text

    Terminal> python -c '\ 
    from heat_func import application_welding as a;
    a(gamma=10, delta=700)'

Since we have fixed the color scale of the temperature to have values
in :math:`[0,1.1]`, we must adjust :math:`\delta` appropriately to :math:`\gamma`.  For
example, running :math:`\gamma=40` reveals, from the output in the terminal,
that the maximum temperature is about 0.25, and consequently we do not
see much. For any given :math:`\gamma`, run the problem with :math:`\delta=1` (and
say ``num_rotations=0.2`` to make a quick simulation), and rerun with
:math:`\delta` as one over the maximum temperature.  Here we get an
approximate :math:`\delta = 66.7\gamma` for :math:`\gamma \leq 0.1`. Try running
:math:`\gamma=0.01` and :math:`\delta=1` to observe some more significant heat
transfer away from the welding equipment. With :math:`\gamma =0.001` there
is significant heat build-up, but for so small :math:`\gamma` we should
re-scale the problem and use the diffusion time scale as time scale.

In ParaView, load ``Results/Temperature/Temperature.xdmf`` as file,
click **Apply**, then the play button for animation. If the animation is
not correct, repeat the procedure. Thereafter, split the layout in
two, choose **3D View**, load ``Results/Heat source/Heat_source.xmdf``,
click **Apply**, and run the animation. The two plots are synchronized
in time.

.. raw:: html
        
        <div>
        <video  loop controls width='640' height='365' preload='none'>
            <source src='mov/welding_gamma1.ogg'  type='video/ogg;  codecs="theora, vorbis"'>
        </video>
        </div>
        <p><em>Welding example with :math:`\gamma=1`.</em></p>
        
        <!-- Issue warning if in a Safari browser -->
        <script language="javascript">
        if (!!(window.safari)) {
          document.write("<div style=\"width: 95%%; padding: 10px; border: 1px solid #100; border-radius: 4px;\"><p><font color=\"red\">The above movie will not play in Safari - use Chrome, Firefox, or Opera.</font></p></div>")}
        </script>
        

.. ========= Implementing PDE solvers as classes =========

