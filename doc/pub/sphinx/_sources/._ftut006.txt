.. !split

.. _ch:diffusion:

The diffusion solver revisited
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

.. Pointers backward...what is needed to be recaptured?

This chapter is devoted to solving diffusion problems of the
form

.. math::
         -\nabla\cdot(p\nabla u) = f,

with initial condition :math:`u=I` and various types of Dirichlet, Neumann,
and Robin conditions.
A very simple FEniCS program for a diffusion equation was introduced
in the section :ref:`ch:fundamentals:diffusion`, but here we shall
discuss important algorithmic optimization strategies, how to store
and animate time-dependent data, and how to construct more advanced
solvers in terms of classes.

.. _ch:diffusion:opt:

Optimization of algorithms and implementations
==============================================

.. _ch:diffusion:opt:bassembly:

Avoiding some assembly
----------------------

The time-dependent diffusion equation gives rise to a linear system
:math:`AU=b` at each time level, where the coefficient matrix :math:`A` is constant,
but :math:`b` depends on :math:`u` at the previous time level. To increase the
computational efficiency, we can therefore assemble :math:`A` once and
for all before the time loop. To be able to do this, we need to
explicitly create matrices and vectors as demonstrated in the section :ref:`ch:poisson0:linalg`.

Let us express the solution procedure in algorithmic form,
writing :math:`u` for the unknown spatial function at the new time level
(:math:`u^k`) and :math:`u_1` for the spatial solution at one earlier time level
(:math:`u^{k-1}`):

 * define Dirichlet boundary condition (:math:`u_0`, Dirichlet boundary, etc.)

 * let :math:`u_1` interpolate :math:`I` or be the projection of :math:`I`

 * define :math:`a` and :math:`L`

 * assemble matrix :math:`A` from :math:`a`

 * set some stopping time :math:`T`

 * :math:`t={{\Delta t}}`

 * while :math:`t\leq T`

   * assemble vector :math:`b` from :math:`L`

   * apply essential boundary conditions

   * solve :math:`AU=b` for :math:`U` and store in :math:`u`

   * :math:`t\leftarrow t + {{\Delta t}}`

   * :math:`u_1 \leftarrow u` (be ready for next step)

The code features the following changes from the ``ft02_diffusion_flat1.py``
program. We may define :math:`a` and :math:`L` from :math:`F` as before, or do it explicitly:

.. code-block:: python

        a = u*v*dx + dt*dot(grad(u), grad(v))*dx
        L = (u_1 + dt*f)*v*dx

Prior to the time loop we assemble the coefficient matrix :math:`A` once and
for all:

.. index:: assemble

.. code-block:: python

        A = assemble(a)   # assemble only once, before the time stepping

At each time level we can do a similar ``b = assemble(L)``. With this
construction, a new vector for ``b`` is allocated in memory in every
pass of the time loop.  It would be much more memory friendly to reuse
the storage of the ``b`` we already have.  This is easily accomplished
by

.. code-block:: python

        b = assemble(L, tensor=b)

That is, we send in our previous ``b``, which is then filled with new values
and returned from ``assemble``. Now there will be only a single
memory allocation of the right-hand side vector. Before the time loop
we set ``b = None`` such that ``b`` is defined in the first call to
``assemble``.

The necessary changes inside the time loop go as follows:

.. code-block:: python

        while t <= T:
            b = assemble(L, tensor=b)
            u0.t = t
            bc.apply(A, b)
            solve(A, u.vector(), b)

The update ``u0.t = t`` is of key importance as ``bc.apply(A, b)`` will
look up the ``u0`` object to find the proper values in the Dirichlet condition,
and these change with time in our test problem!

The complete program is found in the file
`ft09_diffusion_flat2.py <https://github.com/hplgit/fenics-tutorial/blob/master/src/ft09_diffusion_flat2.py>`__.

.. _ch:diffusion:opt:noassembly:

Avoiding all assembly
---------------------

.. index::
   single: assembly, increasing efficiency

The purpose of this section is to present a technique for speeding up
FEniCS simulators for time-dependent problems where it is possible to
perform all assembly operations prior to the time loop.  There are two
costly operations in the time loop: assembly of the right-hand side
:math:`b` and solution of the linear system via the ``solve`` call. The
assembly process involves work proportional to the number of degrees
of freedom :math:`N`, while the solve operation has a work estimate of
:math:`\mathcal{O}( N^{\alpha})`, for some :math:`\alpha\geq 1`.  Typically,
:math:`\alpha\in [1,2]`.  As :math:`N\rightarrow\infty`, the solve operation will
dominate for :math:`\alpha>1`, but for the values of :math:`N` typically used on
smaller computers, the assembly step may still represent a
considerable part of the total work at each time level. Avoiding
repeated assembly can therefore contribute to a significant speed-up
of a finite element code in time-dependent problems.

Deriving recursive linear systems
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To see how repeated assembly can be avoided, we look at the :math:`L(v)`
form in  :ref:`(27) <Eq:ch:diffusion0:pde1:L>`,
which in general varies with
time through :math:`u^{k-1}`, :math:`f^k`, and possibly also with :math:`{\Delta t}`
if the time step is adjusted during the simulation.
The technique for avoiding repeated assembly consists in
expanding the finite element functions in sums over the basis functions
:math:`\phi_i`, as explained
in the section :ref:`ch:poisson0:linalg`, to identify matrix-vector
products that build up the complete system. We have
:math:`u^{k-1}=\sum_{j=1}^NU^{k-1}_j\phi_j`, and we can expand :math:`f^k` as
:math:`f^{k}=\sum_{j=1}^NF^{k}_j\phi_j`. Inserting these expressions in :math:`L(v)`
and using
:math:`v=\hat\phi_i` result in

.. math::
        
        \int_\Omega \left(u^{k-1} + {{\Delta t}}f^k\right)v {\, \mathrm{d}x} &=
        \int_\Omega \left(\sum_{j=1}^N U^{k-1}_j\phi_j + {{\Delta t}}\sum_{j=1}^N F^{k}_j\phi_j\right)\hat\phi_i {\, \mathrm{d}x},\\ 
        &=\sum_{j=1}^N\left(\int_\Omega \hat\phi_i\phi_j {\, \mathrm{d}x}\right)U^{k-1}_j
         + {{\Delta t}}\sum_{j=1}^N\left(\int_\Omega \hat\phi_i\phi_j {\, \mathrm{d}x}\right)F^{k}_j{\thinspace .}
        

Introducing :math:`M_{ij} = \int_\Omega \hat\phi_i\phi_j {\, \mathrm{d}x}`, we see that
the last expression can be written

.. math::
        
        \sum_{j=1}^NM_{ij}U^{k-1}_j + {{\Delta t}} \sum_{j=1}^NM_{ij}F^{k}_j,
        

which is nothing but two matrix-vector products,

.. math::
        
        MU^{k-1} + {{\Delta t}} MF^k,
        

if :math:`M` is the matrix with entries :math:`M_{ij}`,

.. math::
        
        U^{k-1}=(U^{k-1}_1,\ldots,U^{k-1}_N)^T,
        

and

.. math::
        
        F^k=(F^{k}_1,\ldots,F^{k}_N)^T{\thinspace .}
        

We have immediate access to :math:`U^{k-1}` in the program since that is the
vector in the ``u_1`` function. The :math:`F^k` vector can easily be computed
by interpolating the prescribed :math:`f` function (at each time level if
:math:`f` varies with time). Given :math:`M`, :math:`U^{k-1}`, and :math:`F^k`, the right-hand
side :math:`b` can be calculated as

.. math::
        
        b = MU^{k-1} + {{\Delta t}} MF^k {\thinspace .}
        

That is, no assembly is necessary to compute :math:`b`.

The coefficient matrix :math:`A` can also be split into two terms.  We
insert :math:`v=\hat\phi_i` and :math:`u^k = \sum_{j=1}^N U^k_j\phi_j` in the
expression :ref:`(26) <Eq:ch:diffusion0:pde1:a>` to get

.. math::
        
        \sum_{j=1}^N \left(\int_\Omega \hat\phi_i\phi_j {\, \mathrm{d}x}\right)U^k_j + {{\Delta t}}
        \sum_{j=1}^N \left(\int_\Omega \nabla\hat\phi_i\cdot\nabla\phi_j {\, \mathrm{d}x}\right)U^k_j,
        

which can be written as a sum of matrix-vector products,

.. math::
        
        MU^k + {{\Delta t}} KU^k = (M + {{\Delta t}} K)U^k,
        

if we identify the matrix :math:`M` with entries :math:`M_{ij}` as above and
the matrix :math:`K` with entries

.. _Eq:_auto25:

.. math::

    \tag{75}
    K_{ij} = \int_\Omega \nabla\hat\phi_i\cdot\nabla\phi_j {\, \mathrm{d}x}{\thinspace .}
        
        

The matrix :math:`M` is often called the "mass matrix" while "stiffness
matrix" is a common nickname for :math:`K`. The associated bilinear forms
for these matrices, as we need them for the assembly process in a
FEniCS program, become

.. _Eq:ch:diffusion0:pde1:aK:

.. math::

    \tag{76}
    a_K(u,v) = \int_\Omega\nabla u\cdot\nabla v {\, \mathrm{d}x},
        
        

.. _Eq:ch:diffusion0:pde1:aM:

.. math::

    \tag{77}
    a_M(u,v) = \int_\Omega uv {\, \mathrm{d}x} {\thinspace .}
        

The linear system at each time level, written as :math:`AU^k=b`,
can now be computed by first computing :math:`M` and :math:`K`, and then forming
:math:`A=M+{{\Delta t}} K` at :math:`t=0`, while :math:`b` is computed as
:math:`b=MU^{k-1} + {{\Delta t}}MF^k` at each time level.

Implementation          (3)
~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following modifications are needed in the ``ft10_diffusion_func.py``
program from the previous section in order to implement the new
strategy of avoiding assembly at each time level:

 1. Define separate forms :math:`a_M` and :math:`a_K`

 2. Assemble :math:`a_M` to :math:`M` and :math:`a_K` to :math:`K`

 3. Compute :math:`A=M+{{\Delta t}}K`

 4. Define :math:`f` as an ``Expression``

 5. Interpolate the formula for :math:`f` to a finite element function :math:`F^k`

 6. Compute :math:`b=MU^{k-1} + {{\Delta t}}MF^k`

The relevant code segments become

.. code-block:: python

        # 1.
        a_K = dot(grad(u), grad(v))*dx
        a_M = u*v*dx
        # No need for L
        
        # 2. and 3.
        M = assemble(a_M)
        K = assemble(a_K)
        A = M + dt*K
        
        # 4.
        f = Expression('beta - 2 - 2*alpha', beta=beta, alpha=alpha)
        
        # 5. and 6.
        while t <= T:
            f_k = interpolate(f, V)
            F_k = f_k.vector()
            b = M*u_1.vector() + dt*M*F_k

We implement these modifications in a refactored version of the
program ``ft09_diffusion_flat2.py``, where the solver is a function
as explained in the section :ref:`ch:poisson0:impl2` rather than a
flat program. The domain can also more flexibly be a 1D, 2D, or 3D
interval, rectangle, or box.
The new ``solver_minimize_assembly`` function resides in
`ft10_diffusion_func.py <ft10_diffusion_func.py>`__.

.. code-block:: python

        def solver_minimize_assembly(
            alpha, f, u0, I, dt, T, divisions, L, degree=1,
            user_action=None, I_project=False):
            """
            Solve diffusion PDE u_t = div(alpha*grad(u)) + f on
            an interval, rectangle, or box with side lengths in L.
            divisions reflect cell partitioning, degree the element
            degree. user_action(t, u, timetesp) is a callback function
            where the calling code can process the solution.
            If I_project is false, use interpolation for the initial
            condition.
            """
            # Create mesh and define function space
            d = len(L)  # No of space dimensions
            if d == 1:
                mesh = IntervalMesh(divisions[0], 0, L[0])
            elif d == 2:
                mesh = RectangleMesh(Point(0,0), Point(*L), *divisions)
            elif d == 3:
                mesh = BoxMesh(Point(0,0), Point(*L), *divisions)
            V = FunctionSpace(mesh, 'P', degree)
        
            class Boundary(SubDomain):  # define the Dirichlet boundary
                def inside(self, x, on_boundary):
                    return on_boundary
        
            boundary = Boundary()
            bc = DirichletBC(V, u0, boundary)
        
            # Initial condition
            u_1 = project(I, V) if I_project else interpolate(I, V)
            if user_action is not None:
                user_action(0, u_1, 0)
        
            # Define variational problem
            u = TrialFunction(V)
            v = TestFunction(V)
            a_M = u*v*dx
            a_K = alpha*dot(grad(u), grad(v))*dx
        
            M = assemble(a_M)
            K = assemble(a_K)
            A = M + dt*K
            # Compute solution
            u = Function(V)   # the unknown at a new time level
            b_assemble = 0  # CPU time for assembling all the b vectors
            timestep = 1
            t = dt
            while t <= T:
                t0 = time.clock()
                f_k = interpolate(f, V)
                F_k = f_k.vector()
                b = M*u_1.vector() + dt*M*F_k
                b_assemble += time.clock() - t0
                try:
                    u0.t = t
                    f.t = t
                except AttributeError:
                    pass  # ok if no t attribute in u0
                bc.apply(A, b)
                solve(A, u.vector(), b)
        
                if user_action is not None:
                    user_action(t, u, timestep)
                t += dt
                timestep += 1
                u_1.assign(u)
            info('total time for assembly of right-hand side: %.2f' % b_assemble)
        
        def application_animate(model_problem):
            import numpy as np, time
        
            if model_problem == 1:
                # Test problem with exact solution at the nodes also for P1 elements
                alpha = 3; beta = 1.2
                u0 = Expression('1 + x[0]*x[0] + alpha*x[1]*x[1] + beta*t',
                                alpha=alpha, beta=beta, t=0)
                f = Constant(beta - 2 - 2*alpha)
                I = u0
                dt = 0.05; T = 2
                Nx = Ny = 20
                u_range = [1, 1+1+alpha*1+beta*T]
            elif model_problem == 2:
                # Diffusion of a sin^8 spike
                I = Expression('pow(sin(pi*x[0])*sin(pi*x[1]), 8)')
                f = Constant(0)
                u0 = Constant(0)
                dt = 0.0005; T = 20*dt
                Nx = Ny = 60
                u_range = [0, 1]
        
            vtkfile = File('diffusion.pvd')
        
            def animate(t, u, timestep):
                global p
                if t == 0:
                    p = plot(u, title='u',
                             range_min=float(u_range[0]),  # must be float
                             range_max=float(u_range[1]))  # must be float
                else:
                    p.plot(u)
                print('t=%g' % t)
                time.sleep(0.5)
                vtkfile << (u, float(t))  # store time-dep Function
        
            solver_minimize_assembly(
                1.0, f, u0, I, dt, T, (Nx, Ny), (1, 1), degree=2,
                user_action=animate, I_project=False)

A special feature in this program is the ``user_action`` callback function:
at every time level, the solution is sent to ``user_action``, which is
some function provided by the user where the solution can be processed, e.g.,
stored, analyzed, or visualized. In a unit test for the test example without
numerical approximation errors, we can write a call to the solver function,

.. code-block:: python

        def test_solver():
            import numpy as np
            alpha = 3; beta = 1.2
            u0 = Expression('1 + x[0]*x[0] + alpha*x[1]*x[1] + beta*t',
                            alpha=alpha, beta=beta, t=0)
            f = Constant(beta - 2 - 2*alpha)
            dt = 0.3; T = 1.9
            u0.t = 0
        
            # Define assert_error callback function
            ...
        
            solver_minimize_assembly(
                f, u0, u0, dt, T, Nx, Ny, degree,
                user_action=assert_error, I_project=False)

The ``user_action`` function ``assert_error`` asserts equality of the
exact and numerical solution at every time level:

.. code-block:: python

        def assert_error(t, u, timestep):
            u_e = interpolate(u0, u.function_space())
            error= np.abs(u_e.vector().array() -
            	          u.vector().array()).max()
            tol = 2E-12
            assert error < tol, 'error: %g' % error

One can also use the user action callback function to visualize
the solution:

.. code-block:: python

        def assert_error(t, u, timestep):
            global p
            if t == 0:
                p = plot(u, title='u',
        	         # Fix the color scale
                         range_min=float(u_range[0]),  # must be float
                         range_max=float(u_range[1]))  # must be float
            else:
                p.plot(u)
            print('t=%g' % t)
            time.sleep(0.5)

It is key to fix the color scale to get a meaningful animation.

A complete function calling up ``solver_minimize_assembly`` for
animating the solution in two test problems is found in the
function ``application_animate`` in
`ft10_diffusion_func.py <ft10_diffusion_func.py>`__.

Note that ``p``, which must survive between subsequent calls to the
callback function, has to be declared as a global variable. This is
necessary when the user action function is a *closure* (function
inside function, "remembering" variables in the parent function) and
``p`` is changed inside the closure.  Some programmers find it more
convenient to let the user action be class instead, where ``p`` can be
an attribute. Later examples employ the class design.

[**hpl 19**: The function ``solver_vs_solver_minimize_assembly`` measures the impact of this optimization. It is not big: a factor of 1-2 for P1 elements but hardly anything for P2 elements. Tested up to :math:`10^5` unknowns. However, the technique is important and it gave a significant speed-up when used in the Oasis CFD code by Mikael and co-workers (that code is on par wit OpenFOAM).]

[**hpl 20**: I AM HERE!]

.. _ch:diffusion:welding:

A welding example with post processing and animation
====================================================

The focus so far in this tutorial has been on producing the solution
of PDE problems. For scientific investigations, the primary work is
often with post processing results: computing quantities derived from
the solution and inspecting these with visualization or data analysis tools.
This is the focus of the present section.
To ease the programming, we shall make use of a convenient tool, ``cbcpost``,
for post processing, saving data to file(s), and animating solutions.
We recommend to use
``cbcpost`` in all time-dependent FEniCS solvers, but it also has a lot
to offer in stationary problems too.

To explain the usage of ``cbcpost`` for storage and plotting, we address
a real physical application: welding of a plate, where a moving heat
source gives rise to a moving temperature field.

.. _ch:diffusion:welding:cbcpost:

Post processing data and saving to file
---------------------------------------

Installation
~~~~~~~~~~~~

The ``cbcpost`` package is not a part of the ``fenics`` package so you
will need to install it.  The simplest installation method is to use
``pip``. We recommend to install a companion package ``fenicstools`` as
well. Just run

.. code-block:: text

        sudo pip install git+https://bitbucket.org/simula_cbc/cbcpost.git
        sudo pip install git+https://github.com/mikaem/fenicstools.git

in a terminal window (skip ``sudo`` on Windows machines).
Alternatively, you can grab the source code and run ``setup.py`` the usual
way Python packages are installed from source:

.. code-block:: text

        Terminal> git clone https://bitbucket.org/simula_cbc/cbcpost.git
        Terminal> cd cbcpost
        Terminal> python setup.py install
        Terminal> cd ..
        Terminal> git clone https://github.com/mikaem/fenicstools.git
        Terminal> cd fenicstools
        Terminal> python setup.py install

Basic commands
~~~~~~~~~~~~~~

We must create a *post processor* and then specify what kind of
results we want to be stored on file and (optionally) get visualized.
Suppose we have a field with logical name ``Temperature`` that we want
to save in XDMF/HDF5 format in files in a fresh subdirectory ``Results``:

.. code-block:: python

        import cbcpost as post
        # Create post processor
        pp = post.PostProcessor(dict(casedir='Results', clean_casedir=True))
        # Specify storage of a "Temperature" field
        pp.add_field(post.SolutionField(
            'Temperature',
            dict(save=True,
                 save_as=['hdf5', 'xdmf'],
                 plot=True,
                 plot_args=dict(range_min=0.0, range_max=1.2))))

The ``plot=True`` automatically launches ``fenics.plot`` commands of
this scalar field during the simulation. The ranges of the color
scale must be given (as ``float`` variables) so that the color scale
stays fixed during the animation on the screen.

Inside the time loop, we have to feed a new solution to the post processor
to get it saved:

.. code-block:: python

        pp.update_all({'Temperature': lambda: T}, t, timestep)

Here, ``T`` is the ``Function`` object that we have solved for, ``t`` is
current time, and ``timestep`` is the corresponding time step number.

One can specify many fields to be saved (and plotted), but even more
important: ``cbcpost`` can calculate a lot of derived quantities from
the solution, such as

 * time derivatives and integrals of vector/scalar fields

 * extraction of fields over subdomains

 * slicing of fields in 3D geometries

 * averaging of fields in space or time

 * norms and point values of fields as function of time

 * user-defined post processing of fields

We refer to the online `cbcpost documentation <http://cbcpost.readthedocs.org/en/latest/index.html>`__ for further information on all the capabilities of this
package.


.. admonition:: Tip: Use ``cbcpost`` to visualize time-dependent data

   Instead of issuing your own ``plot`` commands in time-dependent
   problems, it is safer and more convenient to specify ``plot=True``
   and fix the range of the color scale, when you add fields
   to the post processor. Multiple fields will be synchronized during
   the animation.




.. _ch:diffusion:welding:problem:

Heat transfer due to a moving welding source
--------------------------------------------

Let us solve a diffusion problem taken from welding.  A moving
welding equipment acts as a moving heat source at the top of a thin
metal plate.  The question is how the heat from the equipment spreads
out in the material that is being welded. We use the standard heat
equation, treat the material as two dimensional, and do not take phase
transitions into account.  The governing PDE is then

.. math::
         \varrho c \frac{\partial u}{\partial t} = \kappa\nabla^2 u + f,

where :math:`u` is temperature, :math:`\varrho` is the density of the material,
:math:`c` is the heat capacity at constant volume, :math:`\kappa` is the heat
conduction coefficient, and :math:`f` models the heat source from the
welding equipment. The domain is :math:`\Omega = [0,L]\times [0,L]`.  An
additional major simplification is that we set :math:`u=U_s` at the
boundary, where :math:`U_s` is the temperature of the surroundings (a Robin
condition, modeling cooling at the boundary would be more accurate,
but then we should also consider cooling in the third dimension as
well).  The initial condition reads :math:`u=U_s`.

A welding source is moving and very localized in space.  The
localization can be modeled by a peak-shaped Gaussian function.  The
movement is taken to be a circle with radius :math:`R` about a point
:math:`(x_0,y_0)`. An appropriate :math:`f` is

.. math::
         f(x,y,t) = A\exp{\left(-\frac{1}{2\sigma^2}
        \left({x-(x_0 + R\cos\omega t)}\right)^2 -\frac{1}{2\sigma^2}
        \left({y-(y_0 + R\sin\omega t)}\right)^2\right)}{\thinspace .}

The parameter :math:`A` is the strength of the heat source, and :math:`\sigma` is
the "standard deviation" (i.e., a measure of the width) of the Gaussian
function.

.. _ch:diffusion:welding:scaling:

Scaling of the welding problem
------------------------------

There are 10 physical parameters in the problem: :math:`L`, :math:`\varrho`, :math:`c`,
:math:`\kappa`, :math:`A`, :math:`x_0`, :math:`y_0`, :math:`R`, :math:`\omega`, :math:`\sigma`.  Scaling can
dramatically reduce the number of parameters and also introduce new
parameters that are much easier to assign numerical values. We
therefore scale the problem. As length scale, we choose :math:`L` so the
scaled domain becomes the unit square. As time scale and
characteristic size of :math:`u`, we just introduce :math:`t_c` ad :math:`u_c`.  This
means that we introduce scaled variables

.. math::
        
        \bar x = \frac{x}{L},\quad \bar y = \frac{y}{L},\quad \bar t =\frac{t}{t_c},
        \quad\bar u = \frac{u-U_s}{u_c}{\thinspace .}
        

The scaled form of :math:`f` is naturally :math:`\bar f = f/A`, since this makes
:math:`\bar f\in (0,1]`. The arguments in the exponential function in :math:`f` can
also be scaled:

.. math::
        
        \bar f &= \exp{\left(-\frac{1}{2\sigma^2}
        \left({\bar xL -(L \bar x_0 + L\bar R\cos\omega t_c t)}\right)^2 -\frac{1}{2\sigma^2}
        \left({L \bar y-(L\bar y0 + L\bar R\sin\omega t_c t)}\right)^2\right)}\\ 
        &= \exp{\left(-\frac{1}{2}\frac{L^2}{\sigma^2}
        \left(x -(\bar x_0 + \bar R\cos\omega t_c \bar t)\right)^2 -
        \frac{1}{2}\frac{L^2}{\sigma^2}
        \left(\bar y-(\bar y0 + \bar R\sin\omega t_c \bar t)\right)^2\right)}\\ 
        &= \exp{\left(-\frac{1}{2}\beta^2
        \left((x -(\frac{1}{2} + \bar R\cos\bar t)\right)^2 -
        \left(\bar y-(\frac{1}{2} + \bar R\sin\bar t))^2\right)\right)},
        

where :math:`\beta` is a dimensionless parameter,

.. math::
         \beta = \frac{L}{\sigma},

reflecting the ratio of the domain size and the width of the heat source.
Moreover, we have restricted the rotation point to be the center point
of the domain:

.. math::
         (\bar x_0,\bar y_0) = (\frac{1}{2},\frac{1}{2}){\thinspace .}

The time scale
in diffusion problems is usually related to the "speed of the
diffusion", but in this problem it is more natural to base the time
scale on the movement of the heat source, which suggests setting
:math:`t_c = 1/\omega`.

Inserting the new scaled variables in the PDE leads to

.. math::
         \frac{\partial \bar u}{\partial\bar t} =
        \frac{\kappa}{\omega\varrho c L^2}\bar\nabla^2\bar u +
        \frac{A}{\omega u_c\varrho c}\bar f(\bar x,\bar y,\bar t){\thinspace .}

The first coefficient is a dimensionless number,

.. math::
         \gamma = \frac{\kappa}{\omega\varrho c L^2},

while the second coefficient can be used to determine :math:`u_c` by demanding
the source term to balance the time derivative term,

.. math::
         u_c = \frac{A}{\omega\varrho c}{\thinspace .}

Our aim is to have :math:`\bar u \in [0,1]`, but this :math:`u_c` do not capture
the precise magnitude of :math:`u`. However, we believe that the characteristic
size of :math:`u` is

.. math::
         u_c = \delta^{-1}\frac{A}{\omega\varrho c},

for a scaling factor :math:`\delta`. Using this :math:`u_c` gives the PDE

.. math::
         \frac{\partial \bar u}{\partial\bar t} =
        \gamma\bar\nabla^2\bar u +
        \delta\bar f(\bar x,\bar y,\bar t),

with two dimensionless variables, but :math:`\delta` is quite easily
tuned from experiments to give :math:`\bar u` a typically size of unity.

Looking at :math:`\gamma`, we see that it can be written

.. math::
         \gamma = \frac{1/\omega}{\varrho c L^2/\kappa},

which is the ratio of the time scale for the heat source and the
time scale for diffusion. Multiplying by :math:`R/R` gives another
interpretation: :math:`\gamma` is the ratio of the speed of diffusion and
the speed of the heat source.


.. admonition:: The benefits of scaling

   The physics of our problem depends now on :math:`\beta`, :math:`\bar
   R`, and :math:`\gamma`, just three ratios of physical effects instead
   of 10 independent parameters.  Setting
   :math:`\bar R = 0.2` is an appropriate choice. For a quite localized heat
   source in space, :math:`\beta=10` is a suitable value.  Then we are
   actually left with only one interesting parameter to adjust: :math:`\gamma`.
   It is so much easier to assign this parameter a value (speed of
   diffusion versus speed of heat source) than to set :math:`\varrho`, :math:`c`, and
   :math:`\kappa` for some chosen material, and then determine relevant values for
   :math:`A`, :math:`L`, etc. There are no approximations in the scaling procedure;
   it just dramatically simplifies numerical simulations.
   The book [Ref23]_ gives a comprehensive treatment
   of scaling.




.. _ch:diffusion:welding:funcsolver:

A function-based solver
-----------------------

We can use the ``solver_minimize_assembly`` function to solve the
welding problem. The application code just declares the problem-dependent
parameters and calls the solver function:

.. code-block:: python

        def application_welding(gamma=1, delta=1, beta=10, num_rotations=2):
            """Circular moving heat source for simulating welding."""
            from math import pi, sin, cos
            u0 = Constant(0)
            I = Constant(0)
            R = 0.2
            f = Expression(
                'delta*exp(-0.5*pow(beta,2)*(pow(x[0]-(0.5+R*cos(t)),2) + '
                                            'pow(x[1]-(0.5+R*sin(t)),2)))',
                delta=delta, beta=beta, R=R, t=0)
            # Simulate to rotations with the equipment
            omega = 1.0      # Scaled angular velocity
            P = 2*pi/omega   # One period of rotation
            T = 2*P          # Total simulation time
            dt = P/40        # 40 steps per rotation
            Nx = Ny = 60
            solver_minimize_assembly(
                gamma, f, u0, I, dt, T, (Nx, Ny), (1, 1), degree=1,
                user_action=ProcessResults(), I_project=False)

The remaining task is to write the user action callback function to
process the solution at teach time step. We want to make use of
``cbcpost`` for storage and plotting.  Since we need the post processor
variable, called ``pp`` in the section :ref:`ch:diffusion:welding:cbcpost`,
to survive between calls to the user action function, we find it
most convenient to implement this function in terms of a class with
``pp`` as attribute and ``__call__`` as the user action function.  We want
to make comparisons between the heat source and the temperature
response, so we register both fields for storage and plotting:

.. code-block:: python

        import cbcpost as post
        class ProcessResults(object):
            def __init__(self):
                """Define fields to be stored/plotted."""
                self.pp = post.PostProcessor(
                    dict(casedir='Results', clean_casedir=True))
                self.pp.add_field(
                    post.SolutionField(
                        'Temperature',
                        dict(save=True,
                             save_as=['hdf5', 'xdmf'],  # format
                             plot=True,
                             plot_args=
                             dict(range_min=0.0, range_max=1.1)
                             )))
                self.pp.add_field(
                    post.SolutionField(
                        "Heat_source",
                        dict(save=True,
                             save_as=["hdf5", "xdmf"],  # format
                             plot=True,
                             plot_args=
                             dict(range_min=0.0, range_max=float(delta))
                             )))
                # Save separately to VTK files as well
                self.vtkfile_T = File('temperature.pvd')
                self.vtkfile_f = File('source.pvd')
            def __call__(self, t, T, timestep):
                """Store T and f to file (cbcpost and VTK)."""
                T.rename('T', 'solution')
                f_Function = interpolate(f, T.function_space())
                f_Function.rename('f', 'welding equipment')
                self.pp.update_all(
                    {'Temperature': lambda: T,
                     'Heat_source': lambda: f_Function},
                    t, timestep)
                self.vtkfile_T << (T, float(t))
                self.vtkfile_f << (f_Function, float(t))

We took the opportunity to also
store the ``u`` and ``f`` functions to VTK files, although this is really
not necessary since ParaView or VisIt can read XDMF files.

Note that the use of ``cbcpost`` is usually very dependent on the
problem at hand, so it does not make sense to include ``cbcpost`` code
in a general PDE solver, only in problem-specific code such as the
user action function.

Getting an animation on the screen with the built-in plotting tool is
a matter of running the welding example:

.. code-block:: python

        >>> from diffusion_func import application_welding as a
        >>> a(gamma=10, delta=700)

(We introduced the synonym ``a`` to save some typing.)
Or you can run this as a command in the terminal:

.. code-block:: text

        Terminal> python -c '\ 
        from diffusion_func import application_welding as a;
        a(gamma=10, delta=700)'

Since we have fixed the color scale of the temperature to have values
in :math:`[0,1.1]`, we must adjust :math:`\delta` appropriately to :math:`\gamma`.  For
example, running :math:`\gamma=40` reveals, from the output in the terminal,
that the maximum temperature is about 0.25, and consequently we do not
see much. For any given :math:`\gamma`, run the problem with :math:`\delta=1` (and
say ``num_rotations=0.2`` to make a quick simulation), and rerun with
:math:`\delta` as one over the maximum temperature.  Here we get an
approximate :math:`\delta = 66.7\gamma` for :math:`\gamma \leq 0.1`. Try running
:math:`\gamma=0.01` and :math:`\delta=1` to observe some more significant heat
transfer away from the welding equipment. With :math:`\gamma =0.001` there
is significant heat build-up, but for so small :math:`\gamma` we should
re-scale the problem and use the diffusion time scale as time scale.

In ParaView, load ``Results/Temperature/Temperature.xdmf`` as file,
click **Apply**, then the play button for animation. If the animation is
not correct, repeat the procedure. Thereafter, split the layout in
two, choose **3D View**, load ``Results/Heat source/Heat_source.xmdf``,
click **Apply**, and run the animation. The two plots are synchronized
in time.

.. This is only in brief now in development

.. MOVIE: [https://github.com/hplgit/fenics-tutorial/tree/master/doc/pub/mov/welding_gamma1.ogg] Welding example with :math:`\gamma=1`.

.. raw:: html
        
        <div>
        <video  loop controls width='640' height='365' preload='none'>
            <source src='https://github.com/hplgit/fenics-tutorial/tree/brief/doc/pub/mov/welding_gamma1.ogg'  type='video/ogg;  codecs="theora, vorbis"'>
        </video>
        </div>
        <p><em>Welding example with :math:`\gamma=1`.</em></p>
        
        <!-- Issue warning if in a Safari browser -->
        <script language="javascript">
        if (!!(window.safari)) {
          document.write("<div style=\"width: 95%%; padding: 10px; border: 1px solid #100; border-radius: 4px;\"><p><font color=\"red\">The above movie will not play in Safari - use Chrome, Firefox, or Opera.</font></p></div>")}
        </script>
        

.. _ch:diffusion:refactor:

Refactored implementation          (2)
======================================

The flat program for the diffusion solver in
``ft02_diffusion_flat1.py`` and ``ft09_diffusion_flat2.py``
was refactored in ``ft10_diffusion_func.py`` in terms of a
``solver`` function with the general code for solving the PDE problem, a
callback function for processing the solution at each time step, and
an application function defining the callback function and calling the
solver to solve a specific problem. However, for time-dependent
problems a solver function that gets all its input through a set of
arguments is less flexible than a solver *class*, which can demand its
input both through arguments and through functions (in subclasses)
provided by the user. The following text requires you to be familiar
with class programming in Python (tailored learning material is
Chapter 7, 9, and Appendix E in [Ref06]_).

When we work with a PDE project, we often want to explore a range or
similar problems where the PDE model basically stays the same, but
coefficients in the PDE, boundary and initial conditions, as well as
domains change.  This means that some of our code related to solving
the PDE is always the same, while some of our code is strongly
dependent upon a particular application. To avoid copying code (which
is considered evil in computer programming), we need to collect the
common code for all problems of this type in one place and then create
an API (application programming interface) to the code that will be
different from application to application. To this end, we introduce a
*solver class* that applies FEniCS to solve the PDE. It requires
access to a *problem class* where all the application-specific details
are defined. This problem class defines an API that the solver class
applies for communication.

The solver class will usually have only a constructor to set up data
structures (typically the variational formulation), a ``step`` function
to advance the solution one time step, and a ``solve`` function to run
the time loop. Every time the solver class needs problem-specific
information, it needs to get that from the problem class, either in
terms of attributes (variables) in the class or in terms of method
(function) calls. The forthcoming examples are tied to the diffusion
equation, but should be sufficiently general to be reused for
most time-dependent FEniCS applications.

.. _ch:diffusion:refactor:math:

Mathematical problem
--------------------

We address a variable-coefficient diffusion equation with Dirichlet,
Neumann, and Robin conditions:

.. _Eq:_auto26:

.. math::

    \tag{78}
    \varrho c{\partial u\over\partial t} = \nabla\cdot\left( \kappa\nabla u\right)
        + f(\boldsymbol{x},t)\hbox{ in }\Omega\times (0,T],
        
        

.. _Eq:_auto27:

.. math::

    \tag{79}
    u(\boldsymbol{x},0) = I\hbox{ on }\Omega,
        
        

.. _Eq:_auto28:

.. math::

    \tag{80}
    u = u_0(t)\hbox{ on }\Gamma_D,
        
        

.. _Eq:_auto29:

.. math::

    \tag{81}
    -\kappa{\partial u\over\partial n} = g\hbox{ on }\Gamma_N,
        
        

.. _Eq:_auto30:

.. math::

    \tag{82}
    -\kappa{\partial u\over\partial n} = h_T(u-U_s)\hbox{ on }\Gamma_R{\thinspace .}
        
        

The spatial domain :math:`\Omega` has boundary :math:`\partial\Omega = \Gamma_D\cup
\Gamma_N\cup\Gamma_R`. We shall assume that all coefficients :math:`\varrho`,
:math:`c`, and :math:`\kappa` may vary in space, and :math:`f` may vary in time too.

We discretize in time by the general :math:`\theta`-rule.
For an evolution equation
:math:`\partial P/\partial t=Q(t)`, this rule reads

.. math::
        
        {P^{n+1} - P^{n}\over{{\Delta t}}} = \theta Q^{n+1} + (1-\theta )Q^{n},
        

where :math:`\theta\in[0,1]` is a weighting factor. The attractive property
of this scheme is that :math:`\theta =1` corresponds
to the Backward Euler scheme, :math:`\theta =1/2` to the Crank-Nicolson
scheme, and :math:`\theta =0` to the Forward Euler scheme.

Introducing the :math:`\theta`-rule in our PDE results in

.. _Eq:ch:diffusion:refactor:math:problem:

.. math::

    \tag{83}
    \varrho c\frac{u^{n+1}-u^n}{\Delta t}
        = \theta(\nabla\cdot\left( \kappa\nabla u^{n+1}\right) + f(\boldsymbol{x},t_{n+1})) +
        (1-\theta)(\nabla\cdot\left( \kappa\nabla u^{n}\right) + f(\boldsymbol{x},t_{n})){\thinspace .}
        
        

A Galerkin method for this initial-boundary value problem consists
of multiplying :ref:`(83) <Eq:ch:diffusion:refactor:math:problem>` by
a test function :math:`v\in\hat V`, integrate over :math:`\Omega`, and
perform integration by parts on second-order derivative terms
(here the term :math:`\nabla\cdot\left( \kappa\nabla u\right)`):

.. math::
        
        \int\limits_\Omega \biggl(
        v\varrho c\frac{u^{n+1}-u^n}{\Delta t}{\, \mathrm{d}x}
        & + \theta \kappa\nabla u^{n+1}\cdot\nabla v + vf(\boldsymbol{x},t_{n+1} \\ 
        & + (1-\theta) \kappa\nabla u^{n}\cdot\nabla v + vf(\boldsymbol{x},t_{n}\biggr)\\ 
        & - \int\limits_{\Gamma_N\cup\Gamma_R}
        \biggl(\theta \kappa\frac{\partial u^{n+1}}{\partial n}v
        + (1-\theta) \kappa\frac{\partial u^{n}}{\partial n}v\biggr){\, \mathrm{d}s}
        {\thinspace .}
        

.. _ch:diffusion:refactor:class_solver:

A class-based solver for a general diffusion problem
----------------------------------------------------

The simplest part is the solver class. It contains the data structures
and actions from previous programs, but needs to ask the problem class
about the mesh, boundary conditions, the time step, and so forth. We
therefore need to define the API of the problem class first so we know
how the solver class can ask for the mesh, for instance.

Here is an abstract problem class:

.. code-block:: python

        class DiffusionProblem(object):
            """Abstract base class for specific diffusion applications."""
        
            def solve(self, solver_class=DiffusionSolver,
                      linear_solver='direct',
                      abs_tol=1E-6, rel_tol=1E-5, max_iter=1000):
                """Solve the PDE problem for the primary unknown."""
                self.solver = solver_class(self)
                iterative_solver = KrylovSolver('gmres', 'ilu')
                prm = iterative_solver.parameters
                prm['absolute_tolerance'] = abs_tol
                prm['relative_tolerance'] = rel_tol
                prm['maximum_iterations'] = max_iter
                prm['nonzero_initial_guess'] = True  # Use u (last sol.)
                return self.solver.solve()
        
            def flux(self):
                """Compute and return flux -p*grad(u)."""
                mesh = self.mesh()
                degree = self.solution().ufl_element().degree()
                V_g = VectorFunctionSpace(mesh, 'P', degree)
                self.flux_u = project(-self.p*grad(self.u), V_g)
                self.flux_u.rename('flux(u)', 'continuous flux field')
                return self.flux_u
        
            def mesh_degree(self):
                """Return mesh, degree."""
                raise NotImplementedError('Must implement mesh')
        
            def I(self):
                """Return initial condition."""
                return Constant(0.0)
        
            def p_coeff(self):
                return Constant(1.0)
        
            def f_rhs(self):
                return Constant(0.0)
        
            def time_step(self, t):
                raise NotImplentedError('Must implement time_step')
        
            def end_step(self):
                raise NotImplentedError('Must implement end_time')
        
            def solution(self):
                return self.solver.u
        
            def user_action(self, t, u):
                """Post process solution u at time t."""
                pass
        
            def Dirichlet_conditions(self, t):
                """Return either an Expression (for the entire boundary) or
                a list of (value,boundary_parts,index) triplets."""
                return []
        
            def Neumann_conditions(self):
                """Return list of (g,ds(n)) pairs."""
                return []
        
            def Robin_conditions(self):
                """Return list of (r,s,ds(n)) triplets."""
                return []
        
            def update_expressions(self, t):
                """Update all expressions to current time t."""

The meaning of the different methods in this class will be evident as
we present specific examples on implementations.

The idea now is that different problems are implemented as different
subclasses of ``DiffusionProblem``. The ``solve`` and ``flux`` methods are general
and can be inherited, while the rest of the methods must be
implemented in the subclass.

As a simple example, consider the test problem where we have a
manufactured solution :math:`u=1+x^2 + \alpha y^2 + \beta t` on
a uniform mesh over the unit square and Dirichlet conditions
on the entire boundary. Suppose we have :math:`\Delta t=0.3` and
want to simulate for :math:`t\in [0,0.9]`. A problem class is then

.. code-block:: python

        class TestProblemExact(DiffusionProblem):
            def __init__(self, Nx, Ny):
                self.mesh = UnitSquareMesh(Nx, Ny)
                alpha = 3; beta = 1.2
                self.u0 = Expression(
                    '1 + x[0]*x[0] + alpha*x[1]*x[1] + beta*t',
                    alpha=alpha, beta=beta, t=0)
                self.f = Constant(beta - 2 - 2*alpha)
            def time_step(self, t):
                return 0.3
            def end_time(self):
                return 0.9
            def mesh_degree(self):
                return self.mesh, 1
            def I(self):
                """Return initial condition."""
                return self.u0
            def f_rhs(self):
                return self.f
            def Dirichlet_conditions(self, t):
                self.u0.t = t
                return self.u0
            def user_action(self, t, u):
                """Post process solution u at time t."""
                u_e = interpolate(self.u0, u.function_space())
                error = np.abs(u_e.vector().array() -
                               u.vector().array()).max()
                print('error at %g: %g' % (t, error))
                assert error < 2E-15, 'max_error: %g' % error

The problem is now solved by

.. code-block:: python

        problem = TestProblemExact(Nx=2, Ny=2)
        problem.solve(linear_solver='direct')
        u = problem.solution()

The solver class will call the ``user_action`` function at every time level,
and this function will assert that we recover the solution to machine precision
(note that if we change the degree of the elements, or increase the
mesh size, we need a less restrict tolerance!).

The solver class, here based on the algorithm in the section :ref:`ch:diffusion:opt:noassembly`, can be coded as follows:

.. code-block:: python

        class DiffusionSolver(object):
            def __init__(self, problem):
                """
                Compute mesh and set up time-independent part of
                the variational formulation.
                """
                self.problem = problem
                self.mesh, degree = problem.mesh_degree()
                self.V = V = FunctionSpace(self.mesh, 'P', degree)
        
                # Initial condition
                if hasattr(problem, 'I_project'):
                    I_project = getattr(problem, 'I_project')
                else:
                    I_project = False
                self.u_1 = project(problem.I(), V) if I_project \ 
                           else interpolate(problem.I(), V)
                self.u_1.rename('u', 'initial condition')
                problem.user_action(0, self.u_1)
        
                # Define variational problem (except for the f term)
                u = TrialFunction(V)
                v = TestFunction(V)
                p = problem.p_coeff()
                self.p = p  # store for flux computations
                self.f = problem.f_rhs()  # used in step()
                # f is handled in the time loop by interpolation and M matrix
        
                a_M = u*v*dx
                a_K = dot(p*grad(u), grad(v))*dx
                a_K += sum([r*u*v*ds_
                            for r, s, ds_ in problem.Robin_conditions()])
                self.M = assemble(a_M)
                self.K = assemble(a_K)
        
                # Must initialize L if boundary conditions have empty lists
                L = Constant(0)*v*dx
                L -= sum([g*v*ds_
                          for g, ds_ in problem.Neumann_conditions()])
                L -= sum([r*s*v*ds_
                          for r, s, ds_ in problem.Robin_conditions()])
                # If Robin or Neumann conditions depend on time, they have to
                # be assembled in the time loop!
                self.b_surface_int = assemble(L)
        
                self.u = Function(V)   # the unknown at a new time level
                self.u.rename('u', 'solution')
                self.T = problem.end_time()
        
            def step(self, t, linear_solver='direct',
                     abs_tol=1E-6, rel_tol=1E-5, max_iter=1000):
                """Advance solution one time step."""
                # Find new Dirichlet conditions at this time step
                Dirichlet_cond = self.problem.Dirichlet_conditions(t)
                if isinstance(Dirichlet_cond, Expression):
                    # Just one Expression for Dirichlet conditions on
                    # the entire boundary
                    self.bcs = [DirichletBC(
                        self.V, Dirichlet_cond,
                        lambda x, on_boundary: on_boundary)]
                else:
                    # Boundary SubDomain markers
                    self.bcs = [
                        DirichletBC(self.V, value, boundaries, index)
                        for value, boundaries, index
                        in Dirichlet_cond]
        
                # Update A
                self.dt = self.problem.time_step(t)
                A = self.M + self.dt*self.K
        
                # Update right-hand side
                f_k = interpolate(self.f, self.V)
                F_k = f_k.vector()
                b = self.M*self.u_1.vector() + self.dt*self.M*F_k + \ 
                    self.dt*self.b_surface_int
        
                # Solve linear system
                [bc.apply(A, b) for bc in self.bcs]
                if linear_solver == 'direct':
                    solve(A, self.u.vector(), b)
                else:
                    solver = KrylovSolver('gmres', 'ilu')
                    solver.solve(A, self.u.vector(), b)
        
            def solve(self):
                """Run time loop."""
                self.dt = self.problem.time_step(0)
                t = self.dt
                while t <= self.T:
                    self.step(t)
                    self.problem.user_action(t, self.u)
                    t += self.dt
                    self.u_1.assign(self.u)

 * Think about Crank-Nicolson as subclass!

 * Some simple diffusion problems with varying :math:`\Delta t`,
   focus on a flux at a part of the boundary, etc. Can also be exercises.

.. --- begin exercise ---

Exercise 5: Implement second-order schemes in time
--------------------------------------------------

A backward difference of accuracy :math:`\mathcal{O}(\Delta t^2)` involves
three time levels:

.. math::
         \frac{\partial}{\partial t}u(x, y, t_{n+1}) \approx
        \frac{u^{n+1} - 4u^n + u^{n-1}}{2\Delta t}{\thinspace .}

Make a solver based on this scheme. For the first time step, use the
two-level
Backward Euler method. The implementation should also offer the Backward Euler
method. In addition, implement the Crank-Nicolson method where you solve

.. math::
         \frac{\partial u}{\partial t} = G(u)

by

.. math::
         \frac{u^{n+1}-u^n}{\Delta t} = \frac{1}{2}(G(u^{n+1}) + G(u^n)){\thinspace .}

This method also has a truncation error of order :math:`\Delta t^2`.
[**hpl 21**: Find some good test problems for comparing the performance of the schemes.]

.. --- end exercise ---

.. _ftut:timedep:diffusion2:sin:

A physical example
------------------

.. index:: ft11_sin_daD.py

With the basic programming techniques for time-dependent problems from
the sections :ref:`ch:diffusion:opt:noassembly` and
:ref:`ftut:timedep:diffusion1:impl` we are ready to attack more
physically realistic examples.  The next example concerns the
question: How is the temperature in the ground affected by day and
night variations at the earth's surface?  We consider some box-shaped
domain :math:`\Omega` in :math:`d` dimensions with coordinates
:math:`x_0,\ldots,x_{d-1}` (the problem is meaningful in 1D, 2D, and 3D).
At the top of the domain, :math:`x_{0}=0`, we have an oscillating
temperature

.. math::
        
        T_0(t) = T_R + T_A\sin (\omega t),
        

where :math:`T_R` is some reference temperature, :math:`T_A` is the amplitude of
the temperature variations at the surface, and :math:`\omega` is the
frequency of the temperature oscillations.  At all other boundaries we
assume that the temperature does not change anymore when we move away
from the boundary, i.e., the normal derivative is zero.  Initially,
the temperature can be taken as :math:`T_R` everywhere.  The heat
conductivity properties of the soil in the ground may vary with space
so we introduce a variable coefficient :math:`\kappa` reflecting this
property.  Figure :ref:`ftut:timedep:diffusion2:sin:fig1` shows a sketch
of the problem, with a small region where the heat conductivity is
much lower.  [**hpl 22**: All parameters :math:`\varrho`, :math:`c`, and :math:`\kappa` are different!]

.. _ftut:timedep:diffusion2:sin:fig1:

.. figure:: daynight.png
   :width: 480

   *Sketch of a (2D) problem involving heating and cooling of the ground due to an oscillating surface temperature*

The initial-boundary value problem for this problem reads

.. _Eq:_auto31:

.. math::

    \tag{84}
    \varrho c{\partial T\over\partial t} = \nabla\cdot\left( \kappa\nabla T\right)\hbox{ in }\Omega\times (0,t_{\hbox{stop}}],
        
        

.. _Eq:_auto32:

.. math::

    \tag{85}
    T = T_0(t)\hbox{ on }\Gamma_0,
        
        

.. _Eq:_auto33:

.. math::

    \tag{86}
    {\partial T\over\partial n} = 0\hbox{ on }\partial\Omega\backslash\Gamma_0,
        
        

.. _Eq:_auto34:

.. math::

    \tag{87}
    T = T_R\hbox{ at }t =0{\thinspace .}
        
        

Here, :math:`\varrho` is the density of the soil, :math:`c` is the
heat capacity, :math:`\kappa` is the thermal conductivity
(heat conduction coefficient)
in the soil, and :math:`\Gamma_0` is the surface boundary :math:`x_{0}=0`.

We use a :math:`\theta`-scheme in time, i.e., the evolution equation
:math:`\partial P/\partial t=Q(t)` is discretized as

.. math::
        
        {P^k - P^{k-1}\over{{\Delta t}}} = \theta Q^k + (1-\theta )Q^{k-1},
        

where :math:`\theta\in[0,1]` is a weighting factor: :math:`\theta =1` corresponds
to the backward difference scheme, :math:`\theta =1/2` to the Crank-Nicolson
scheme, and :math:`\theta =0` to a forward difference scheme.
The :math:`\theta`-scheme applied to our PDE results in

.. math::
        
        \varrho c{T^k-T^{k-1}\over{{\Delta t}}} =
        \theta \nabla\cdot\left( \kappa\nabla T^k\right)
        + (1-\theta) \nabla\cdot\left( k\nabla T^{k-1}\right){\thinspace .}
        

Bringing this time-discrete PDE into weak form follows the technique shown
many times earlier in this tutorial. In the standard notation
:math:`a(T,v)=L(v)` the weak form has

.. _Eq:_auto35:

.. math::

    \tag{88}
    a(T,v) = \int_\Omega
        \left( \varrho c Tv + \theta{{\Delta t}} \kappa\nabla T\cdot \nabla v\right) {\, \mathrm{d}x},
        
        

.. _Eq:_auto36:

.. math::

    \tag{89}
    L(v) = \int_\Omega \left( \varrho c T^{k-1}v - (1-\theta){{\Delta t}}
        \kappa\nabla T^{k-1}\cdot \nabla v\right) {\, \mathrm{d}x}{\thinspace .}
        
        

Observe that boundary integrals vanish because of the Neumann boundary
conditions.

.. index:: heterogeneous medium

.. index:: multi-material domain

The size of a 3D box is taken as :math:`W\times W\times D`, where :math:`D` is
the depth and :math:`W=D/2` is the width.
We give the degree of the basis functions at the command line, then :math:`D`,
and then the divisions of the domain in the various directions.
To make a box, rectangle, or interval of arbitrary (not unit) size,
we have the classes ``BoxMesh``, ``RectangleMesh``, and
``IntervalMesh`` at our disposal. The mesh and the function space
can be created by the following code:

.. code-block:: python

        degree = int(sys.argv[1])
        D = float(sys.argv[2])
        W = D/2.0
        divisions = [int(arg) for arg in sys.argv[3:]]
        d = len(divisions)  # no of space dimensions
        if d == 1:
            mesh = IntervalMesh(divisions[0], -D, 0)
        elif d == 2:
            mesh = RectangleMesh(-W/2, -D, W/2, 0, divisions[0], divisions[1])
        elif d == 3:
            mesh = BoxMesh(-W/2, -W/2, -D, W/2, W/2, 0,
                       divisions[0], divisions[1], divisions[2])
        V = FunctionSpace(mesh, 'P', degree)

The ``RectangleMesh`` and ``BoxMesh`` objects are defined by the coordinates
of the "minimum" and "maximum" corners.

Setting Dirichlet conditions at the upper boundary can be done by

.. code-block:: python

        T_R = 0; T_A = 1.0; omega = 2*pi
        
        T_0 = Expression('T_R + T_A*sin(omega*t)',
                         T_R=T_R, T_A=T_A, omega=omega, t=0.0)
        
        def surface(x, on_boundary):
            return on_boundary and abs(x[d-1]) < 1E-14
        
        bc = DirichletBC(V, T_0, surface)

The :math:`\kappa` function can be defined as a constant :math:`\kappa_1` inside
the particular rectangular area with a special soil composition, as
indicated in Figure :ref:`ftut:timedep:diffusion2:sin:fig1`. Outside
this area :math:`\kappa` is a constant :math:`\kappa_0`.
The domain of the rectangular area is taken as

.. math::
        
        [-W/4, W/4]\times [-W/4, W/4]\times [-D/2, -D/2 + D/4]
        

in 3D, with :math:`[-W/4, W/4]\times [-D/2, -D/2 + D/4]` in 2D and
:math:`[-D/2, -D/2 + D/4]` in 1D.
Since we need some testing in the definition of the :math:`\kappa(\boldsymbol{x})`
function, the most straightforward approach is to define a subclass
of ``Expression``, where we can use a full Python method instead of
just a C++ string formula for specifying a function.
The method that defines the function is called ``eval``:

.. code-block:: python

        class Kappa(Expression):
            def eval(self, value, x):
                """x: spatial point, value[0]: function value."""
                d = len(x)  # no of space dimensions
                material = 0  # 0: outside, 1: inside
                if d == 1:
                    if -D/2. < x[d-1] < -D/2. + D/4.:
                        material = 1
                elif d == 2:
                    if -D/2. < x[d-1] < -D/2. + D/4. and \ 
                       -W/4. < x[0] < W/4.:
                        material = 1
                elif d == 3:
                    if -D/2. < x[d-1] < -D/2. + D/4. and \ 
                       -W/4. < x[0] < W/4. and -W/4. < x[1] < W/4.:
                        material = 1
                value[0] = kappa_0 if material == 0 else kappa_1

The ``eval`` method gives great flexibility in defining functions,
but a downside is that C++ calls up ``eval`` in Python for
each point ``x``, which is a slow process, and the number of calls
is proportional to the number of numerical
integration points in the mesh (about
the number of degrees of freedom).
Function expressions in terms of strings are compiled to efficient
C++ functions, being called from C++, so we should try to express functions
as string expressions if possible. (The ``eval`` method can also be
defined through C++ code, but this is much
more complicated and not covered here.)
Using inline if-tests in C++, we can make string expressions for
:math:`\kappa`, here stored in a Python dictionary so that ``kappa_str[d-1]``
is the proper test in a :math:`d` dimensional problem:

.. code-block:: python

        kappa_str = {}
        kappa_str[1] = 'x[0] > -D/2 && x[0] < -D/2 + D/4 ? kappa_1 : kappa_0'
        kappa_str[2] = 'x[0] > -W/4 && x[0] < W/4 '\ 
                       '&& x[1] > -D/2 && x[1] < -D/2 + D/4 ? '\ 
                       'kappa_1 : kappa_0'
        kappa_str[3] = 'x[0] > -W/4 && x[0] < W/4 '\ 
                       'x[1] > -W/4 && x[1] < W/4 '\ 
                       '&& x[2] > -D/2 && x[2] < -D/2 + D/4 ?'\ 
                       'kappa_1 : kappa_0'
        
        kappa = Expression(kappa_str[d],
                           D=D, W=W, kappa_0=kappa_0, kappa_1=kappa_1)

Let ``T`` denote the unknown spatial temperature function at the
current time level, and let ``T_1`` be the corresponding function
at one earlier time level.
We are now ready to define the initial condition and the
``a`` and ``L`` forms of our problem:

.. code-block:: python

        T_prev = interpolate(Constant(T_R), V)
        
        rho = 1
        c = 1
        period = 2*pi/omega
        t_stop = 5*period
        dt = period/20  # 20 time steps per period
        theta = 1
        
        T = TrialFunction(V)
        v = TestFunction(V)
        f = Constant(0)
        a = rho*c*T*v*dx + theta*dt*kappa*\ 
            dot(grad(T), grad(v))*dx
        L = (rho*c*T_prev*v + dt*f*v -
             (1-theta)*dt*kappa*dot(grad(T_1), grad(v)))*dx
        
        A = assemble(a)
        b = None  # variable used for memory savings in assemble calls
        T = Function(V)   # unknown at the current time level

We could, alternatively, break ``a`` and ``L`` up in subexpressions
and assemble a mass matrix and stiffness matrix, as exemplified in
the section :ref:`ch:diffusion:opt:noassembly`, to avoid
assembly of ``b`` at every time level. This modification is
straightforward and left as an exercise. The speed-up can be significant
in 3D problems.

The time loop is very similar to what we have displayed in
the section :ref:`ftut:timedep:diffusion1:impl`:

.. code-block:: python

        T = Function(V)   # unknown at the current time level
        t = dt
        while t <= t_stop:
            b = assemble(L, tensor=b)
            T_0.t = t
            bc.apply(A, b)
            solve(A, T.vector(), b)
            # visualization statements
            t += dt
            T_prev.assign(T)

The complete code in ``ft11_sin_daD.py`` contains several
statements related to visualization and animation of the solution, both as a
finite element field (``plot`` calls) and as a curve in the
vertical direction. The code also plots the exact analytical solution,

.. math::
        
        T(x,t) = T_R + T_Ae^{ax}\sin (\omega t + ax),\quad a =\sqrt{\omega\varrho c\over 2\kappa},
        

which is valid when :math:`\kappa = \kappa_0=\kappa_1`.

Implementing this analytical solution as a Python function
taking scalars and numpy arrays as arguments requires a word of caution.
A straightforward function like

.. code-block:: python

        def T_exact(x):
            a = sqrt(omega*rho*c/(2*kappa_0))
            return T_R + T_A*exp(a*x)*sin(omega*t + a*x)

will not work and result in an error message from UFL. The reason is that
the names ``exp`` and ``sin`` are those imported
by the ``from fenics import *`` statement, and these names
come from UFL and are aimed at being used in variational forms.
In the ``T_exact`` function where ``x`` may be a scalar or a
``numpy`` array, we therefore need to explicitly specify
``np.exp`` and ``np.sin`` (if ``numpy`` is imported under the common name ``np``):

.. code-block:: python

        def T_exact(x):
            a = sqrt(omega*rho*c/(2*kappa_0))
            return T_R + T_A*np.exp(a*x)*np.sin(omega*t + a*x)

The complete code is found in the file The reader is encouraged to
play around with the code and test out various parameter sets:

 1. :math:`T_R=0`, :math:`T_A=1`, :math:`\kappa_0 = \kappa_1=0.2`, :math:`\varrho = c = 1`, :math:`\omega = 2\pi`

 2. :math:`T_R=0`, :math:`T_A=1`, :math:`\kappa_0=0.2`, :math:`\kappa_1=0.01`, :math:`\varrho = c = 1`, :math:`\omega = 2\pi`

 3. :math:`T_R=0`, :math:`T_A=1`, :math:`\kappa_0=0.2`, :math:`\kappa_1=0.001`, :math:`\varrho = c = 1`, :math:`\omega = 2\pi`

 4. :math:`T_R=10` C, :math:`T_A=10` C, :math:`\kappa_0= 2.3 \hbox{ K}^{-1}\hbox{Ns}^{-1}`,
    :math:`\kappa_1= 100 \hbox{ K}^{-1}\hbox{Ns}^{-1}`,
    :math:`\varrho = 1500\hbox{ kg/m}^3`,
    :math:`c = 1480\hbox{ Nm}\cdot\hbox{kg}^{-1}\hbox{K}^{-1}`,
    :math:`\omega = 2\pi/24` 1/h  :math:`= 7.27\cdot 10^{-5}` 1/s, :math:`D=1.5` m

 5. As above, but :math:`\kappa_0= 12.3 \hbox{ K}^{-1}\hbox{Ns}^{-1}` and
    :math:`\kappa_1= 10^4 \hbox{ K}^{-1}\hbox{Ns}^{-1}`

Data set number 4 is relevant for real temperature variations in
the ground (not necessarily the large value of :math:`\kappa_1`),
while data set number 5
exaggerates the effect of a large heat conduction contrast so that
it becomes clearly visible in an animation.

.. kappa_1 = 1.1, varrho_1 = 1200, c_1 = 1000 => 9.17E-7

.. kappa_0 = 2.3, varrho_0 = 1800, c_0 = 1500 => 8.52E-7

