.. !split

.. _ch:diffusion:

The diffusion solver revisited
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

.. Pointers backward...what is needed to be recaptured?

This chapter is devoted to solving diffusion problems of the
form

.. math::
         -\nabla\cdot(p\nabla u) = f,

with initial condition :math:`u=I` and various types of Dirichlet, Neumann,
and Robin conditions.
A very simple FEniCS program for a diffusion equation was introduced
in the section :ref:`ch:fundamentals:diffusion`, but here we shall
discuss important algorithmic optimization strategies, how to store
and animate time-dependent data, and how to construct more advanced
solvers in terms of classes.

.. _ch:diffusion:opt:

Optimization of algorithms and implementations
==============================================

.. _ch:diffusion:opt:bassembly:

Avoiding some assembly
----------------------

The time-dependent diffusion equation gives rise to a linear system
:math:`AU=b` at each time level, where the coefficient matrix :math:`A` is constant,
but :math:`b` depends on :math:`u` at the previous time level. To increase the
computational efficiency, we can therefore assemble :math:`A` once and
for all before the time loop. To be able to do this, we need to
explicitly create matrices and vectors as demonstrated in the section :ref:`ch:poisson0:linalg`.

Let us express the solution procedure in algorithmic form,
writing :math:`u` for the unknown spatial function at the new time level
(:math:`u^k`) and :math:`u_1` for the spatial solution at one earlier time level
(:math:`u^{k-1}`):

 * define Dirichlet boundary condition (:math:`u_0`, Dirichlet boundary, etc.)

 * let :math:`u_1` interpolate :math:`I` or be the projection of :math:`I`

 * define :math:`a` and :math:`L`

 * assemble matrix :math:`A` from :math:`a`

 * set some stopping time :math:`T`

 * :math:`t={{\Delta t}}`

 * while :math:`t\leq T`

   * assemble vector :math:`b` from :math:`L`

   * apply essential boundary conditions

   * solve :math:`AU=b` for :math:`U` and store in :math:`u`

   * :math:`t\leftarrow t + {{\Delta t}}`

   * :math:`u_1 \leftarrow u` (be ready for next step)

The code features the following changes from the ``ft02_diffusion_flat1.py``
program. We may define :math:`a` and :math:`L` from :math:`F` as before, or do it explicitly:

.. code-block:: python

        a = u*v*dx + dt*dot(grad(u), grad(v))*dx
        L = (u_1 + dt*f)*v*dx

Prior to the time loop we assemble the coefficient matrix :math:`A` once and
for all:

.. index:: assemble

.. code-block:: python

        A = assemble(a)   # assemble only once, before the time stepping

At each time level we can do a similar ``b = assemble(L)``. With this
construction, a new vector for ``b`` is allocated in memory in every
pass of the time loop.  It would be much more memory friendly to reuse
the storage of the ``b`` we already have.  This is easily accomplished
by

.. code-block:: python

        b = assemble(L, tensor=b)

That is, we send in our previous ``b``, which is then filled with new values
and returned from ``assemble``. Now there will be only a single
memory allocation of the right-hand side vector. Before the time loop
we set ``b = None`` such that ``b`` is defined in the first call to
``assemble``.

The necessary changes inside the time loop go as follows:

.. code-block:: python

        while t <= T:
            b = assemble(L, tensor=b)
            u0.t = t
            bc.apply(A, b)
            solve(A, u.vector(), b)

The update ``u0.t = t`` is of key importance as ``bc.apply(A, b)`` will
look up the ``u0`` object to find the proper values in the Dirichlet condition,
and these change with time in our test problem!

The complete program is found in the file
`ft09_diffusion_flat2.py <https://github.com/hplgit/fenics-tutorial/blob/master/src/ft09_diffusion_flat2.py>`__.

.. _ch:diffusion:opt:noassembly:

Avoiding all assembly
---------------------

.. index::
   single: assembly, increasing efficiency

The purpose of this section is to present a technique for speeding up
FEniCS simulators for time-dependent problems where it is possible to
perform all assembly operations prior to the time loop.  There are two
costly operations in the time loop: assembly of the right-hand side
:math:`b` and solution of the linear system via the ``solve`` call. The
assembly process involves work proportional to the number of degrees
of freedom :math:`N`, while the solve operation has a work estimate of
:math:`\mathcal{O}( N^{\alpha})`, for some :math:`\alpha\geq 1`.  Typically,
:math:`\alpha\in [1,2]`.  As :math:`N\rightarrow\infty`, the solve operation will
dominate for :math:`\alpha>1`, but for the values of :math:`N` typically used on
smaller computers, the assembly step may still represent a
considerable part of the total work at each time level. Avoiding
repeated assembly can therefore contribute to a significant speed-up
of a finite element code in time-dependent problems.

Deriving recursive linear systems
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To see how repeated assembly can be avoided, we look at the :math:`L(v)`
form in  (:ref:`ch:diffusion0:pde1:L`),
which in general varies with
time through :math:`u^{k-1}`, :math:`f^k`, and possibly also with :math:`{\Delta t}`
if the time step is adjusted during the simulation.
The technique for avoiding repeated assembly consists in
expanding the finite element functions in sums over the basis functions
:math:`\phi_i`, as explained
in the section :ref:`ch:poisson0:linalg`, to identify matrix-vector
products that build up the complete system. We have
:math:`u^{k-1}=\sum_{j=1}^NU^{k-1}_j\phi_j`, and we can expand :math:`f^k` as
:math:`f^{k}=\sum_{j=1}^NF^{k}_j\phi_j`. Inserting these expressions in :math:`L(v)`
and using
:math:`v=\hat\phi_i` result in

.. math::
        
        \int_\Omega \left(u^{k-1} + {{\Delta t}}f^k\right)v {\, \mathrm{d}x} &=
        \int_\Omega \left(\sum_{j=1}^N U^{k-1}_j\phi_j + {{\Delta t}}\sum_{j=1}^N F^{k}_j\phi_j\right)\hat\phi_i {\, \mathrm{d}x},\\ 
        &=\sum_{j=1}^N\left(\int_\Omega \hat\phi_i\phi_j {\, \mathrm{d}x}\right)U^{k-1}_j
         + {{\Delta t}}\sum_{j=1}^N\left(\int_\Omega \hat\phi_i\phi_j {\, \mathrm{d}x}\right)F^{k}_j{\thinspace .}
        

Introducing :math:`M_{ij} = \int_\Omega \hat\phi_i\phi_j {\, \mathrm{d}x}`, we see that
the last expression can be written

.. math::
        
        \sum_{j=1}^NM_{ij}U^{k-1}_j + {{\Delta t}} \sum_{j=1}^NM_{ij}F^{k}_j,
        

which is nothing but two matrix-vector products,

.. math::
        
        MU^{k-1} + {{\Delta t}} MF^k,
        

if :math:`M` is the matrix with entries :math:`M_{ij}`,

.. math::
        
        U^{k-1}=(U^{k-1}_1,\ldots,U^{k-1}_N)^T,
        

and

.. math::
        
        F^k=(F^{k}_1,\ldots,F^{k}_N)^T{\thinspace .}
        

We have immediate access to :math:`U^{k-1}` in the program since that is the
vector in the ``u_1`` function. The :math:`F^k` vector can easily be computed
by interpolating the prescribed :math:`f` function (at each time level if
:math:`f` varies with time). Given :math:`M`, :math:`U^{k-1}`, and :math:`F^k`, the right-hand
side :math:`b` can be calculated as

.. math::
        
        b = MU^{k-1} + {{\Delta t}} MF^k {\thinspace .}
        

That is, no assembly is necessary to compute :math:`b`.

The coefficient matrix :math:`A` can also be split into two terms.  We
insert :math:`v=\hat\phi_i` and :math:`u^k = \sum_{j=1}^N U^k_j\phi_j` in the
expression (:ref:`ch:diffusion0:pde1:a`) to get

.. math::
        
        \sum_{j=1}^N \left(\int_\Omega \hat\phi_i\phi_j {\, \mathrm{d}x}\right)U^k_j + {{\Delta t}}
        \sum_{j=1}^N \left(\int_\Omega \nabla\hat\phi_i\cdot\nabla\phi_j {\, \mathrm{d}x}\right)U^k_j,
        

which can be written as a sum of matrix-vector products,

.. math::
        
        MU^k + {{\Delta t}} KU^k = (M + {{\Delta t}} K)U^k,
        

if we identify the matrix :math:`M` with entries :math:`M_{ij}` as above and
the matrix :math:`K` with entries

.. _Eq:_auto15:

.. math::

    \tag{31}
    K_{ij} = \int_\Omega \nabla\hat\phi_i\cdot\nabla\phi_j {\, \mathrm{d}x}{\thinspace .}
        
        

The matrix :math:`M` is often called the "mass matrix" while "stiffness
matrix" is a common nickname for :math:`K`. The associated bilinear forms
for these matrices, as we need them for the assembly process in a
FEniCS program, become

.. _Eq:ch:diffusion0:pde1:aK:

.. math::

    \tag{32}
    a_K(u,v) = \int_\Omega\nabla u\cdot\nabla v {\, \mathrm{d}x},
        
        

.. _Eq:ch:diffusion0:pde1:aM:

.. math::

    \tag{33}
    a_M(u,v) = \int_\Omega uv {\, \mathrm{d}x} {\thinspace .}
        

The linear system at each time level, written as :math:`AU^k=b`,
can now be computed by first computing :math:`M` and :math:`K`, and then forming
:math:`A=M+{{\Delta t}} K` at :math:`t=0`, while :math:`b` is computed as
:math:`b=MU^{k-1} + {{\Delta t}}MF^k` at each time level.

Implementation          (2)
~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following modifications are needed in the ``ft10_diffusion_func.py``
program from the previous section in order to implement the new
strategy of avoiding assembly at each time level:

 1. Define separate forms :math:`a_M` and :math:`a_K`

 2. Assemble :math:`a_M` to :math:`M` and :math:`a_K` to :math:`K`

 3. Compute :math:`A=M+{{\Delta t}}K`

 4. Define :math:`f` as an ``Expression``

 5. Interpolate the formula for :math:`f` to a finite element function :math:`F^k`

 6. Compute :math:`b=MU^{k-1} + {{\Delta t}}MF^k`

The relevant code segments become

.. code-block:: python

        # 1.
        a_K = dot(grad(u), grad(v))*dx
        a_M = u*v*dx
        # No need for L
        
        # 2. and 3.
        M = assemble(a_M)
        K = assemble(a_K)
        A = M + dt*K
        
        # 4.
        f = Expression('beta - 2 - 2*alpha', beta=beta, alpha=alpha)
        
        # 5. and 6.
        while t <= T:
            f_k = interpolate(f, V)
            F_k = f_k.vector()
            b = M*u_1.vector() + dt*M*F_k

We implement these modifications in a refactored version of the
program ``ft09_diffusion_flat2.py``, where the solver is a function
as explained in the section :ref:`ch:poisson0:impl2` rather than a
flat program. The domain can also more flexibly be a 1D, 2D, or 3D
interval, rectangle, or box.
The new ``solver_minimize_assembly`` function resides in
`ft10_diffusion_func.py <ft10_diffusion_func.py>`__.

.. code-block:: python

        def solver_minimize_assembly(
            alpha, f, u0, I, dt, T, divisions, L, degree=1,
            user_action=None, I_project=False):
            """
            Solve diffusion PDE u_t = div(alpha*grad(u)) + f on
            an interval, rectangle, or box with side lengths in L.
            divisions reflect cell partitioning, degree the element
            degree. user_action(t, u, timetesp) is a callback function
            where the calling code can process the solution.
            If I_project is false, use interpolation for the initial
            condition.
            """
            # Create mesh and define function space
            d = len(L)  # No of space dimensions
            if d == 1:
                mesh = IntervalMesh(divisions[0], 0, L[0])
            elif d == 2:
                mesh = RectangleMesh(Point(0,0), Point(*L), *divisions)
            elif d == 3:
                mesh = BoxMesh(Point(0,0), Point(*L), *divisions)
            V = FunctionSpace(mesh, 'P', degree)
        
            class Boundary(SubDomain):  # define the Dirichlet boundary
                def inside(self, x, on_boundary):
                    return on_boundary
        
            boundary = Boundary()
            bc = DirichletBC(V, u0, boundary)
        
            # Initial condition
            u_1 = project(I, V) if I_project else interpolate(I, V)
            if user_action is not None:
                user_action(0, u_1, 0)
        
            # Define variational problem
            u = TrialFunction(V)
            v = TestFunction(V)
            a_M = u*v*dx
            a_K = alpha*dot(grad(u), grad(v))*dx
        
            M = assemble(a_M)
            K = assemble(a_K)
            A = M + dt*K
            # Compute solution
            u = Function(V)   # the unknown at a new time level
        
            b_assemble = 0  # CPU time for assembling all the b vectors
            timestep = 1
            t = dt
            while t <= T:
                t0 = time.clock()
                f_k = interpolate(f, V)
                F_k = f_k.vector()
                b = M*u_1.vector() + dt*M*F_k
                b_assemble += time.clock() - t0
                try:
                    u0.t = t
                    f.t = t
                except AttributeError:
                    pass  # ok if no t attribute in u0
                bc.apply(A, b)
                solve(A, u.vector(), b)
        
                if user_action is not None:
                    user_action(t, u, timestep)
                t += dt
                timestep += 1
                u_1.assign(u)
            #info('total time for assembly of right-hand side: %.2f' % b_assemble)
        
        def application_animate(model_problem):
            import numpy as np, time
        
            if model_problem == 1:
                # Test problem with exact solution at the nodes also for P1 elements
                alpha = 3; beta = 1.2
                u0 = Expression('1 + x[0]*x[0] + alpha*x[1]*x[1] + beta*t',
                                alpha=alpha, beta=beta, t=0)
                f = Constant(beta - 2 - 2*alpha)
                I = u0
                dt = 0.05; T = 2
                Nx = Ny = 20
                u_range = [1, 1+1+alpha*1+beta*T]
            elif model_problem == 2:
                # Diffusion of a sin^8 spike
                I = Expression('pow(sin(pi*x[0])*sin(pi*x[1]), 8)')
                f = Constant(0)
                u0 = Constant(0)
                dt = 0.0005; T = 20*dt
                Nx = Ny = 60
                u_range = [0, 1]
        
            vtkfile = File('diffusion.pvd')
        
            def animate(t, u, timestep):
                global p
                if t == 0:
                    p = plot(u, title='u',
                             range_min=float(u_range[0]),  # must be float
                             range_max=float(u_range[1]))  # must be float
                else:
                    p.plot(u)
                print('t=%g' % t)
                time.sleep(0.5)
                vtkfile << (u, float(t))  # store time-dep Function
        
            solver_minimize_assembly(
                1.0, f, u0, I, dt, T, (Nx, Ny), (1, 1), degree=2,
                user_action=animate, I_project=False)

A special feature in this program is the ``user_action`` callback function:
at every time level, the solution is sent to ``user_action``, which is
some function provided by the user where the solution can be processed, e.g.,
stored, analyzed, or visualized. In a unit test for the test example without
numerical approximation errors, we can write a call to the solver function,

.. code-block:: python

        def test_solver():
            import numpy as np
            alpha = 3; beta = 1.2
            u0 = Expression('1 + x[0]*x[0] + alpha*x[1]*x[1] + beta*t',
                            alpha=alpha, beta=beta, t=0)
            f = Constant(beta - 2 - 2*alpha)
            dt = 0.3; T = 1.9
            u0.t = 0
        
            # Define assert_error callback function
            ...
        
            solver_minimize_assembly(
                f, u0, u0, dt, T, Nx, Ny, degree,
                user_action=assert_error, I_project=False)

The ``user_action`` function ``assert_error`` asserts equality of the
exact and numerical solution at every time level:

.. code-block:: python

        def assert_error(t, u, timestep):
            u_e = interpolate(u0, u.function_space())
            error= np.abs(u_e.vector().array() -
            	          u.vector().array()).max()
            tol = 2E-12
            assert error < tol, 'error: %g' % error

One can also use the user action callback function to visualize
the solution:

.. code-block:: python

        def assert_error(t, u, timestep):
            global p
            if t == 0:
                p = plot(u, title='u',
        	         # Fix the color scale
                         range_min=float(u_range[0]),  # must be float
                         range_max=float(u_range[1]))  # must be float
            else:
                p.plot(u)
            print('t=%g' % t)
            time.sleep(0.5)

It is key to fix the color scale to get a meaningful animation.

A complete function calling up ``solver_minimize_assembly`` for
animating the solution in two test problems is found in the
function ``application_animate`` in
`ft10_diffusion_func.py <ft10_diffusion_func.py>`__.

Note that ``p``, which must survive between subsequent calls to the
callback function, has to be declared as a global variable. This is
necessary when the user action function is a *closure* (function
inside function, "remembering" variables in the parent function) and
``p`` is changed inside the closure.  Some programmers find it more
convenient to let the user action be class instead, where ``p`` can be
an attribute. Later examples employ the class design.

The function ``solver_vs_solver_minimize_assembly`` measures the
impact of the optimization technique in this section compared to
the simpler technique from the previous section where we need
to assemble the right-hand side of the linear system at every time
level. The impact is not huge, just a speed-up factor of 1-2 for 2D problems
and around 2 for 3D problems. Still, this may be a value factor when
you run a code a lot.

.. _ch:diffusion:welding:

A welding example with post processing and animation
====================================================

The focus so far in this tutorial has been on producing the solution
of PDE problems. For scientific investigations, the primary work is
often with post processing results: computing quantities derived from
the solution and inspecting these with visualization or data analysis tools.
This is the focus of the present section.
To ease the programming, we shall make use of a convenient tool, ``cbcpost``,
for post processing, saving data to file(s), and animating solutions.
We recommend to use
``cbcpost`` in all time-dependent FEniCS solvers, but it also has a lot
to offer in stationary problems too.

To explain the usage of ``cbcpost`` for storage and plotting, we address
a real physical application: welding of a plate, where a moving heat
source gives rise to a moving temperature field.

.. _ch:diffusion:welding:cbcpost:

Post processing data and saving to file
---------------------------------------

Installation
~~~~~~~~~~~~

The ``cbcpost`` package is not a part of the ``fenics`` package so you
will need to install it.  The simplest installation method is to use
``pip``. We recommend to install a companion package ``fenicstools`` as
well. Just run

.. code-block:: text

        sudo pip install git+https://bitbucket.org/simula_cbc/cbcpost.git
        sudo pip install git+https://github.com/mikaem/fenicstools.git

in a terminal window (skip ``sudo`` on Windows machines).
Alternatively, you can grab the source code and run ``setup.py`` the usual
way Python packages are installed from source:

.. code-block:: text

        Terminal> git clone https://bitbucket.org/simula_cbc/cbcpost.git
        Terminal> cd cbcpost
        Terminal> python setup.py install
        Terminal> cd ..
        Terminal> git clone https://github.com/mikaem/fenicstools.git
        Terminal> cd fenicstools
        Terminal> python setup.py install

Basic commands
~~~~~~~~~~~~~~

We must create a *post processor* and then specify what kind of
results we want to be stored on file and (optionally) get visualized.
Suppose we have a field with logical name ``Temperature`` that we want
to save in XDMF/HDF5 format in files in a fresh subdirectory ``Results``:

.. code-block:: python

        import cbcpost as post
        # Create post processor
        pp = post.PostProcessor(dict(casedir='Results', clean_casedir=True))
        # Specify storage of a "Temperature" field
        pp.add_field(post.SolutionField(
            'Temperature',
            dict(save=True,
                 save_as=['hdf5', 'xdmf'],
                 plot=True,
                 plot_args=dict(range_min=0.0, range_max=1.2))))

The ``plot=True`` automatically launches ``fenics.plot`` commands of
this scalar field during the simulation. The ranges of the color
scale must be given (as ``float`` variables) so that the color scale
stays fixed during the animation on the screen.

Inside the time loop, we have to feed a new solution to the post processor
to get it saved:

.. code-block:: python

        pp.update_all({'Temperature': lambda: T}, t, timestep)

Here, ``T`` is the ``Function`` object that we have solved for, ``t`` is
current time, and ``timestep`` is the corresponding time step number.

One can specify many fields to be saved (and plotted), but even more
important: ``cbcpost`` can calculate a lot of derived quantities from
the solution, such as

 * time derivatives and integrals of vector/scalar fields

 * extraction of fields over subdomains

 * slicing of fields in 3D geometries

 * averaging of fields in space or time

 * norms and point values of fields as function of time

 * user-defined post processing of fields

We refer to the online `cbcpost documentation <http://cbcpost.readthedocs.org/en/latest/index.html>`__ for further information on all the capabilities of this
package.


.. admonition:: Tip: Use ``cbcpost`` to visualize time-dependent data

   Instead of issuing your own ``plot`` commands in time-dependent
   problems, it is safer and more convenient to specify ``plot=True``
   and fix the range of the color scale, when you add fields
   to the post processor. Multiple fields will be synchronized during
   the animation.




.. _ch:diffusion:welding:problem:

Heat transfer due to a moving welding source
--------------------------------------------

Let us solve a diffusion problem taken from welding.  A moving
welding equipment acts as a moving heat source at the top of a thin
metal plate.  The question is how the heat from the equipment spreads
out in the material that is being welded. We use the standard heat
equation, treat the material as two dimensional, and do not take phase
transitions into account.  The governing PDE is then

.. math::
         \varrho c \frac{\partial u}{\partial t} = \kappa\nabla^2 u + f,

where :math:`u` is temperature, :math:`\varrho` is the density of the material,
:math:`c` is the heat capacity at constant volume, :math:`\kappa` is the heat
conduction coefficient, and :math:`f` models the heat source from the
welding equipment. The domain is :math:`\Omega = [0,L]\times [0,L]`.  An
additional major simplification is that we set :math:`u=U_s` at the
boundary, where :math:`U_s` is the temperature of the surroundings (a Robin
condition, modeling cooling at the boundary would be more accurate,
but then we should also consider cooling in the third dimension as
well).  The initial condition reads :math:`u=U_s`.

A welding source is moving and very localized in space.  The
localization can be modeled by a peak-shaped Gaussian function.  The
movement is taken to be a circle with radius :math:`R` about a point
:math:`(x_0,y_0)`. An appropriate :math:`f` is

.. math::
         f(x,y,t) = A\exp{\left(-\frac{1}{2\sigma^2}
        \left({x-(x_0 + R\cos\omega t)}\right)^2 -\frac{1}{2\sigma^2}
        \left({y-(y_0 + R\sin\omega t)}\right)^2\right)}{\thinspace .}

The parameter :math:`A` is the strength of the heat source, and :math:`\sigma` is
the "standard deviation" (i.e., a measure of the width) of the Gaussian
function.

.. _ch:diffusion:welding:scaling:

Scaling of the welding problem
------------------------------

There are 10 physical parameters in the problem: :math:`L`, :math:`\varrho`, :math:`c`,
:math:`\kappa`, :math:`A`, :math:`x_0`, :math:`y_0`, :math:`R`, :math:`\omega`, :math:`\sigma`.  Scaling can
dramatically reduce the number of parameters and also introduce new
parameters that are much easier to assign numerical values. We
therefore scale the problem. As length scale, we choose :math:`L` so the
scaled domain becomes the unit square. As time scale and
characteristic size of :math:`u`, we just introduce :math:`t_c` ad :math:`u_c`.  This
means that we introduce scaled variables

.. math::
        
        \bar x = \frac{x}{L},\quad \bar y = \frac{y}{L},\quad \bar t =\frac{t}{t_c},
        \quad\bar u = \frac{u-U_s}{u_c}{\thinspace .}
        

The scaled form of :math:`f` is naturally :math:`\bar f = f/A`, since this makes
:math:`\bar f\in (0,1]`. The arguments in the exponential function in :math:`f` can
also be scaled:

.. math::
        
        \bar f &= \exp{\left(-\frac{1}{2\sigma^2}
        \left({\bar xL -(L \bar x_0 + L\bar R\cos\omega t_c t)}\right)^2 -\frac{1}{2\sigma^2}
        \left({L \bar y-(L\bar y0 + L\bar R\sin\omega t_c t)}\right)^2\right)}\\ 
        &= \exp{\left(-\frac{1}{2}\frac{L^2}{\sigma^2}
        \left(x -(\bar x_0 + \bar R\cos\omega t_c \bar t)\right)^2 -
        \frac{1}{2}\frac{L^2}{\sigma^2}
        \left(\bar y-(\bar y0 + \bar R\sin\omega t_c \bar t)\right)^2\right)}\\ 
        &= \exp{\left(-\frac{1}{2}\beta^2
        \left((x -(\frac{1}{2} + \bar R\cos\bar t)\right)^2 -
        \left(\bar y-(\frac{1}{2} + \bar R\sin\bar t))^2\right)\right)},
        

where :math:`\beta` is a dimensionless parameter,

.. math::
         \beta = \frac{L}{\sigma},

reflecting the ratio of the domain size and the width of the heat source.
Moreover, we have restricted the rotation point to be the center point
of the domain:

.. math::
         (\bar x_0,\bar y_0) = (\frac{1}{2},\frac{1}{2}){\thinspace .}

The time scale
in diffusion problems is usually related to the "speed of the
diffusion", but in this problem it is more natural to base the time
scale on the movement of the heat source, which suggests setting
:math:`t_c = 1/\omega`.

Inserting the new scaled variables in the PDE leads to

.. math::
         \frac{\partial \bar u}{\partial\bar t} =
        \frac{\kappa}{\omega\varrho c L^2}\bar\nabla^2\bar u +
        \frac{A}{\omega u_c\varrho c}\bar f(\bar x,\bar y,\bar t){\thinspace .}

The first coefficient is a dimensionless number,

.. math::
         \gamma = \frac{\kappa}{\omega\varrho c L^2},

while the second coefficient can be used to determine :math:`u_c` by demanding
the source term to balance the time derivative term,

.. math::
         u_c = \frac{A}{\omega\varrho c}{\thinspace .}

Our aim is to have :math:`\bar u \in [0,1]`, but this :math:`u_c` do not capture
the precise magnitude of :math:`u`. However, we believe that the characteristic
size of :math:`u` is

.. math::
         u_c = \delta^{-1}\frac{A}{\omega\varrho c},

for a scaling factor :math:`\delta`. Using this :math:`u_c` gives the PDE

.. math::
         \frac{\partial \bar u}{\partial\bar t} =
        \gamma\bar\nabla^2\bar u +
        \delta\bar f(\bar x,\bar y,\bar t),

with two dimensionless variables, but :math:`\delta` is quite easily
tuned from experiments to give :math:`\bar u` a typically size of unity.

Looking at :math:`\gamma`, we see that it can be written

.. math::
         \gamma = \frac{1/\omega}{\varrho c L^2/\kappa},

which is the ratio of the time scale for the heat source and the
time scale for diffusion. Multiplying by :math:`R/R` gives another
interpretation: :math:`\gamma` is the ratio of the speed of diffusion and
the speed of the heat source.


.. admonition:: The benefits of scaling

   The physics of our problem depends now on :math:`\beta`, :math:`\bar
   R`, and :math:`\gamma`, just three ratios of physical effects instead
   of 10 independent parameters.  Setting
   :math:`\bar R = 0.2` is an appropriate choice. For a quite localized heat
   source in space, :math:`\beta=10` is a suitable value.  Then we are
   actually left with only one interesting parameter to adjust: :math:`\gamma`.
   It is so much easier to assign this parameter a value (speed of
   diffusion versus speed of heat source) than to set :math:`\varrho`, :math:`c`, and
   :math:`\kappa` for some chosen material, and then determine relevant values for
   :math:`A`, :math:`L`, etc. There are no approximations in the scaling procedure;
   it just dramatically simplifies numerical simulations.
   The book [Ref1]_ gives a comprehensive treatment
   of scaling.




.. _ch:diffusion:welding:funcsolver:

A function-based solver
-----------------------

We can use the ``solver_minimize_assembly`` function to solve the
welding problem. The application code just declares the problem-dependent
parameters and calls the solver function:

.. code-block:: python

        def application_welding(gamma=1, delta=1, beta=10, num_rotations=2):
            """Circular moving heat source for simulating welding."""
            from math import pi, sin, cos
            u0 = Constant(0)
            I = Constant(0)
            R = 0.2
            f = Expression(
                'delta*exp(-0.5*pow(beta,2)*(pow(x[0]-(0.5+R*cos(t)),2) + '
                                            'pow(x[1]-(0.5+R*sin(t)),2)))',
                delta=delta, beta=beta, R=R, t=0)
            # Simulate to rotations with the equipment
            omega = 1.0      # Scaled angular velocity
            P = 2*pi/omega   # One period of rotation
            T = 2*P          # Total simulation time
            dt = P/40        # 40 steps per rotation
            Nx = Ny = 60
            solver_minimize_assembly(
                gamma, f, u0, I, dt, T, (Nx, Ny), (1, 1), degree=1,
                user_action=ProcessResults(), I_project=False)

The remaining task is to write the user action callback function to
process the solution at teach time step. We want to make use of
``cbcpost`` for storage and plotting.  Since we need the post processor
variable, called ``pp`` in the section :ref:`ch:diffusion:welding:cbcpost`,
to survive between calls to the user action function, we find it
most convenient to implement this function in terms of a class with
``pp`` as attribute and ``__call__`` as the user action function.  We want
to make comparisons between the heat source and the temperature
response, so we register both fields for storage and plotting:

.. code-block:: python

        import cbcpost as post
        class ProcessResults(object):
            def __init__(self):
                """Define fields to be stored/plotted."""
                self.pp = post.PostProcessor(
                    dict(casedir='Results', clean_casedir=True))
                self.pp.add_field(
                    post.SolutionField(
                        'Temperature',
                        dict(save=True,
                             save_as=['hdf5', 'xdmf'],  # format
                             plot=True,
                             plot_args=
                             dict(range_min=0.0, range_max=1.1)
                             )))
                self.pp.add_field(
                    post.SolutionField(
                        "Heat_source",
                        dict(save=True,
                             save_as=["hdf5", "xdmf"],  # format
                             plot=True,
                             plot_args=
                             dict(range_min=0.0, range_max=float(delta))
                             )))
                # Save separately to VTK files as well
                self.vtkfile_T = File('temperature.pvd')
                self.vtkfile_f = File('source.pvd')
            def __call__(self, t, T, timestep):
                """Store T and f to file (cbcpost and VTK)."""
                T.rename('T', 'solution')
                f_Function = interpolate(f, T.function_space())
                f_Function.rename('f', 'welding equipment')
                self.pp.update_all(
                    {'Temperature': lambda: T,
                     'Heat_source': lambda: f_Function},
                    t, timestep)
                self.vtkfile_T << (T, float(t))
                self.vtkfile_f << (f_Function, float(t))

We took the opportunity to also
store the ``u`` and ``f`` functions to VTK files, although this is really
not necessary since ParaView or VisIt can read XDMF files.

Note that the use of ``cbcpost`` is usually very dependent on the
problem at hand, so it does not make sense to include ``cbcpost`` code
in a general PDE solver, only in problem-specific code such as the
user action function.

Getting an animation on the screen with the built-in plotting tool is
a matter of running the welding example:

.. code-block:: python

        >>> from diffusion_func import application_welding as a
        >>> a(gamma=10, delta=700)

(We introduced the synonym ``a`` to save some typing.)
Or you can run this as a command in the terminal:

.. code-block:: text

        Terminal> python -c '\ 
        from diffusion_func import application_welding as a;
        a(gamma=10, delta=700)'

Since we have fixed the color scale of the temperature to have values
in :math:`[0,1.1]`, we must adjust :math:`\delta` appropriately to :math:`\gamma`.  For
example, running :math:`\gamma=40` reveals, from the output in the terminal,
that the maximum temperature is about 0.25, and consequently we do not
see much. For any given :math:`\gamma`, run the problem with :math:`\delta=1` (and
say ``num_rotations=0.2`` to make a quick simulation), and rerun with
:math:`\delta` as one over the maximum temperature.  Here we get an
approximate :math:`\delta = 66.7\gamma` for :math:`\gamma \leq 0.1`. Try running
:math:`\gamma=0.01` and :math:`\delta=1` to observe some more significant heat
transfer away from the welding equipment. With :math:`\gamma =0.001` there
is significant heat build-up, but for so small :math:`\gamma` we should
re-scale the problem and use the diffusion time scale as time scale.

In ParaView, load ``Results/Temperature/Temperature.xdmf`` as file,
click **Apply**, then the play button for animation. If the animation is
not correct, repeat the procedure. Thereafter, split the layout in
two, choose **3D View**, load ``Results/Heat source/Heat_source.xmdf``,
click **Apply**, and run the animation. The two plots are synchronized
in time.

.. raw:: html
        
        <div>
        <video  loop controls width='640' height='365' preload='none'>
            <source src='mov/welding_gamma1.ogg'  type='video/ogg;  codecs="theora, vorbis"'>
        </video>
        </div>
        <p><em>Welding example with :math:`\gamma=1`.</em></p>
        
        <!-- Issue warning if in a Safari browser -->
        <script language="javascript">
        if (!!(window.safari)) {
          document.write("<div style=\"width: 95%%; padding: 10px; border: 1px solid #100; border-radius: 4px;\"><p><font color=\"red\">The above movie will not play in Safari - use Chrome, Firefox, or Opera.</font></p></div>")}
        </script>
        

[**hpl 11**: I AM HERE!]

.. _ch:diffusion:refactor:

Refactored implementation          (2)
======================================

The flat program for the diffusion solver in
``ft02_diffusion_flat1.py`` and ``ft09_diffusion_flat2.py``
was refactored in ``ft10_diffusion_func.py`` in terms of a
``solver`` function with the general code for solving the PDE problem, a
callback function for processing the solution at each time step, and
an application function defining the callback function and calling the
solver to solve a specific problem. However, for time-dependent
problems a solver function that gets all its input through a set of
arguments is less flexible than a solver *class*, which can demand its
input both through arguments and through functions (in subclasses)
provided by the user. The following text requires you to be familiar
with class programming in Python (tailored learning material is
Chapter 7, 9, and Appendix E in [Ref2]_).

When we work with a PDE project, we often want to explore a range of
similar problems where the PDE model basically stays the same, but
coefficients in the PDE, boundary and initial conditions, as well as
domains change.  This means that some of our code related to solving
the PDE is always the same, while some of our code is strongly
dependent upon a particular application. To avoid copying code (which
is considered evil in computer programming), we need to collect the
common code for all problems of this type in one place and then create
an API (application programming interface) to the code that will be
different from application to application. To this end, we introduce a
*solver class* that applies FEniCS to solve the PDE. It requires
access to a *problem class* where all the application-specific details
are defined. This problem class defines an API that the solver class
applies for communication.

The solver class will usually have a function to set up data
structures for the variational formulation, a ``step`` function
to advance the solution one time step, and a ``solve`` function to run
the time loop. Every time the solver class needs problem-specific
information, it gets that information from the problem class, either in
terms of attributes (variables) in the problem class or in terms of method
(function) calls. The forthcoming examples are tied to the diffusion
equation, but should be sufficiently general to be reused for
most time-dependent FEniCS applications.

.. --- begin exercise ---

Problem 4: Find error in implementation
---------------------------------------

For those who are familiar with object-oriented programming, this is
seemingly a very simple exercise, but it makes sure you understand
class hierarchies and the associated program flow, so that you
are prepared to read the forthcoming text on solver and problem
classes.  The exercise also points out a very common bug in that
context. If you have problems with this exercise, we advise you to
read more about classes in Python (e.g., Chapter 7 and 9 in
[Ref2]_), before you continue reading with the present book.

Somebody has made a class ``Line`` for straight lines :math:`y=ax+b`
where :math:`a` and :math:`b` are meant to be defined in subclasses by the
methods ``constant`` and ``steepness_factor``, respectively.

.. code-block:: python

        class Line(object):
            def __call__(self, x):
                return self.constant() + self.steepness_factor()*x
        
            def constant(self):
                return 1.0
        
            def steepness_factor(self):
                return 1.0
        
        class MyLine(Line):
            def steepness_factor(self):
                return -0.2
        
        line = MyLine()
        x = 2
        print('x=%g, y=%g' % (x, line(x)))

**a)**
Simulate the program above by hand. Make sure you understand the program
flow.

.. --- begin solution of exercise ---

**Solution.**

.. index:: Online Python Tutor

A nice tool to follow the program flow in simple programs is the
`Online Python Tutor <http://pythontutor.com/visualize.html#mode=edit>`__.

.. raw:: html

        <iframe width="950" height="500" frameborder="0"
                src="http://pythontutor.com/iframe-embed.html#code=from+__future__+import+print_function%0A%0Aclass+Line%28object%29%3A%0A++++def+__call__%28self%2C+x%29%3A%0A++++++++return+self.constant%28%29+%2B+self.steepness_factor%28%29%2Ax%0A%0A++++def+constant%28self%29%3A%0A++++++++return+1.0%0A%0A++++def+steepness_factor%28self%29%3A%0A++++++++return+1.0%0A%0Aclass+MyLine%28Line%29%3A%0A++++def+steepness_factor%28self%29%3A%0A++++++++return+-0.2%0A%0Aline+%3D+MyLine%28%29%0Ax+%3D+2%0Aprint%28%27x%3D%25g%2C+y%3D%25g%27+%25+%28x%2C+line%28x%29%29%29&curInstr=0&py=2&cumulative=false">
        </iframe>

The Online Python Tutor is fine for simple test programs, but one cannot
use third-party Python modules. If that is required,
a debugger must be used. It is
visually less pleasant for following program flow, but will always
be applicable.

The program flow begins at the top of the file and goes down line by
line. First is the definition of the two classes. Then we have the
first line in the main program: ``line = MyLine()``.  There is no
constructor in class ``MyLine``, but it could be inherited from the
parent class ``Line``. However, there is neither any constructor in
``Line``.  In such cases, Python equips the ``Line`` class with an empty
constructor as we had made an ``__init__(self)`` method with just ``pass``
as body. This constructor is called by ``MyLine()``.  It makes ``line``
refer to an instance of class ``MyLine``.

In the print statement, one needs to fill the string with
numbers, and after ``x`` is inserted, the call ``line(x)`` is performed.
Since ``line`` is an object of type ``MyLine``, a function call
like ``line(x)`` is legal if the class has a special method
``__call__``. This is the case, since class ``MyLine`` inherits
``__call__`` from the parent class ``Line``.
The program flow moves to ``Line.__call__`` where we first call
``self.constant()``. Since the ``self`` object is of type ``MyLine``,
this means we call ``MyLine.constant``, but there is no ``constant``
method in ``MyLine``, meaning that it just inherits the ``constant``
method from ``Line``. Consequently, ``Line.constant`` is called and
returns 1.0. The next call is to ``MyLine.steepness_factor``, and
this method is implemented in class ``MyLine`` and returns -0.2.
In ``Line.__call__`` we then evaluate ``1.0 + (-0.2)*x``, which
results in 0.4 when ``x`` is 2.

.. --- end solution of exercise ---

**b)**
Somebody makes another subclass:

.. code-block:: python

        class YourLine(MyLine):
            def steepnes_factor(self):
                return 2
        
        line = YourLine()
        x = 2
        print('x=%g, y=%g' % (x, line(x)))

However, this time the printout is ``x=2, y=0.4``, while it should be
``x=2, y=5``. Where is the error?

.. --- begin solution of exercise ---

**Solution.**
Doing this by hand might not be successful due to the nature of the error.
It is probably better to use the Online Python Tutor or a debugger.

.. raw:: html

        <iframe width="950" height="500" frameborder="0"
                src="http://pythontutor.com/iframe-embed.html#code=from+__future__+import+print_function%0A%0Aclass+Line%28object%29%3A%0A++++def+__call__%28self%2C+x%29%3A%0A++++++++return+self.constant%28%29+%2B+self.steepness_factor%28%29%2Ax%0A%0A++++def+constant%28self%29%3A%0A++++++++return+1.0%0A%0A++++def+steepness_factor%28self%29%3A%0A++++++++return+1.0%0A%0Aclass+MyLine%28Line%29%3A%0A++++def+steepness_factor%28self%29%3A%0A++++++++return+-0.2%0A%0Aclass+YourLine%28MyLine%29%3A%0A++++def+steepnes_factor%28self%29%3A%0A++++++++return+2%0A%0Aline+%3D+YourLine%28%29%0Ax+%3D+2%0Aprint%28%27x%3D%25g%2C+y%3D%25g%27+%25+%28x%2C+line%28x%29%29%29&curInstr=0&py=2&cumulative=false">
        </iframe>

The problem is that when ``Line.__call__`` tries to call
``YourLine.steepness_factor``, it cannot find such a method in
``YourLine``, and instead if uses the inherited method ``Line.steepness_factor``,
which returns -0.2. The problem is that there is a misspelling: a
missing s in class ``YourLine``. This is a very common error that can be
hard to track down.

.. --- end solution of exercise ---

.. --- end exercise ---

.. _ch:diffusion:refactor:math:

Mathematical problem
--------------------

We address a variable-coefficient diffusion equation with Dirichlet,
Neumann, and Robin conditions:

.. _Eq:_auto16:

.. math::

    \tag{34}
    \varrho c{\partial u\over\partial t} = \nabla\cdot\left( \kappa\nabla u\right)
        + f(\boldsymbol{x},t)\hbox{ in }\Omega\times (0,T],
        
        

.. _Eq:_auto17:

.. math::

    \tag{35}
    u(\boldsymbol{x},0) = I\hbox{ on }\Omega,
        
        

.. _Eq:_auto18:

.. math::

    \tag{36}
    u = u_0(t)\hbox{ on }\Gamma_D,
        
        

.. _Eq:_auto19:

.. math::

    \tag{37}
    -\kappa{\partial u\over\partial n} = g\hbox{ on }\Gamma_N,
        
        

.. _Eq:_auto20:

.. math::

    \tag{38}
    -\kappa{\partial u\over\partial n} = r(u-U_s)\hbox{ on }\Gamma_R{\thinspace .}
        
        

The spatial domain :math:`\Omega` has boundary :math:`\partial\Omega = \Gamma_D\cup
\Gamma_N\cup\Gamma_R`. We shall assume that all coefficients :math:`\varrho`,
:math:`c`, :math:`\kappa` may vary in space, while :math:`f` and :math:`g` may vary in time too.
The coefficients :math:`r` and :math:`U_s` are assumed to depend on time only.

We discretize in time by the general :math:`\theta`-rule.  For an evolution
equation :math:`\partial P/\partial t=Q(t)`, this rule reads

.. math::
        
        {P^{n+1} - P^{n}\over{{\Delta t}}} = \theta Q^{n+1} + (1-\theta )Q^{n},
        

where :math:`\theta\in[0,1]` is a weighting factor. The attractive property
of this scheme is that :math:`\theta =1` corresponds
to the Backward Euler scheme, :math:`\theta =1/2` to the Crank-Nicolson
scheme, and :math:`\theta =0` to the Forward Euler scheme.

Introducing the :math:`\theta`-rule in our PDE results in

.. _Eq:ch:diffusion:refactor:math:problem:

.. math::

    \tag{39}
    \varrho c\frac{u^{n+1}-u^n}{\Delta t}
        = \theta(\nabla\cdot\left( \kappa\nabla u^{n+1}\right) + f(\boldsymbol{x},t_{n+1})) +
        (1-\theta)(\nabla\cdot\left( \kappa\nabla u^{n}\right) + f(\boldsymbol{x},t_{n})){\thinspace .}
        
        

A Galerkin method for this initial-boundary value problem consists
of multiplying :ref:`(39) <Eq:ch:diffusion:refactor:math:problem>` by
a test function :math:`v\in\hat V`, integrate over :math:`\Omega`, and
perform integration by parts on the second-order derivative term
:math:`\nabla\cdot\left( \kappa\nabla u\right)`:

.. math::
        
        \int\limits_\Omega \bigl(
        v\varrho c\frac{u^{n+1}-u^n}{\Delta t}{\, \mathrm{d}x}
        & + \theta \kappa\nabla u^{n+1}\cdot\nabla v - v\theta f(\boldsymbol{x},t_{n+1} \\ 
        & + (1-\theta) \kappa\nabla u^{n}\cdot\nabla v -
        v(1-\theta)f(\boldsymbol{x},t_{n}\bigr){\, \mathrm{d}x}\\ 
        & - \int\limits_{\Gamma_N\cup\Gamma_R}
        \bigl(\theta \kappa\frac{\partial u^{n+1}}{\partial n}v
        + (1-\theta) \kappa\frac{\partial u^{n}}{\partial n}v\bigr){\, \mathrm{d}s} = 0
        {\thinspace .}
        

Inserting the boundary conditions at :math:`\Gamma_N` and :math:`\Gamma_R`  gives
us

.. math::
        
        F(u;v) = \int\limits_\Omega \bigl(
        v\varrho c\frac{u^{n+1}-u^n}{\Delta t}{\, \mathrm{d}x}
        + \theta \kappa\nabla u^{n+1}\cdot\nabla v - v\theta f(\boldsymbol{x},t_{n+1}) \nonumber
        

.. math::
          
        \quad - (1-\theta) \kappa\nabla u^{n}\cdot\nabla v +
        v(1-\theta)f(\boldsymbol{x},t_{n}\bigr){\, \mathrm{d}x}\nonumber
        

.. math::
          
        \quad + \int\limits_{\Gamma_N}
        \bigl(\theta g(\boldsymbol{x},t_{n+1})v
        + (1-\theta) g(\boldsymbol{x},t_n)v\bigr){\, \mathrm{d}s}\nonumber
        

.. _Eq:ch:diffusion:refactor:math:varform0:

.. math::

    \tag{40}
    \quad + \int\limits_{\Gamma_R}
        \bigl(\theta r(u^{n+1} - U_s(t_{n+1}))v
        + (1-\theta) r(u^{n} - U_s(t_{n}))v\bigr){\, \mathrm{d}s}
        = 0{\thinspace .}
        
        

Since we use ``u`` for the unknown :math:`u^{n+1}` in the code, and ``u_1``
for :math:`u^n`, we introduce the same notation in the mathematics too:
:math:`u` for :math:`u^{n+1}` and :math:`u_1` for :math:`u^n`,

.. math::
        
        F(u;v) = \int\limits_\Omega \bigl(
        v\varrho c\frac{u-u_1}{\Delta t}{\, \mathrm{d}x}
        + \theta \kappa\nabla u\cdot\nabla v - v\theta f(\boldsymbol{x},t_{n+1}) \nonumber
        

.. math::
          
        \quad - (1-\theta) \kappa\nabla u_1\cdot\nabla v +
        v(1-\theta)f(\boldsymbol{x},t_{n}\bigr){\, \mathrm{d}x}\nonumber
        

.. math::
          
        \quad + \int\limits_{\Gamma_N}
        \bigl(\theta g(\boldsymbol{x},t_{n+1})v
        + (1-\theta) g(\boldsymbol{x},t_n)v\bigr){\, \mathrm{d}s}\nonumber
        

.. _Eq:ch:diffusion:refactor:math:varform:

.. math::

    \tag{41}
    \quad + \int\limits_{\Gamma_R}
        \bigl(\theta r(u - U_s(t_{n+1}))v
        + (1-\theta) r(u_1 - U_s(t_{n}))v\bigr){\, \mathrm{d}s}
        = 0{\thinspace .}
        
        

The variational formulation is then: at each time level, find :math:`u\in V`
such that :math:`F(u;v)=0\ \forall v\in\hat V`.  We do not need to identify
the bilinear and linear terms in the expression :math:`F` since we can use
the ``lhs`` and ``rhs`` functions for this purpose in the code.  However,
we should be very convinced that we have a *linear* variational
problem at hand and not a nonlinear one.

.. _ch:diffusion:refactor:class_solver:

A class-based solver
--------------------

The solver class contains the data structures
and actions from previous programs, but needs to ask the problem class
about the mesh, boundary conditions, the time step, and so forth. We
therefore need to define the API of the problem class first so we know
how the solver class can ask for the mesh, for instance.

Here is an abstract problem class:

.. code-block:: python

        class DiffusionProblem(object):
            """Abstract base class for specific diffusion applications."""
        
            def solve(self, solver_class=DiffusionSolver,
                      theta=0.5, linear_solver='direct',
                      abs_tol=1E-6, rel_tol=1E-5, max_iter=1000):
                """Solve the PDE problem for the primary unknown."""
                self.solver = solver_class(self, theta)
                iterative_solver = KrylovSolver('gmres', 'ilu')
                prm = iterative_solver.parameters
                prm['absolute_tolerance'] = abs_tol
                prm['relative_tolerance'] = rel_tol
                prm['maximum_iterations'] = max_iter
                prm['nonzero_initial_guess'] = True  # Use u (last sol.)
                return self.solver.solve()
        
            def flux(self):
                """Compute and return flux -p*grad(u)."""
                degree = self.solution().ufl_element().degree()
                V_g = VectorFunctionSpace(self.mesh, 'P', degree)
                flux_u = -self.heat_conduction()*grad(self.solution())
                self.flux_u = project(flux_u, V_g)
                self.flux_u.rename('flux(u)', 'continuous flux field')
                return self.flux_u
        
            def mesh_degree(self):
                """Return mesh, degree."""
                raise NotImplementedError('Must implement mesh')
        
            def I(self):
                """Return initial condition."""
                return Constant(0.0)
        
            def heat_conduction(self):  # kappa
                return Constant(1.0)
        
            def density(self):          # rho
                return Constant(1.0)
        
            def heat_capacity(self):    # c
                return Constant(1.0)
        
            def heat_source(self, t):   # f
                return Constant(0.0)
        
            def time_step(self, t):
                raise NotImplentedError('Must implement time_step')
        
            def end_time(self):
                raise NotImplentedError('Must implement end_time')
        
            def solution(self):
                return self.solver.u
        
            def user_action(self, t, u):
                """Post process solution u at time t."""
                pass
        
            def Dirichlet_conditions(self, t):
                """Return either an Expression (for the entire boundary) or
                a list of (value,boundary_parts,index) triplets."""
                return []
        
            def Neumann_conditions(self, t):
                """Return list of (g,ds(n)) pairs."""
                return []
        
            def Robin_conditions(self, t):
                """Return list of (r,s,ds(n)) triplets."""
                return []

The meaning of the different methods in this class will be evident as
we present specific examples on implementations.

The idea now is that different problems are implemented as different
subclasses of ``DiffusionProblem``. The ``solve`` and ``flux`` methods are
general and can be inherited, while the rest of the methods must be
implemented in the subclass for the particular problem at hand.

As a simple example, consider the test problem where we have a
manufactured solution :math:`u=1+x^2 + \alpha y^2 + \beta t` on
a uniform mesh over the unit square or cube, with Dirichlet conditions
on the entire boundary. Suppose we have :math:`\Delta t=0.3` and
want to simulate for :math:`t\in [0,0.9]`. A problem class is then

.. code-block:: python

        class TestProblemExact(DiffusionProblem):
            def __init__(self, Nx, Ny, Nz=None, degree=1, num_time_steps=3):
                if Nz is None:
                    self.mesh = UnitSquareMesh(Nx, Ny)
                else:
                    self.mesh = UnitCubeMesh(Nx, Ny, Nz)
                self.degree = degree
                self.num_time_steps = num_time_steps
        
                alpha = 3; beta = 1.2
                self.u0 = Expression(
                    '1 + x[0]*x[0] + alpha*x[1]*x[1] + beta*t',
                    alpha=alpha, beta=beta, t=0)
                self.f = Constant(beta - 2 - 2*alpha)
        
            def time_step(self, t):
                return 0.3
        
            def end_time(self):
                return self.num_time_steps*self.time_step(0)
        
            def mesh_degree(self):
                return self.mesh, self.degree
        
            def I(self):
                """Return initial condition."""
                return self.u0
        
            def heat_source(self, t):
                return self.f
        
            def Dirichlet_conditions(self, t):
                self.u0.t = t
                return self.u0
        
            def user_action(self, t, u, timestep):
                """Post process solution u at time t."""
                u_e = interpolate(self.u0, u.function_space())
                error = np.abs(u_e.vector().array() -
                               u.vector().array()).max()
                print('error at %g: %g' % (t, error))
                tol = 2E-11
                assert error < tol, 'max_error: %g' % error

Remember that we can inherit all methods from the parent class that are
appropriate for the problem at hand.

Our test problem can now be solved in (e.g.) a unit test like

.. code-block:: python

        def test_DiffusionSolver():
            problem = TestProblemExact(Nx=2, Ny=2)
            problem.solve(theta=1, linear_solver='direct')
            u = problem.solution()

The solver class will call the ``user_action`` function at every time level,
and this function will assert that we recover the solution to machine precision.

The solver class, here based on the :math:`\theta`-rule and the
variational formulation from the previous section, can be coded as
follows:

.. code-block:: python

        class DiffusionSolver(object):
            """Solve a heat conduction problem by the theta-rule."""
            def __init__(self, problem, theta=0.5):
                self.problem = problem
                self.theta = theta
        
            def solve(self):
                """Run time loop."""
                tol = 1E-14
                T = self.problem.end_time()
                t = self.problem.time_step(0)
                self.initial_condition()
                timestep = 1
        
                while t <= T+tol:
                    self.step(t)
                    self.problem.user_action(t, self.u, timestep)
        
                    # Updates
                    self.dt = self.problem.time_step(
                        t+self.problem.time_step(t))
                    t += self.dt
                    timestep += 1
                    self.u_1.assign(self.u)
        
            def initial_condition(self):
                self.mesh, degree = self.problem.mesh_degree()
                self.V = V = FunctionSpace(self.mesh, 'P', degree)
        
                if hasattr(self.problem, 'I_project'):
                    I_project = getattr(self.problem, 'I_project')
                else:
                    I_project = False
                self.u_1 = project(self.problem.I(), V) if I_project \ 
                           else interpolate(self.problem.I(), V)
                self.u_1.rename('u', 'initial condition')
                self.u = self.u_1 # needed if flux is computed in the next step
                self.problem.user_action(0, self.u_1, 0)
        
            def step(self, t, linear_solver='direct',
                     abs_tol=1E-6, rel_tol=1E-5, max_iter=1000):
                """Advance solution one time step."""
                # Find new Dirichlet conditions at this time step
                Dirichlet_cond = self.problem.Dirichlet_conditions(t)
                if isinstance(Dirichlet_cond, Expression):
                    # Just one Expression for Dirichlet conditions on
                    # the entire boundary
                    self.bcs = [DirichletBC(
                        self.V, Dirichlet_cond,
                        lambda x, on_boundary: on_boundary)]
                else:
                    # Boundary SubDomain markers
                    self.bcs = [
                        DirichletBC(self.V, value, boundaries, index)
                        for value, boundaries, index
                        in Dirichlet_cond]
        
                #debug_Dirichlet_conditions(self.bcs, self.mesh, self.V)
        
                self.define_variational_problem(t)
                a, L = lhs(self.F), rhs(self.F)
                A = assemble(a)
                b = assemble(L)
        
                # Solve linear system
                [bc.apply(A, b) for bc in self.bcs]
                if self.V.dim() < 50:
                    print('A:\n', A.array(), '\nb:\n', b.array())
        
                if linear_solver == 'direct':
                    solve(A, self.u.vector(), b)
                else:
                    solver = KrylovSolver('gmres', 'ilu')
                    solver.solve(A, self.u.vector(), b)
        
            def define_variational_problem(self, t):
                """Set up variational problem a time t."""
                u = TrialFunction(self.V)
                v = TestFunction(self.V)
        
                dt     = self.problem.time_step(t)
                kappa  = self.problem.heat_conduction()
                varrho = self.problem.density()
                c      = self.problem.heat_capacity()
                f      = self.problem.heat_source(t)
                f_1    = self.problem.heat_source(t-dt)
        
                theta = Constant(self.theta)
                u_1 = self.u_1  # first computed in initial_condition
        
                F = varrho*c*(u - u_1)/dt*v
                F += theta    *dot(kappa*grad(u),   grad(v))
                F += (1-theta)*dot(kappa*grad(u_1), grad(v))
                F -= theta*f*v + (1-theta)*f_1*v
                F = F*dx
                F += theta*sum(
                    [g*v*ds_
                     for g, ds_ in self.problem.Neumann_conditions(t)])
                F += (1-theta)*sum(
                    [g*v*ds_
                     for g, ds_ in self.problem.Neumann_conditions(t-dt)])
                F += theta*sum(
                    [r*(u - U_s)*v*ds_
                     for r, U_s, ds_ in self.problem.Robin_conditions(t)])
                F += (1-theta)*sum(
                    [r*(u - U_s)*v*ds_
                     for r, U_s, ds_ in self.problem.Robin_conditions(t-dt)])
                self.F = F
        
                self.u = Function(self.V)
                self.u.rename('u', 'solution')

Example: Thermal boundary layer
-------------------------------

Assume we have some medium at temperature :math:`U_s` and then we suddenly
heat one end so the temperature here stays constant at :math:`U_1`. At the
other end we have some equipment to keep the temperature constant at
:math:`U_s`. The other boundaries are insulated so heat cannot escape.
There are no heat sources.  How is the temperature development
in the material due to such sudden heating of one end?
Figure :ref:`ch:diffusion:refactor:class_solver:fig4` sketches the
situation (with a scaled variable :math:`u`).

.. Program for the sketch below: fig/thermal_layer1.py

.. _ch:diffusion:refactor:class_solver:fig4:

.. figure:: thermal_layer1_sketch.png
   :width: 500

   Domain with (scaled) boundary conditions: sudden jump in :math:`u` at :math:`x=0`

Mathematics
~~~~~~~~~~~

The problem is mathematically one-dimensional, so it means that if we
create a 2D or 3D domain, the boundaries in :math:`y` and :math:`z` directions are
insulated (:math:`\partial u/\partial n=0`). The heating is applied to :math:`x=0`
and :math:`x=L`.

It is natural to scale the problem by introducing dimensionless
independent and dependent variables:

.. math::
         \bar x = \frac{x}{L},\quad \bar y = \frac{y}{L},\quad
        \bar u = \frac{u-U_s}{U_1-U_s},\quad \bar t = \frac{t}{t_c}{\thinspace .}

The suggested scaling for :math:`u` makes a simple boundary condition at :math:`x=0`:
:math:`\bar u = 1`. This scaling also results in :math:`\bar u \in [0,1]` as is
always desired.

After inserting the dimensionless variables in the PDE, we demand the
time-derivative term and the heat conduction term to balance, and
find :math:`t_c` from that condition: :math:`t_c = \varrho c L^2/\kappa`.

The spatial domain is the unit square. We introduce the boundaries
:math:`\Gamma_{D_1}` as the side :math:`x=0`, :math:`\Gamma_{D_2}` as the side :math:`x=1`,
and :math:`\Gamma_N` as the rest of the boundary.
The scaled initial-boundary problem can be written as

.. _Eq:_auto21:

.. math::

    \tag{42}
    \frac{\partial\bar u}{\partial\bar t} = \bar\nabla^2\bar u\hbox{ in }
        \Omega = (0,1)\times (0,1)\times (0,T],
        
        

.. _Eq:_auto22:

.. math::

    \tag{43}
    \bar u(\boldsymbol{x}, 0) = 0\hbox{ in }\Omega,
        
        

.. _Eq:_auto23:

.. math::

    \tag{44}
    \bar u = 1\hbox{ at } \Gamma_{D_1},
        
        

.. _Eq:_auto24:

.. math::

    \tag{45}
    \bar u = 0\hbox{ at } \Gamma_{D_2},
        
        

.. _Eq:_auto25:

.. math::

    \tag{46}
    \frac{\partial\bar u}{\partial\bar n} = 0\hbox{ at }\Gamma_N{\thinspace .}
        
        

Implementation          (3)
~~~~~~~~~~~~~~~~~~~~~~~~~~~

We can solve our problem with the general problem and solver
classes by noticing that we set :math:`\varrho = c= \kappa = 1`,
and :math:`I=0`. The most labor-intensive part of the problem class is
the visualization. We can create a helper class, ``ProcessSolution``,
which applies ``cbcpost`` to store the solution:

.. code-block:: python

        import cbcpost as post
        class ProcessSolution(object):
            """user_action function for storing the solution and flux."""
            def __init__(self, problem, u_min=0, u_max=1):
                """Define fields to be stored/plotted."""
                self.problem = problem  # this user_action belongs to problem
                self.pp = post.PostProcessor(
                    dict(casedir='Results', clean_casedir=True))
        
                self.pp.add_field(
                    post.SolutionField(
                        'Solution',
                        dict(save=True,
                             save_as=['hdf5', 'xdmf'],  # format
                             plot=True,
                             plot_args=
                             dict(range_min=float(u_min),
                                  range_max=float(u_max))
                             )))
        
                self.pp.add_field(
                    post.SolutionField(
                        "Flux",
                        dict(save=True,
                             save_as=["hdf5", "xdmf"],  # format
                             )))
        
            def __call__(self, t, u, timestep):
                """Store u and its flux to file."""
                u.rename('u', 'Solution')
                self.pp.update_all(
                    {'Solution': lambda: u,
                     'Flux': lambda: self.problem.flux()},
                    t, timestep)
                info('saving results at time %g, max u: %g' %
                     (t, u.vector().array().max()))

In the ``user_action``
method, we use this tool to store the solution, but we also add
statements for plotting :math:`u` along a line from :math:`x=0` to :math:`x=1`
through the medium (:math:`y=0.5`). This will gives an animation of
the temperature profile, but results in somewhat lengthy code
(we actually use SciTools to cut down the length compared to animation
code in Matplotlib).

To mark the boundaries, we can make a
function like

.. code-block:: python

        def mark_boundaries_in_rectangle(mesh, x0=0, x1=1, y0=0, y1=1):
            """
            Return mesh function FacetFunction with each side in a rectangle
            marked by boundary indicator 0, 1, 2, 3.
            Side 0 is x=x0, 1 is x=x1, 2 is y=y0, and 3 is y=y1.
            """
            tol = 1E-14
        
            class BoundaryX0(SubDomain):
                def inside(self, x, on_boundary):
                    return on_boundary and abs(x[0] - x0) < tol
        
            class BoundaryX1(SubDomain):
                def inside(self, x, on_boundary):
                    return on_boundary and abs(x[0] - x1) < tol
        
            class BoundaryY0(SubDomain):
                def inside(self, x, on_boundary):
                    return on_boundary and abs(x[1] - y0) < tol
        
            class BoundaryY1(SubDomain):
                def inside(self, x, on_boundary):
                    return on_boundary and abs(x[1] - y1) < tol
        
            # Mark boundaries
            boundary_parts = FacetFunction('uint', mesh)
            boundary_parts.set_all(9999)
            bx0 = BoundaryX0()
            bx1 = BoundaryX1()
            by0 = BoundaryY0()
            by1 = BoundaryY1()
            bx0.mark(boundary_parts, 0)
            bx1.mark(boundary_parts, 1)
            by0.mark(boundary_parts, 2)
            by1.mark(boundary_parts, 3)
            return boundary_parts

Unfortunately, this is quite tedious and repetitive code, and the
code has to repeated for a 3D box-shaped domain. It is possible to
write more general, compact code valid both for an interval, rectangle, or
box:

.. code-block:: python

        def mark_boundaries_in_hypercube(
            mesh, d=2, x0=0, x1=1, y0=0, y1=1, z0=0, z1=1):
            """
            Return mesh function FacetFunction with each side in a hypercube
            in d dimensions. Sides are marked by indicators 0, 1, 2, ..., 6.
            Side 0 is x=x0, 1 is x=x1, 2 is y=y0, 3 is y=y1, and so on.
            """
            side_definitions = [
                'near(x[0], %(x0)s, tol)', 'near(x[0], %(x1)s, tol)',
                'near(x[1], %(y0)s, tol)', 'near(x[1], %(y1)s, tol)',
                'near(x[2], %(z0)s, tol)', 'near(x[2], %(z1)s, tol)']
            boundaries = [CompiledSubDomain(
                ('on_boundary && ' + side_definition) % vars(), tol=1E-14)
                          for side_definition in side_definitions[:2*d]]
            # Mark boundaries
            boundary_parts = FacetFunction('uint', mesh)
            boundary_parts.set_all(9999)
            for i in range(len(boundaries)):
                boundaries[i].mark(boundary_parts, i)
            return boundary_parts

Now we are in a position to show our problem class:

.. code-block:: python

        class Problem1(DiffusionProblem):
            """Evolving boundary layer, I=0, but u=1 at x=0."""
            def __init__(self, Nx, Ny):
                DiffusionProblem.__init__(self)
                self.init_mesh(Nx, Ny)
                # Storage and visualization
                self.user_action_object = \ 
                           ProcessSolution(self, u_min=0, u_max=1)
                # Compare u(x,t) as curve plots for the following times
                self.times4curveplots = [
                    self.time_step(0), 4*self.time_step(0),
                    8*self.time_step(0), 12*self.time_step(0),
                    16*self.time_step(0), 0.02, 0.1, 0.2, 0.3]
                # scitools animation is simpler than FuncAnimation
                # in matplotlib for the user_action callback function
                import scitools.std as plt
                self.plt = plt
        
            def init_mesh(self, Nx, Ny):
                """Initialize mesh, boundary parts, and p."""
                self.mesh = UnitSquareMesh(Nx, Ny)
                self.divisions = (Nx, Ny)
        
                self.boundary_parts = \ 
                     mark_boundaries_in_hypercube(self.mesh, d=2)
                self.ds =  Measure(
                    'ds', domain=self.mesh,
                    subdomain_data=self.boundary_parts)
        
            def time_step(self, t):
                # Small time steps in the beginning when the boundary
                # layer develops
                if t < 0.02:
                    return 0.0005
                else:
                    return 0.025
        
            def end_time(self):
                return 0.3
        
            def mesh_degree(self):
                return self.mesh, 1
        
            def Dirichlet_conditions(self, t):
                """Return list of (value,boundary) pairs."""
                return [(1.0, self.boundary_parts, 0),
                        (0.0, self.boundary_parts, 1)]
        
            def user_action(self, t, u, timestep):
                """Post process solution u at time t."""
                tol = 1E-14
                self.user_action_object(t, u, timestep)
                # Also plot u along line y=1/2
                x_coor = np.linspace(tol, 1-tol, 101)
                x = [(x_,0.5) for x_ in x_coor]
                u = self.solution()
                u_line = [u(x_) for x_ in x]
                # Animation in figure(1)
                self.plt.figure(1)
                self.plt.plot(
                    x_coor, u_line, 'b-',
                    legend=['u, t=%.4f' % t],
                    title='Solution along y=1/2, time step: %g' %
                    self.time_step(t),
                    xlabel='x', ylabel='u',
                    axis=[0, 1, 0, 1])
                self.plt.savefig('tmp_%04d.png' % timestep)
                # Accumulated selected curves in one plot in figure(2)
                self.plt.figure(2)
                for t_ in self.times4curveplots:
                    if abs(t - t_) < 0.5*self.time_step(t):
                        self.plt.plot(
                            x_coor, u_line, '-',
                            legend=['u, t=%.4f' % t],
                            xlabel='x', ylabel='u',
                            axis=[0, 1, 0, 1])
                        self.plt.hold('on')

Notice our definition of the time step: because the growth of the
thin boundary layer close to :math:`x=0`
is very rapid for small times, we need to start with a small time
step. Nevertheless, the speed of the heat transfer slows down with time,
so we decide to use a longer time step after :math:`t=0.02`. The animation
would otherwise also be boring to watch, but be aware of the fact that
the apparent speed of the physical process is dramatically increased in the
animation at :math:`t=0.02`.

The problem is solved by

.. code-block:: python

        def demo1():
            problem = Problem1(Nx=20, Ny=5)
            problem.solve(theta=1, linear_solver='direct')

Results          (1)
~~~~~~~~~~~~~~~~~~~~

Figure :ref:`ch:diffusion:refactor:class_solver:fig1` shows accumulated
curves (from ``self.plt.figure(2)``). The problem is a
primary example on a *thermal boundary layer*: the sudden rise in
temperature at :math:`x=0` at :math:`t=0` gives rise to a very steep function, and
a thin boundary layer that grows with time as heat is transported from
the boundary into the domain. The jump in the temperature profile at
:math:`x=0` makes demands to the numerical methods. Quite typically, a
Crank-Nicolson scheme may show oscillations (as we can see in the
first curve) because of inaccurate treatment of the shortest spatial
waves in the Fourier representation of the discrete solution.  The
oscillations are removed by doubling the spatial resolution from 20 to
40 elements in the :math:`x` direction.  With :math:`\theta=0`, we never
experience any oscillations, but the boundary layer gets thicker and
less accurate (smaller :math:`\Delta t` is needed to compensate).

.. _ch:diffusion:refactor:class_solver:fig1:

.. figure:: thermal_layer1.png
   :width: 800

   *Development of thermal boundary layer: Crank-Nicolson (left) and Backward Euler (right) schemes*

From all the plot frames with filenames ``tmp_%04d.png`` we may create
video files by

.. code-block:: text

        Terminal> ffmpeg -i tmp_%04d.png -r 25 -vcodec libx264   movie.mp4
        Terminal> ffmpeg -i tmp_%04d.png -r 25 -vcodec libtheora movie.ogg

.. raw:: html
        
        <div>
        <video  loop controls width='640' height='365' preload='none'>
            <source src='mov/thermal_layer1/movie.mp4'  type='video/mp4;  codecs="avc1.42E01E, mp4a.40.2"'>
            <source src='mov/thermal_layer1/movie.webm' type='video/webm; codecs="vp8, vorbis"'>
            <source src='mov/thermal_layer1/movie.ogg'  type='video/ogg;  codecs="theora, vorbis"'>
        </video>
        </div>
        <p><em>Developing thermal boundary layer (notice the jump in speed, i.e., time step!)</em></p>
        
        <!-- Issue warning if in a Safari browser -->
        <script language="javascript">
        if (!!(window.safari)) {
          document.write("<div style=\"width: 95%%; padding: 10px; border: 1px solid #100; border-radius: 4px;\"><p><font color=\"red\">The above movie will not play in Safari - use Chrome, Firefox, or Opera.</font></p></div>")}
        </script>
        

Extension to heterogeneous medium
---------------------------------

Suppose we now place another material inside the domain with other
values material properties (i.e., values of :math:`\varrho`, :math:`c`, and
:math:`\kappa`).  The new material occupies the rectangle :math:`[0.3,0.7]\times
[0.3,0.7]` inside the scaled domain.  We also change the boundary
condition at :math:`x=1` to be "no change", i.e., :math:`\partial u/\partial
n=0`. Figure :ref:`ch:diffusion:refactor:class_solver:fig5` depicts the
problem.

.. Program for the sketch below: fig/thermal_layer1.py

.. _ch:diffusion:refactor:class_solver:fig5:

.. figure:: thermal_layer2_sketch.png
   :width: 500

   *Domain with internal subdomain and (scaled) boundary conditions*

Updated scaling
~~~~~~~~~~~~~~~

The former scaling is not completely valid as it was based on constant
:math:`\varrho`, :math:`c`, and :math:`\kappa`. We now introduce

.. math::
         \bar\varrho = \frac{\varrho}{\varrho_0},\quad
        \bar c = \frac{c}{c_0},\quad \bar\kappa = \frac{\kappa}{\kappa_0},

where :math:`\varrho_0` is the value of :math:`\varrho` in the outer material,
now to be known as subdomain 0.
A similar parameter :math:`\varrho_1` is the value of :math:`\varrho` inside
the new material, called subdomain 1.
The constants :math:`c_0`, :math:`\kappa_0`, :math:`c_1`, and :math:`\kappa_1` are
defined similarly. In subdomain 0, :math:`\bar\varrho = 1`, and in subdomain 1,
:math:`\bar\varrho = \varrho_1/\varrho_0`, with similar values for
:math:`\bar c` and :math:`\bar\kappa`. The scaled PDE becomes

.. math::
         \bar\varrho\bar c\frac{\partial\bar u}{\partial\bar t}
         = \bar\nabla\cdot(\bar\kappa\bar\nabla\bar u) + \bar f{\thinspace .}

We can call up the solver for the problem with dimensions as long
as we remember to set :math:`\kappa = \varrho = c =1` in subdomain 0.
In subdomain 1, we divide by :math:`\bar\varrho = \varrho_1/\varrho_0`
and :math:`\bar c = c_1/c_0`, which results in a coefficient

.. math::
         \alpha = \frac{\varrho_0c_0\kappa_1}{\varrho_1 c_1\kappa_0} 

on the right-hand side. This means that we can let ``density`` and
``heat_capacity`` be of unit value and only operate with a spatially
varying :math:`\kappa`, which takes on the values 1 in subdomain 0 and
:math:`\alpha` in subdomain 1. For simplicity, we just name this parameter
``kappa_values`` in the code.

[**hpl 12**: Would be clearer at more physical code to let all three parameters vary...]

The problem class          (1)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The problem class is very similar to ``Problem1`` above, except for the
fact that we need to define the inner subdomain, we need to allow for
:math:`\kappa` values in subdomain 0 and 1, the time points
for plots and time steps are a bit different, and the Dirichlet condition
only applies to :math:`x=0` (no need to implement the Neumann condition as
long as it is zero).

.. code-block:: python

        class Problem2(Problem1):
            """As Problem 1, but du/dn at x=1 and varying kappa."""
            def __init__(self, Nx, Ny, kappa_values):
                Problem1.__init__(self, Nx, Ny)
                self.init_mesh(Nx, Ny, kappa_values)
                self.user_action_object = \ 
                           ProcessSolution(self, u_min=0, u_max=1)
                # Compare u(x,t) as curve plots for the following times
                self.times4curveplots = [
                    12*self.time_step(0),
                    0.02, 0.1, 0.3, 0.5]
        
            def init_mesh(self, Nx, Ny, kappa_values=[1, 0.1]):
                """Initialize mesh, boundary parts, and p."""
                self.mesh = UnitSquareMesh(Nx, Ny)
                self.divisions = (Nx, Ny)
        
                self.boundary_parts = \ 
                     mark_boundaries_in_hypercube(self.mesh, d=2)
                self.ds =  Measure(
                    'ds', domain=self.mesh,
                    subdomain_data=self.boundary_parts)
        
                # The domain is the unit square with an embedded rectangle
                class Rectangle(SubDomain):
                    def inside(self, x, on_boundary):
                        return 0.3 <= x[0] <= 0.7 and 0.3 <= x[1] <= 0.7
        
                self.materials = CellFunction('size_t', self.mesh)
                self.materials.set_all(0)  # "the rest"
                subdomain = Rectangle()
                subdomain.mark(self.materials, 1)
                self.V0 = FunctionSpace(self.mesh, 'DG', 0)
                self.kappa = Function(self.V0)
                help = np.asarray(self.materials.array(), dtype=np.int32)
                self.kappa.vector()[:] = np.choose(help, kappa_values)
        
            def time_step(self, t):
                if t < 0.04:
                    return 0.0005
                else:
                    return 0.025
        
            def end_time(self):
                return 0.5
        
            def heat_conduction(self):
                return self.kappa
        
            def Dirichlet_conditions(self, t):
                """Return list of (value,boundary) pairs."""
                return [(1.0, self.boundary_parts, 0)]

Results          (2)
~~~~~~~~~~~~~~~~~~~~

We run a case where :math:`\alpha=1000`:

.. code-block:: python

        def demo2():
            problem = Problem2(Nx=20, Ny=5, kappa_values=[1,1000])
            print('kappa:', problem.kappa.vector().array())
            problem.solve(theta=0.5, linear_solver='direct')

As shown in Figure :ref:`ch:diffusion:refactor:class_solver:fig2`,
the highly conductive inner material leads to a flat temperature profile
in this region. The start of the process is as before, but
with an insulated boundary at :math:`x=1`, heat builds up with time.

.. _ch:diffusion:refactor:class_solver:fig2:

.. figure:: thermal_layer2_CN20.png
   :width: 500

   *Development of thermal boundary layer in heterogeneous medium*

.. raw:: html
        
        <div>
        <video  loop controls width='640' height='365' preload='none'>
            <source src='mov/thermal_layer2/movie.mp4'  type='video/mp4;  codecs="avc1.42E01E, mp4a.40.2"'>
            <source src='mov/thermal_layer2/movie.webm' type='video/webm; codecs="vp8, vorbis"'>
            <source src='mov/thermal_layer2/movie.ogg'  type='video/ogg;  codecs="theora, vorbis"'>
        </video>
        </div>
        <p><em>Developing thermal boundary layer in heterogeneous medium (notice the jump in speed, i.e., time step!)</em></p>
        
        <!-- Issue warning if in a Safari browser -->
        <script language="javascript">
        if (!!(window.safari)) {
          document.write("<div style=\"width: 95%%; padding: 10px; border: 1px solid #100; border-radius: 4px;\"><p><font color=\"red\">The above movie will not play in Safari - use Chrome, Firefox, or Opera.</font></p></div>")}
        </script>
        

Oscillating boundary temperature
--------------------------------

The next example concerns the question: How is the temperature in the
ground affected by day and night variations at the earth's surface?
We consider a rectangular domain with an embedded subdomain as in the
previous example. At the side :math:`y=1` (representing the earth's
surface), we have an oscillating temperature:

.. math::
         u_B(t) = U_s + A\sin(w t),

where :math:`U_s` is the mean temperature, :math:`[-A,A]` is the temperature variation,
and :math:`w` is the frequency, here equal to :math:`w=2\pi/P`, where :math:`P` is the
period of 24 h.

At the other we assume symmetry or "no change", which implies
:math:`\partial u/\partial n = 0`. The initial condition is taken as
:math:`u=U_s`, but any value will be lost in long time simulations as a
steady state oscillatory condition is established.
Figure :ref:`ch:diffusion:refactor:class_solver:fig6` shows the domain and
boundary conditions.

.. Program for the sketch below: fig/thermal_layer3.py

.. _ch:diffusion:refactor:class_solver:fig6:

.. figure:: thermal_layer3_scaling_sketch.png
   :width: 800

   *Domain with oscillating temperature at the boundary: unscaled (left) and scaled (left)*

Scaling
~~~~~~~

Now we expect :math:`u` to oscillate around :math:`U_s` with amplitude :math:`A`, so to
have :math:`\bar u\in [-1,1]`, we set

.. math::
         \bar u = \frac{u-U_s}{A}{\thinspace .}

The scaled boundary condition is then

.. math::
         \bar u_B(\bar t) = \sin(wt_c\bar t){\thinspace .}

We use a time scale based on :math:`w`, i.e., :math:`t_c=1/w`.
Chapter 3.2.4 in [Ref1]_ (see `ebook <http://hplgit.github.io/scaling-book/doc/pub/book/html/._scaling-book008.html#___sec142>`__)
has an in-depth
coverage of the scaling of this problem. The challenge is that
the temperature will oscillate close to :math:`y=1`, but the oscillations
will decay as we move downwards. One can for special set of parameters
get very thin oscillating boundary layers, which make great demands to
the numerical methods, or one may not achieve substantial decay
so the boundary condition on :math:`y=0` becomes wrong. To zoom in on the
solution in the right way,
it turns out that the right spatial length scale is
:math:`\sqrt{2\kappa/(wc\varrho)}`. With this length scale, a typical
length of the domain in :math:`y` direction is 6.
The most appropriate time scale is :math:`t_c=2/w`.

We end up with the same scaled problem as in the previous section,
except that at :math:`y=1` we have

.. math::
         \bar u_B(\bar t) = \sin(2\bar t){\thinspace .}

[**hpl 13**: The position of the subdomain should be scaled. Now it is basically postioned in the scaled domain.]

The problem class          (2)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We need a different reasoning about the time steps size since this is an
oscillatory problem. We also need to stretch the unit square so it becomes
:math:`[0,1]\times [0,6]` as desired. We also need to change the Dirichlet
condition. Finally, we need to adjust the curve plotting
as it now takes place in :math:`y` direction, and the axes are different.
Much of class ``Problem2`` can be reused, so it makes sense to make
a subclass and override the methods that do not fit.

.. code-block:: python

        class Problem3(Problem2):
            """Oscillating surface temperature."""
            def __init__(self, Nx, Ny, kappa_values):
                # Oscillating temperature at x=0:
                self.surface_temp = lambda t: sin(2*t)
                w = 2.0
                period = 2*np.pi/w
                self.dt = period/30  # need this before Problem2.__init__
                self.T = 4*period
        
                Problem2.__init__(self, Nx, Ny, kappa_values)
                # Stretch the mesh in y direction so we get [0,1]x[0,6]
                self.mesh.coordinates()[:] = np.array(
                    [self.mesh.coordinates()[:,0],
                     6*self.mesh.coordinates()[:,1]]).transpose()
        
                self.user_action_object = \ 
                           ProcessSolution(self, u_min=-1, u_max=1)
                # Compare u(x,t) as curve plots for the following times
                self.times4curveplots = [
                    period/4, 4*period/8, 3*period/4, 3*period]
        
            def time_step(self, t):
                return self.dt
        
            def end_time(self):
                return self.T
        
            def Dirichlet_conditions(self, t):
                """Return list of (value,boundary) pairs."""
                return [(self.surface_temp(t), self.boundary_parts, 3)]
        
            def user_action(self, t, u, timestep):
                """Post process solution u at time t."""
                tol = 1E-14
                self.user_action_object(t, u, timestep)
                # Also plot u along line x=1/2
                y_coor = np.linspace(tol, 6-tol, 101)
                y = [(0.5, y_) for y_ in y_coor]
                u = self.solution()
                u_line = [u(y_) for y_ in y]
                # Animation in figure(1)
                self.plt.figure(1)
                self.plt.plot(
                    y_coor, u_line, 'b-',
                    legend=['u, t=%.4f' % t],
                    title='Solution along x=1/2, time step: %g' %
                    self.time_step(t),
                    xlabel='y', ylabel='u',
                    axis=[0, 6, -1.2, 1.2])
                self.plt.savefig('tmp_%04d.png' % timestep)
                # Accumulated selected curves in one plot in figure(2)
                self.plt.figure(2)
                for t_ in self.times4curveplots:
                    if abs(t - t_) < 0.5*self.time_step(t):
                        self.plt.plot(
                            y_coor, u_line, '-',
                            legend=['u, t=%.4f' % t],
                            xlabel='y', ylabel='u',
                            axis=[0, 6, -1.2, 1.2])
                        self.plt.hold('on')

The problem is solved by

.. code-block:: python

        def demo3():
            problem = Problem3(Nx=5, Ny=20, kappa_values=[1,1000])
            problem.solve(theta=0.5, linear_solver='direct')

Results          (3)
~~~~~~~~~~~~~~~~~~~~

We have made runs with a homogeneous medium and with a heterogeneous medium
(using :math:`\alpha=1000` as in the previous section). Animation in ParaView
meets the problem that :math:`u=\hbox{const}` initially so we must manually set a
range for the data. Bring up the Color Map Editor (click on **Edit** in
the *Coloring* section in the left part of the GUI), click on the second
icon from the top, to "rescale the custom range", give -1 and 1
as the data range, and click **Update** to bring this range into action.

.. _ch:diffusion:refactor:class_solver:fig3:

.. figure:: thermal_layer4.png
   :width: 800

   *Oscillating boundary temperature: homogeneous (left) and heterogeneous (right) medium*

.. raw:: html
        
        <div>
        <video  loop controls width='640' height='365' preload='none'>
            <source src='mov/thermal_layer3/movie.mp4'  type='video/mp4;  codecs="avc1.42E01E, mp4a.40.2"'>
            <source src='mov/thermal_layer3/movie.webm' type='video/webm; codecs="vp8, vorbis"'>
            <source src='mov/thermal_layer3/movie.ogg'  type='video/ogg;  codecs="theora, vorbis"'>
        </video>
        </div>
        <p><em>Oscillating boundary temperature and homogeneous medium.</em></p>
        
        <!-- Issue warning if in a Safari browser -->
        <script language="javascript">
        if (!!(window.safari)) {
          document.write("<div style=\"width: 95%%; padding: 10px; border: 1px solid #100; border-radius: 4px;\"><p><font color=\"red\">The above movie will not play in Safari - use Chrome, Firefox, or Opera.</font></p></div>")}
        </script>
        

.. raw:: html
        
        <div>
        <video  loop controls width='640' height='365' preload='none'>
            <source src='mov/thermal_layer4/movie.mp4'  type='video/mp4;  codecs="avc1.42E01E, mp4a.40.2"'>
            <source src='mov/thermal_layer4/movie.webm' type='video/webm; codecs="vp8, vorbis"'>
            <source src='mov/thermal_layer4/movie.ogg'  type='video/ogg;  codecs="theora, vorbis"'>
        </video>
        </div>
        <p><em>Oscillating boundary temperature and heterogeneous medium.</em></p>
        
        <!-- Issue warning if in a Safari browser -->
        <script language="javascript">
        if (!!(window.safari)) {
          document.write("<div style=\"width: 95%%; padding: 10px; border: 1px solid #100; border-radius: 4px;\"><p><font color=\"red\">The above movie will not play in Safari - use Chrome, Firefox, or Opera.</font></p></div>")}
        </script>
        

.. raw:: html
        
        <div>
        <video  loop controls width='640' height='365' preload='none'>
            <source src='mov/thermal_layer3/paraview.ogg'  type='video/ogg;  codecs="theora, vorbis"'>
        </video>
        </div>
        <p><em>Scalar field animation (homogeneous medium).</em></p>
        
        <!-- Issue warning if in a Safari browser -->
        <script language="javascript">
        if (!!(window.safari)) {
          document.write("<div style=\"width: 95%%; padding: 10px; border: 1px solid #100; border-radius: 4px;\"><p><font color=\"red\">The above movie will not play in Safari - use Chrome, Firefox, or Opera.</font></p></div>")}
        </script>
        


.. admonition:: Tip: Let related problem classes utilize inheritance

   The last three examples regard quite related problems, yet they have
   substantial differences. The typical approach to making FEniCS software
   to these applications would be to have three flat programs, each containing
   a full solver of the PDE, but with details adapted to the problem at
   hand. The class approach, on the other hand,
   shows how all applications share the same
   numerical implementation. The different problem classes can also share
   a lot of code so inheritance is a way to save writing.
   However, such class programming requires some experience as it is easy
   to make mistakes and inherit functionality that is wrong.




.. --- begin exercise ---

Exercise 5: Implement second-order schemes in time
--------------------------------------------------

A backward difference of accuracy :math:`\mathcal{O}(\Delta t^2)` involves
three time levels:

.. math::
         \frac{\partial}{\partial t}u(x, y, t_{n+1}) \approx
        \frac{u^{n+1} - 4u^n + u^{n-1}}{2\Delta t}{\thinspace .}

Make a solver based on this scheme. For the first time step, use the
two-level
Backward Euler method. The implementation should also offer the Backward Euler
method. In addition, implement the Crank-Nicolson method where you solve

.. math::
         \frac{\partial u}{\partial t} = G(u)

by

.. math::
         \frac{u^{n+1}-u^n}{\Delta t} = \frac{1}{2}(G(u^{n+1}) + G(u^n)){\thinspace .}

This method also has a truncation error of order :math:`\Delta t^2`.
[**hpl 14**: Find some good test problems for comparing the performance of the schemes.]

.. --- end exercise ---

