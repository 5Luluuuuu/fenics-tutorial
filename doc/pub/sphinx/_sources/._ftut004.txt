.. !split

.. _ch:poisson:

The Poisson solver revisited
%%%%%%%%%%%%%%%%%%%%%%%%%%%%

[**hpl 6**: I don't like this title, but have no other good alternaive...]

.. _tut:poisson1:impl2:

Refactored implementation          (1)
======================================

Our first programs in this book are all "flat". That is,
they are not organized
into logical, reusable units in terms of Python functions. Such flat
programs are popular for quickly testing out some software, but not
well suited for serious problem solving. We shall therefore at once
*refactor* the program, meaning that we divide it into functions, but
this is just a reordering of the existing statements. During
refactoring, we try make functions as reusable as possible in other
contexts, but statements specific to a certain problem or task are
also encapsulated in (non-reusable) functions.  Being able to
distinguish reusable code from specialized code is a key issue when
refactoring code, and this ability depends on a good mathematical
understanding of the problem at hand ("what is general, what is
special?").  In a flat program, general and specialized code (and
mathematics) is often mixed together.

A general solver function
-------------------------

We consider the flat program developed in the section :ref:`tut:poisson1:impl`.
Some of the code in this program is needed to solve any
Poisson problem :math:`-\nabla^2 u=f` on :math:`[0,1]\times [0,1]` with :math:`u=u_0` on
the boundary, while other statements arise from our simple test
problem. Let us collect the general, reusable code in a function
``solver``.  Our special test problem will then just be an application
of ``solver`` with some additional statements.  We limit the ``solver``
function to just *compute the numerical solution*. Plotting and
comparing the solution with the exact solution are considered to be
problem-specific activities to be performed elsewhere.

We parameterize ``solver`` by :math:`f`, :math:`u_0`, and the resolution of the
mesh. Since it is so trivial to use higher-order finite element
functions by changing the third argument to ``FunctionSpace``, we let
also the degree of the polynomials in the finite element basis
functions be an argument to ``solver``.

.. code-block:: python

        from fenics import *
        
        def solver(f, u0, Nx, Ny, degree=1):
            """
            Solve -Laplace(u)=f on [0,1]x[0,1] with 2*Nx*Ny Lagrange
            elements of specified degree and u=u0 (Expresssion) on
            the boundary.
            """
            # Create mesh and define function space
            mesh = UnitSquareMesh(Nx, Ny)
            V = FunctionSpace(mesh, 'Lagrange', degree)
        
            def u0_boundary(x, on_boundary):
                return on_boundary
        
            bc = DirichletBC(V, u0, u0_boundary)
        
            # Define variational problem
            u = TrialFunction(V)
            v = TestFunction(V)
            a = dot(grad(u), grad(v))*dx
            L = f*v*dx
        
            # Compute solution
            u = Function(V)
            solve(a == L, u, bc)
        
            return u

Plotting for the test problem
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The additional tasks we did in our initial program can be placed in
other functions. For example, plotting the solution in our particular
test problem is placed in an
``application_test`` function:

.. code-block:: python

        def application_test():
            """Plot the solution in the test problem."""
            u0 = Expression('1 + x[0]*x[0] + 2*x[1]*x[1]')
            f = Constant(-6.0)
            u = solver(f, u0, 6, 4, 1)
            # Dump solution to file in VTK format
            file = File("poisson.pvd")
            file << u
            # Plot solution and mesh
            plot(u)

Make a module!
~~~~~~~~~~~~~~

The refactored code is put in a file `ft04_p2D_func.py <https://github.com/hplgit/fenics-tutorial/blob/master/src/poisson/ft04_p2D_func.py>`__. We should make
sure that such a file can be imported (and hence reused) in other programs.
Then all statements in the main program should appear with a test
``if __name__ == '__main__':``. This test is true if the file is executed
as a program, but false if the file is imported.
If we want to run this file in the same way as we can
run ``ft04_p2D_func.py``, the main program is simply a call to
``application_test()`` followed by a call ``interactive()`` to hold the plot:

.. code-block:: python

        if __name__ == '__main__':
            application_test()
            # Hold plot
            interactive()

.. index:: unit testing

Verification and unit tests
---------------------------

The remaining part of our first program is to compare the numerical and
the exact solution. Every time we edit the code we must rerun the test
and examine that ``max_error`` is sufficiently small so we know that the
code still works. To this end, we shall adopt *unit testing*, meaning
that we create a mathematical test and corresponding software that
can run all our tests automatically and check that all tests pass.
Python has several tools for unit testing. Two very popular ones are
pytest and nose. These are almost identical and very easy to use.
More classical unit testing with test classes is offered by the built-in
tool ``unittest``, but here we are going to use pytest (or nose) since it demands
shorter and clearer code.

Mathematically, our unit test is that the finite element solution of
our problem when :math:`f=-6` equals the exact solution :math:`u=u_0=1+x^2+2y^2`.
We have already created code that finds the maximum error in the
numerical solution. Because of rounding errors, we cannot demand this
maximum error to be zero, but we have to use a tolerance, which depends
to the number of elements and the degrees of the polynomials in the finite
element basis functions. In the section :ref:`tut:poisson1:impl:dissect` we
reported some experiments with the size of the maximum error. If we want
to test that ``solver`` works for meshes up to :math:`2(20\times 20)` elements
and cubic Lagrange elements, :math:`10^{-11}` is
an appropriate tolerance for testing that the maximum error vanishes.

Only three statements are necessary to carry out the unit test. However,
we shall embed these statements in software that the testing frameworks
pytest and nose can recognize. This means that each unit test
must be placed in a function that

 * has a name starting with ``test_``

 * has no arguments

 * implements the test as ``assert success, msg``

Regarding the last point, ``success`` is a boolean expression that is ``False``
if the test fails, and in that case the string ``msg`` is written to the
screen. When the test fails, ``assert`` raises an ``AssertionError`` exception
in Python, otherwise the statement runs silently. The ``msg`` string is
optional, so ``assert success`` is the minimal test. In our case, we
will do ``assert max_error < tol``, where ``tol`` is the tolerance (:math:`10^{-11}`)
mentioned above.

A proper *test function* for implementing this unit test in the pytest
or nose testing frameworks has the following form. Note that we perform
the test for different mesh resolutions and degrees of finite elements.

.. code-block:: python

        def test_solver():
            """Reproduce u=1+x^2+2y^2 to "machine precision"."""
            tol = 1E-11  # This problem's precision
            u0 = Expression('1 + x[0]*x[0] + 2*x[1]*x[1]')
            f = Constant(-6.0)
            for Nx, Ny in [(3,3), (3,5), (5,3), (20,20)]:
                for degree in 1, 2, 3:
                    print('solving on 2(%dx%d) mesh with P%d elements'
                          % (Nx, Ny, degree))
                    u = solver(f, u0, Nx, Ny, degree)
                    # Make a finite element function of the exact u0
                    V = u.function_space()
                    u0_Function = interpolate(u0, V)  # exact solution
                    # Check that dof arrays are equal
                    u0_array = u0_Function.vector().array()  # dof values
                    max_error = (u0_array - u.vector().array()).max()
                    msg = 'max error: %g for 2(%dx%d) mesh and degree=%d' %\ 
                          (max_error, Nx, Ny, degree)
                    assert max_error < tol, msg

We can at any time run

.. code-block:: text

        Terminal> py.test -s -v ft04_p2D_func.py

and the pytest tool will run all functions ``test_*()`` in the file and report
how the tests go.

We shall make it a habit in this book to encapsulate numerical test
problems in unit tests as done above, and we strongly encourage the
reader to create similar unit tests whenever a FEniCS solver is
implemented. We dare to assert that this is the only serious way
do reliable computational science with FEniCS.


.. admonition:: Tip: Print messages in test functions

   The ``assert`` statement runs silently when the test passes so users may
   become uncertain if all the statements in a test function are really
   executed. A psychological help is to print out something before ``assert``
   (as we do in the example above) such that it is clear that the
   test really takes place.
   (Note that ``py.test`` needs the ``-s`` option to show printout
   from the test functions.)




The next three sections deal with some technicalities about specifying
the solution method for linear systems (so that you can solve large
problems) and examining array data from the computed solution (so that
you can check that the program is correct).  These technicalities are
scattered around in forthcoming programs. However, the impatient
reader who is more interested in seeing the previous program being
adapted to a real physical problem, and play around with some
interesting visualizations, can safely jump to the section :ref:`tut:poisson:membrane`.  Information in the intermediate sections
can be studied on demand.

.. --- begin exercise ---

Exercise 1: Solve a Poisson problem
-----------------------------------

Solve the following problem

.. _Eq:_auto4:

.. math::

    \tag{33}
    \nabla^2 u = 2e^{-2x}\sin(\pi y)((4-5\pi^2)\sin(2\pi x) - 8\pi\cos(2\pi x))
        \hbox{ in }\Omega = [0,1]\times [0,1]
        
        

.. _Eq:_auto5:

.. math::

    \tag{34}
    u = 0\quad\hbox{ on }\partial\Omega
        
        

The exact solution is given by

.. math::
         u(x,y) = 2e^{-2x}\sin(\pi x)\sin(\pi y){\thinspace .}

Compute the maximum numerical approximation error in a mesh with
:math:`2(N_x\times N_y)` elements and in a mesh with double resolution:
:math:`4(N_x\times N_y)` elements. Show that the doubling the resolution
reduces the error by a factor 4 when using Lagrange elements of degree one.
Make an illustrative plot of the solution too.

**a)**
Base your implementation on editing the program
``ft01_p2D_flat.py``.

.. --- begin hint in exercise ---

**Hint 1.**
In the string for an ``Expression`` object, ``pi`` is the value of
:math:`\pi`. Also note that :math:`\pi^2` must be expressed with syntax
``pow(pi,2)`` and not (the common Python syntax) ``pi**2``.

FEniCS will abort with a compilation error if you type the expressions
in a wrong way syntax-wise.  Search for *error:* in the
``/very/long/path/compile.log`` file mentioned in the error message to
see what the C++ compiler reported as error in the expressions.

.. --- end hint in exercise ---

.. --- begin hint in exercise ---

**Hint 2.**
The result that with P1 elements, doubling the resolution reduces the error
with a factor of four, is an
asymptotic result so it requires a sufficiently fine mesh. Here
one may start with :math:`N_x=N_y=20`.

.. --- end hint in exercise ---

Filename: ``p2D_fsin_flat``.

.. --- begin solution of exercise ---

**Solution.**
Looking at the ``ft01_p2D_flat.py`` code, we realize that
the following edits are required:

 * Modify the ``mesh`` computation.

 * Modify ``u0`` and ``f``.

 * Add expression for the exact solution.

 * Modify the computation of the numerical error.

 * Insert a loop to enable solving the problem twice.

 * Put the error reduction computation and the plot statements after the loop.

Here is the modified code:

.. code-block:: python

        from fenics import *
        
        Nx = Ny = 20
        error = []
        for i in range(2):
            Nx *= (i+1)
            Ny *= (i+1)
        
            # Create mesh and define function space
            mesh = UnitSquareMesh(Nx, Ny)
            V = FunctionSpace(mesh, 'Lagrange', 1)
        
            # Define boundary conditions
            u0 = Constant(0)
        
            def u0_boundary(x, on_boundary):
                return on_boundary
        
            bc = DirichletBC(V, u0, u0_boundary)
        
            # Define variational problem
            u = TrialFunction(V)
            v = TestFunction(V)
            f = Expression('-2*exp(-2*x[0])*sin(pi*x[1])*('
                           '(4-5*pow(pi,2))*sin(2*pi*x[0]) '
                           ' - 8*pi*cos(2*pi*x[0]))')
            # Note: no need for pi=DOLFIN_PI in f, pi is valid variable
            a = inner(nabla_grad(u), nabla_grad(v))*dx
            L = f*v*dx
        
            # Compute solution
            u = Function(V)
            solve(a == L, u, bc)
        
            u_e = Expression(
                '2*exp(-2*x[0])*sin(2*pi*x[0])*sin(pi*x[1])')
        
            u_e_Function = interpolate(u_e, V)         # exact solution
            u_e_array = u_e_Function.vector().array()  # dof values
            max_error = (u_e_array - u.vector().array()).max()
            print('max error:', max_error, '%dx%d mesh' % (Nx, Ny))
            error.append(max_error)
        
        print('Error reduction:', error[1]/error[0])
        
        # Plot solution and mesh
        plot(u)
        
        # Dump solution to file in VTK format
        file = File("poisson.pvd")
        file << u
        
        # Hold plot
        interactive()

The number :math:`\pi` has the symbol ``M_PI`` in C and C++, but in C++
strings in ``Expression`` objects, the symbol ``pi`` can be used directly
(or one can use the less readable ``DOLFIN_PI``).

.. figure:: p2D_fsin.png
   :width: 500

.. --- end solution of exercise ---

**b)**
Base your implementation on a new file that imports functionality
from the module ``ft04_p2D_func.py``. Embed the check of the
reduction of the numerical approximation error in a unit test.
Filename: ``p2D_fsin_func``.

.. --- begin solution of exercise ---

**Solution.**
Solving the two problems is a matter of calling ``solver`` with
different sets of arguments.
To compute the numerical error,
we need code that is close to what we have in ``test_solver``.

.. code-block:: python

        from p2D_func import (
            solver, Expression, Constant, interpolate, File, plot,
            interactive)
        
        def data():
            """Return data for this Poisson problem."""
            u0 = Constant(0)
            u_e = Expression(
                '2*exp(-2*x[0])*sin(2*pi*x[0])*sin(pi*x[1])')
            f = Expression('-2*exp(-2*x[0])*sin(pi*x[1])*('
                           '(4-5*pow(pi,2))*sin(2*pi*x[0]) '
                           ' - 8*pi*cos(2*pi*x[0]))')
            return u0, f, u_e
        
        def test_solver():
            """Check convergence rate of solver."""
            u0, f, u_e = data()
            Nx = 20
            Ny = Nx
            error = []
            # Loop over refined meshes
            for i in range(2):
                Nx *= i+1
                Ny *= i+1
                print('solving on 2(%dx%d) mesh' % (Nx, Ny))
                u = solver(f, u0, Nx, Ny, degree=1)
                # Make a finite element function of the exact u_e
                V = u.function_space()
                u_e_array = interpolate(u_e, V).vector().array()
                max_error = (u_e_array - u.vector().array()).max()  # Linf norm
                error.append(max_error)
                print('max error:', max_error)
            for i in range(1, len(error)):
                error_reduction = error[i]/error[i-1]
                print('error reduction:', error_reduction)
                assert abs(error_reduction - 0.25) < 0.1
        
        def application():
            """Plot the solution."""
            u0, f, u_e = data()
            Nx = 40
            Ny = Nx
            u = solver(f, u0, Nx, Ny, 1)
            # Dump solution to file in VTK format
            file = File("poisson.pvd")
            file << u
            # Plot solution and mesh
            plot(u)
        
        if __name__ == '__main__':
            test_solver()
            application()
            # Hold plot
            interactive()

The unit test is embedded in a proper test function ``test_solver``
for the pytest or
nose testing frameworks. Visualization of the solution is encapsulated
in the ``application`` function. Since we need ``u_e``, ``u0``, and ``f``
in two functions, we place the definitions in a function ``data`` to
avoid copies of these expressions.

.. --- end solution of exercise ---

.. Closing remarks for this Exercise

Remarks
~~~~~~~

This exercise demonstrates that changing a flat program to solve a new
problem requires careful editing of statements scattered around in the
file, while
the solution in b), based on the ``solver`` function, requires *no modifications*
of the ``ft04_p2D_func.py`` file, just
*minimalistic additional new code* in a separate file. The Poisson solver
remains in one place (``ft04_p2D_func.py``) while in a) we got two
Poisson solvers. If you decide to switch to an iterative solution method
for linear systems, you can do so in one place in b), and all applications
can take advantage of the extension. Hopefully, with this exercise
you realize that embedding
PDE solvers in functions (or classes) makes more reusable software than
flat programs.

.. --- end exercise ---

