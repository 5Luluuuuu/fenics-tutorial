.. !split

.. _ch:gallery:

A Gallery of finite element solvers
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


..

    The goal of this chapter is to show how a range of important PDEs
    from science and engineering can be quickly solved with a few lines
    of FEniCS code. We start with the time-dependent diffusion equation
    and continue with a nonlinear Poisson equation, the vector PDE for
    linear elasticity, and the Navier-Stokes equations.
    
    We derive the variational formulation and put
    together basic objects such as ``Mesh``, ``Function``,
    ``FunctionSpace``, ``TrialFunction``,
    and ``TestFunction`` to express in variational formulation in Python code
    in a way that closely resembles the mathematics.



.. Stand-alone notebook?

.. _ch:fundamentals:diffusion:

The time-dependent diffusion equation
=====================================

The examples in the section :ref:`ch:poisson0:impl`
illustrate that solving linear, stationary PDE problems with the aid
of FEniCS is easy and requires little programming.  FEniCS clearly
automates the spatial discretization by the finite element method. One
can use a separate, one-dimensional finite element method in the
domain as well, but very often, it is easier to just use a finite
difference method, or to formulate the problem as an ODE system and
leave the time-stepping to an ODE solver.

.. The solution of

.. nonlinear problems, as we showed in Section

.. :ref:`ch:poisson0:nonlinear`, can also be automated (cf. Section

.. :ref:`ftut:nonlinear:Newton:auto`), but many scientists will prefer to

.. code the solution strategy of the nonlinear problem themselves and

.. experiment with various combinations of strategies in difficult

.. problems. Time-dependent problems are somewhat similar in this

.. respect: we have to add a time discretization scheme, which is often

.. quite simple, making it natural to explicitly code the details of the

.. scheme so that the programmer has full control.

.. We shall explain how

.. easily this is accomplished through examples.

[**hpl 5**: Should exemplify all three approaches? With emphasis on simple finite differences?]

.. _ftut:timedep:diffusion1:

Variational formulation          (1)
------------------------------------

.. index:: time-dependent PDEs

Our model problem for time-dependent PDEs reads

.. _Eq:ch:diffusion0:pde1:

.. math::

    \tag{17}
    {\partial u\over\partial t} = \nabla^2 u + f\hbox{ in }\Omega,
        
        

.. _Eq:ch:diffusion0:pde1:bc:

.. math::

    \tag{18}
    u = u_0\hbox{ on } \partial \Omega,
        
        

.. _Eq:ch:diffusion0:pde1:ic:

.. math::

    \tag{19}
    u = I \mbox{ at } t=0{\thinspace .}
        
        

Here, :math:`u` varies with space and time, e.g., :math:`u=u(x,y,t)` if the spatial
domain :math:`\Omega` is two-dimensional. The source function :math:`f` and the
boundary values :math:`u_0` may also vary with space and time.
The initial condition :math:`I` is a function of space only.

A straightforward approach to solving time-dependent PDEs by the
finite element method is to first discretize the time derivative by a
finite difference approximation, which yields a recursive set of
stationary problems, and then turn each stationary problem into a
variational formulation.

Let superscript :math:`k` denote a quantity at time :math:`t_k`, where :math:`k` is an
integer counting time levels. For example, :math:`u^k` means :math:`u` at time
level :math:`k`.  A finite difference discretization in time first consists
in sampling the PDE at some time level, say :math:`k`:

.. _Eq:ch:diffusion0:pde1:tk:

.. math::

    \tag{20}
    {\partial \over\partial t}u^k = \nabla^2 u^k + f^k{\thinspace .}
        
        

The time-derivative can be approximated by a finite difference.
For simplicity and stability reasons we choose a
simple backward difference:

.. _Eq:ch:diffusion0:BE:

.. math::

    \tag{21}
    {\partial \over\partial t}u^k\approx {u^k - u^{k-1}\over{{\Delta t}}},
        
        

where :math:`{\Delta t}` is the time discretization parameter.
Inserting :ref:`(21) <Eq:ch:diffusion0:BE>` in :ref:`(20) <Eq:ch:diffusion0:pde1:tk>` yields

.. _Eq:ch:diffusion0:pde1:BE:

.. math::

    \tag{22}
    {u^k - u^{k-1}\over{{\Delta t}}} = \nabla^2 u^k + f^k{\thinspace .}
        
        

This is our time-discrete version of the diffusion PDE
:ref:`(17) <Eq:ch:diffusion0:pde1>`.

We may reorder :ref:`(22) <Eq:ch:diffusion0:pde1:BE>` so
that the left-hand side contains the terms with the unknown :math:`u^k` and
the right-hand side contains computed terms only. The result
is a recursive set of spatial
(stationary) problems for :math:`u^k` (assuming :math:`u^{k-1}` is known from
computations at the previous time level):

.. _Eq:ch:diffusion0:pde1:u0:

.. math::

    \tag{23}
    u^0 = I, 
        

.. _Eq:ch:diffusion0:pde1:uk:

.. math::

    \tag{24}
    u^k - {{\Delta t}}\nabla^2 u^k =  u^{k-1} + {{\Delta t}} f^k,\quad k=1,2,\ldots
        
        

Given :math:`I`, we can solve for :math:`u^0`, :math:`u^1`, :math:`u^2`, and so on.

An alternative to :ref:`(24) <Eq:ch:diffusion0:pde1:uk>`, which can be
convenient in implementations, is to collect
all terms on one side of the equality sign:

.. _Eq:ch:diffusion0:pde1:uk2:

.. math::

    \tag{25}
    F(u;v) = u^k - {{\Delta t}}\nabla^2 u^k -  u^{k-1} - {{\Delta t}} f^k = 0,\quad k=1,2,\ldots
        
        

We use a finite element method to solve
:ref:`(23) <Eq:ch:diffusion0:pde1:u0>` and either of the equations
:ref:`(24) <Eq:ch:diffusion0:pde1:uk>` or :ref:`(25) <Eq:ch:diffusion0:pde1:uk2>`.  This
requires turning the equations into weak forms.  As usual, we multiply
by a test function :math:`v\in \hat V` and integrate second-derivatives by
parts. Introducing the symbol :math:`u` for :math:`u^k` (which is natural in the
program), the resulting weak form arising from
formulation :ref:`(24) <Eq:ch:diffusion0:pde1:uk>`
can be conveniently written in
the standard notation:

.. math::
         a(u,v)=L(v),

where

.. _Eq:ch:diffusion0:pde1:a:

.. math::

    \tag{26}
    a(u,v) = \int_\Omega\left( uv + {{\Delta t}}
        \nabla u\cdot \nabla v\right) {\, \mathrm{d}x}, 
        

.. _Eq:ch:diffusion0:pde1:L:

.. math::

    \tag{27}
    L(v) = \int_\Omega \left(u^{k-1} + {{\Delta t}}  f^k\right)v {\, \mathrm{d}x}{\thinspace .}
        
        

The alternative form :ref:`(25) <Eq:ch:diffusion0:pde1:uk2>` has an
abstract formulation

.. math::
         F(u;v) = 0,

where

.. _Eq:ch:diffusion0:pde1:F:

.. math::

    \tag{28}
    F = \int_\Omega\left( uv + {{\Delta t}}
        \nabla u\cdot \nabla v -
        \left(u^{k-1} - {{\Delta t}}  f^k\right)v\right) {\, \mathrm{d}x}{\thinspace .}
        
        

The initial condition :ref:`(23) <Eq:ch:diffusion0:pde1:u0>`
can also be turned into a weak form,

.. math::
         a_0(u,v)=L_0(v),

with

.. _Eq:ch:diffusion0:pde1:a0:

.. math::

    \tag{29}
    a_0(u,v) = \int_\Omega uv {\, \mathrm{d}x}, 
        

.. _Eq:ch:diffusion0:pde1:L0:

.. math::

    \tag{30}
    L_0(v) = \int_\Omega Iv {\, \mathrm{d}x}{\thinspace .} 
        

The alternative is to construct :math:`u_0` by just interpolating :math:`I`
(which is also a much cheaper operation since no linear system is
involved).

The continuous variational problem is to find
:math:`u^0\in V` such that :math:`a_0(u^0,v)=L_0(v)` holds for all :math:`v\in\hat V`,
and then find :math:`u^k\in V`
such that :math:`a(u^k,v)=L(v)` for all :math:`v\in\hat V`,
or alternatively, :math:`F(u^k,v)=0` for all :math:`v\in\hat V`,
:math:`k=1,2,\ldots`.

Approximate solutions in space are found by restricting the functional
spaces :math:`V` and :math:`\hat V` to finite-dimensional spaces, exactly as we
have done in the Poisson problems.  We shall use the symbol :math:`u` for
the finite element approximation at time :math:`t_k`. In case we need to
distinguish this space-time discrete approximation from the exact
solution of the continuous diffusion problem, we use :math:`{u_{\small\mbox{e}}}` for the
latter.  By :math:`u^{k-1}` we mean the finite element approximation of the
solution at time :math:`t_{k-1}`.

Instead of solving :ref:`(23) <Eq:ch:diffusion0:pde1:u0>` by a finite element
method, i.e., projecting :math:`I` onto :math:`V` via the problem
:math:`a_0(u,v)=L_0(v)`, we could simply interpolate :math:`u^0` from :math:`I`. That
is, if :math:`u^0=\sum_{j=1}^N U^0_j\phi_j`, we simply set :math:`U_j=I(x_j,y_j)`,
where :math:`(x_j,y_j)` are the coordinates of node number :math:`j`. We refer to
these two strategies as computing the initial condition by either
projecting :math:`I` or interpolating :math:`I`.  Both operations are easy to
compute through one statement, using either the ``project`` or
``interpolate`` function.

.. _ftut:timedep:diffusion1:impl:

A simple implementation          (1)
------------------------------------

Our program needs to implement the time stepping explicitly, but can
rely on FEniCS to easily compute :math:`a_0`, :math:`L_0`, :math:`F`, :math:`a`, and :math:`L`, and solve
the linear systems for the unknowns.

Test problem          (1)
~~~~~~~~~~~~~~~~~~~~~~~~~

Before starting the coding, we shall construct a problem where it is
easy to determine if the calculations are correct. The simple backward
time difference is exact for linear functions, so we decide to have
a linear variation in time. Combining a second-degree polynomial in space
with a linear term in time,

.. _Eq:ch:diffusion0:pde1:u0test:

.. math::

    \tag{31}
    u = 1 + x^2 + \alpha y^2 + \beta t,
        
        

yields a function whose computed values at the nodes will be exact,
regardless of the size of the elements and :math:`{\Delta t}`, as long as the mesh
is uniformly partitioned.  By inserting
:ref:`(31) <Eq:ch:diffusion0:pde1:u0test>` in the PDE problem
:ref:`(17) <Eq:ch:diffusion0:pde1>`, it follows that :math:`u_0` must be given as
:ref:`(31) <Eq:ch:diffusion0:pde1:u0test>` and that :math:`f(x,y,t)=\beta - 2 -
2\alpha` and :math:`I(x,y)=1+x^2+\alpha y^2`.

.. index:: ft02_diffusion_flat1.py

The code
~~~~~~~~

A new programming issue is how to deal with functions that vary in
space *and time*, such as the boundary condition :math:`u_0` given by
:ref:`(31) <Eq:ch:diffusion0:pde1:u0test>`.  A natural solution is to apply an
``Expression`` object with time :math:`t` as a parameter, in addition to the
parameters :math:`\alpha` and :math:`\beta`:

.. code-block:: python

        alpha = 3; beta = 1.2
        u0 = Expression('1 + x[0]*x[0] + alpha*x[1]*x[1] + beta*t',
                        alpha=alpha, beta=beta, t=0)

This function expression has the components of ``x`` as independent
variables, while ``alpha``, ``beta``, and ``t`` are parameters.  The
parameters can later be updated as in

.. code-block:: python

        u0.t = t

The essential boundary conditions, along the entire boundary in this case,
are set in the usual way,

.. code-block:: python

        def boundary(x, on_boundary):  # define the Dirichlet boundary
            return on_boundary
        
        bc = DirichletBC(V, u0, boundary)

We shall use ``u`` for the unknown :math:`u` at the new time level and ``u_1``
for :math:`u` at the previous time level.  The initial value of ``u_1``,
implied by the initial condition on :math:`u`, can be computed by either
projecting or interpolating :math:`I`.  The :math:`I(x,y)` function is available
in the program through ``u0``, as long as ``u0.t`` is zero.  We can then
do

.. code-block:: python

        u_1 = interpolate(u0, V)
        # or
        u_1 = project(u0, V)


.. admonition:: Projecting versus interpolating the initial condition

   To actually recover the
   exact solution :ref:`(31) <Eq:ch:diffusion0:pde1:u0test>` to machine precision,
   it is important not to compute the discrete initial condition by
   projecting :math:`I`, but by interpolating :math:`I` so that the degrees of freedom have
   exact values at :math:`t=0` (projection results in approximative values at the
   nodes).




We may either define :math:`a` or :math:`L` according to the formulas above, or
we may just define :math:`F` and ask FEniCS to figure out which terms that
go into the bilinear form :math:`a` and which that go into the linear form
:math:`L`. The latter is convenient, especially in more complicated problems,
so we illustrate that construction:

.. code-block:: python

        dt = 0.3      # time step
        
        u = TrialFunction(V)
        v = TestFunction(V)
        f = Constant(beta - 2 - 2*alpha)
        
        F = u*v*dx + dt*dot(grad(u), grad(v))*dx - (u_1 + dt*f)*v*dx
        a, L = lhs(F), rhs(F)

Finally, we perform the time stepping in a loop:

.. code-block:: python

        u = Function(V)   # the unknown at a new time level
        T = 2             # total simulation time
        t = dt
        
        while t <= T:
            u0.t = t
            solve(a == L, u, bc)
        
            t += dt
            u_1.assign(u)


.. admonition:: Remember to update expression objects with the current time

   Inside the time loop,
   observe that ``u0.t`` must be updated before the ``solve`` statement
   to enforce computation of Dirichlet conditions at the
   current time level. (The Dirichlet conditions look up the ``u0`` object
   for values.)




The time loop above does not contain any comparison of the numerical
and the exact solution, which we must include in order to verify the
implementation.  As in the Poisson equation example in
the section :ref:`ch:poisson0:impl:dissect`, we compute the
difference between the array of nodal values of ``u`` and the array of
the interpolated exact solution.  The following code is to be included
inside the loop, after ``u`` is found:

.. code-block:: python

        u_e = interpolate(u0, V)
        error = np.abs(u_e.vector().array() -
                       u.vector().array()).max()
        print('error, t=%.2f: %-10.3g' % (t, max_error))

The complete program code for this time-dependent case goes as follows:

.. code-block:: python

        from fenics import *
        import numpy as np
        
        # Create mesh and define function space
        nx = ny = 4
        mesh = UnitSquareMesh(nx, ny)
        V = FunctionSpace(mesh, 'P', 1)
        
        # Define boundary conditions
        alpha = 3; beta = 1.2
        u0 = Expression('1 + x[0]*x[0] + alpha*x[1]*x[1] + beta*t',
                        alpha=alpha, beta=beta, t=0)
        
        def boundary(x, on_boundary):
            return on_boundary
        
        bc = DirichletBC(V, u0, boundary)
        
        # Initial condition
        u_1 = interpolate(u0, V)
        #project(u0, V) will not result in exact solution at the nodes!
        
        dt = 0.3      # time step
        
        # Define variational problem
        u = TrialFunction(V)
        v = TestFunction(V)
        f = Constant(beta - 2 - 2*alpha)
        
        F = u*v*dx + dt*dot(grad(u), grad(v))*dx - (u_1 + dt*f)*v*dx
        a, L = lhs(F), rhs(F)
        
        # Compute solution
        u = Function(V)   # the unknown at a new time level
        T = 1.9           # total simulation time
        t = dt
        while t <= T:
            print('time =', t)
            u0.t = t
            solve(a == L, u, bc)
        
            # Verify
            u_e = interpolate(u0, V)
            error = np.abs(u_e.vector().array() -
                           u.vector().array()).max()
            print('error, t=%.2f: %-10.3g' % (t, error))
        
            t += dt
            u_1.assign(u)

The code is available in the
file `ft02_diffusion_flat1.py <https://github.com/hplgit/fenics-tutorial/blob/master/src/diffusion_flat1.py>`__.

Diffusion of a Gaussian function
--------------------------------

The mathematical problem
~~~~~~~~~~~~~~~~~~~~~~~~

Now we want to solve a more physical problem, namely the diffusion of
a Gaussian hill. It means that the initial condition is given by

.. math::
         I(x,y)= e^{-ax^2 - ay^2}

on a domain :math:`[-2,2]\times [2,2]`. A possible value of :math:`a` is 5.

Implementation          (1)
~~~~~~~~~~~~~~~~~~~~~~~~~~~

What are the necessary changes to the previous program?

1. The domain is not the unit square and it needs much higher resolution: ``mesh = RectangleMesh(Point(-2,-2), Point(2,2), 30, 30)``.

2. The boundary condition is zero everywhere: ``DirichletBC(V, Constant(0), boundary)``.

3. The initial condition is different: ``I = Expression('exp(...)')``.

4. The time step should be sufficiently small: ``dt = 0.01`` or ``dt = 0.05``.

5. The right-hand side function ``f`` is zero: ``f = Constant(0)`` (just ``0``
   will given an error as functions in FEniCS must be ``Expression``, ``Function``
   (over a mesh) or ``Constant``).

6. The end time for the simulation must be longer: ``T = 0.8``.

7. The initial condition and the solution inside the time loop should be
   stored to file in VTK format for visualization: ``vtkfile << (u, t)``.

8. We can add a ``plot(u)`` command inside the time loop as well.

The complete program appears below.

.. code-block:: python

        from fenics import *
        import time
        
        # Create mesh and define function space
        nx = ny = 30
        mesh = RectangleMesh(Point(-2,-2), Point(2,2), nx, ny)
        V = FunctionSpace(mesh, 'P', 1)
        
        # Define boundary conditions
        def boundary(x, on_boundary):
            return on_boundary
        
        bc = DirichletBC(V, Constant(0), boundary)
        
        # Initial condition
        I = Expression('exp(-a*pow(x[0],2)-a*pow(x[1],2))', a=5)
        u_1 = interpolate(I, V)
        u_1.rename('u', 'initial condition')
        vtkfile = File('diffusion.pvd')
        vtkfile << (u_1, 0.0)
        #project(u0, V) will not result in exact solution at the nodes!
        
        dt = 0.01    # time step
        
        # Define variational problem
        u = TrialFunction(V)
        v = TestFunction(V)
        f = Constant(0)
        
        F = u*v*dx + dt*dot(grad(u), grad(v))*dx - (u_1 + dt*f)*v*dx
        a, L = lhs(F), rhs(F)
        
        # Compute solution
        u = Function(V)             # the unknown at a new time level
        u.rename('u', 'solution')   # name and label for u
        T = 0.5                     # total simulation time
        t = dt
        while t <= T:
            print('time =', t)
            solve(a == L, u, bc)
            vtkfile << (u, float(t))
            plot(u)
            time.sleep(0.3)
        
            t += dt
            u_1.assign(u)

Visualization in ParaView
~~~~~~~~~~~~~~~~~~~~~~~~~

Start ParaView, choose **File - Open**, open the file ``diffusion.pvd``,
click the green **Apply** button on the left to see the initial condition
being plotting. Choose **View - Animation View**. Click on the play button
or (better) the next frame button in the row of buttons at the top of the GUI
to see the evolution of the scalar field you just have computed:

| 
| 

.. figure:: paraview_animation_buttons.png
   :width: 300

| 
| 

The cross in the middle of the plot can be turned off by the **Show Center**
button:

| 
| 

.. figure:: paraview_show_center_button.png
   :width: 150

| 
| 

Choose **File - Save Animation...** to save the animation to the OGG video format.

.. raw:: html
        
        <div>
        <video  loop controls width='640' height='365' preload='none'>
            <source src='mov/diffusion0.ogg'  type='video/ogg;  codecs="theora, vorbis"'>
        </video>
        </div>
        <p><em></em></p>
        
        <!-- Issue warning if in a Safari browser -->
        <script language="javascript">
        if (!!(window.safari)) {
          document.write("<div style=\"width: 95%%; padding: 10px; border: 1px solid #100; border-radius: 4px;\"><p><font color=\"red\">The above movie will not play in Safari - use Chrome, Firefox, or Opera.</font></p></div>")}
        </script>
        

.. figure:: diffusion0_paraview_animation.png
   :width: 600

| 
| 

.. figure:: diffusion0_3snapshots.png
   :width: 800

.. Stand-alone notebook?

A nonlinear Poisson equation
============================

Variational formulation          (2)
------------------------------------

Now we shall address how to solve nonlinear PDEs in FEniCS. Our
sample PDE for implementation is taken as a nonlinear Poisson equation:

.. _Eq:_auto5:

.. math::

    \tag{32}
    -\nabla\cdot\left( q(u)\nabla u\right) = f,
        
        

in :math:`\Omega`, with :math:`u=u_0` on the boundary :math:`\partial\Omega`.
The coefficient :math:`q(u)` makes the equation nonlinear (unless :math:`q(u)`
is constant in :math:`u`).

The variational formulation of our model problem reads:
Find :math:`u \in V` such that

.. _Eq:ch:poisson0:nonlinear1:

.. math::

    \tag{33}
    F(u; v) = 0 \quad \forall v \in \hat{V},
        

where

.. _Eq:ch:poisson0:nonlinear2:

.. math::

    \tag{34}
    F(u; v) = \int_\Omega (q(u)\nabla u\cdot \nabla v + fv){\, \mathrm{d}x},
        

and

.. math::
        
            \hat{V} &= \{v \in H^1(\Omega) : v = 0 \mbox{ on } \partial Omega\}, \\ 
             V      &= \{v \in H^1(\Omega) : v = u_0 \mbox{ on } \partial\Omega\}{\thinspace .}
        

The discrete problem arises as usual by restricting :math:`V` and :math:`\hat V` to a
pair of discrete spaces. As usual, we omit any subscript on discrete
spaces and simply say :math:`V` and :math:`\hat V` are chosen finite dimensional
according to some mesh with some element type.
Similarly, we let :math:`u` from now on be the discrete solution.

The discrete nonlinear problem is then written as: find :math:`u\in V` such that

.. _Eq:ch:poisson0:nonlinear:d:

.. math::

    \tag{35}
    F(u; v) = 0 \quad \forall v \in \hat{V},
        
        

with :math:`u = \sum_{j=1}^N U_j \phi_j`. Since :math:`F` is a nonlinear function
of :math:`u`, the variational statement gives rise to a system of
nonlinear algebraic equations in the unknowns :math:`U_1,\ldots,U_N`.

.. _ftut:nonlinear:Newton:auto:

A simple implementation          (2)
------------------------------------

Overview
~~~~~~~~

A working solver for the nonlinear Poisson equation is as easy to
implement as a solver for the corresponding linear problem.
All we need to do is the state the formula for :math:`F` and call
``solve(F == 0, u, bc)`` instead of ``solve(a == L, u, bc)`` as we did
in the linear case. Here is a minimalistic code:

.. code-block:: python

        from fenics import *
        
        def q(u):
            """Nonlinear coefficient in the PDE."""
            return 1 + u**2
        
        mesh = UnitSquareMesh(60, 40)
        V = FunctionSpace(mesh, 'P', 1)
        u0 = Expression(...)
        
        def u0_boundary(x, on_boundary):
            return on_boundary
        
        bc = DirichletBC(V, u0, u0_boundary)
        
        # Define variational problem
        u = Function(V)
        v = TestFunction(V)
        f = Expression(...)
        F = dot(q(u)*grad(u), grad(v))*dx - f*v*dx
        
        # Compute solution
        solve(F == 0, u, bc)

The major difference from a linear problem is that the unknown function
``u`` in the variational form is in the nonlinear case
a ``Function``, not a ``TrialFunction``.

The ``solve`` function takes the nonlinear equations and derives symbolically
the Jacobian matrix and runs a Newton method.

Constructing a test problem with SymPy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Let us do a specific computation. We then need choices for :math:`f` and :math:`u_0`.
Previously, we have worked with manufactured solutions that can be
reproduced without approximation errors. This is more difficult in
nonlinear problems, and the algebra is more tedious. However, we may
utilize SymPy for symbolic computing and integrate such computations in the
FEniCS solver. This allows us to easily experiment with different
manufactured solutions. The forthcoming code with SymPy requires some
basic familiarity with this package (here, defining symbols, ``diff`` for
differentiation, ``ccode`` for C/C++ code generation).

We try out a two-dimensional manufactured
solution that is linear in the unknowns:

.. code-block:: python

        # Warning: from fenics import * imports f, q, and sym
        # (which overwrites our own f and q (function) objects
        # and also sym if we do import sympy as sym).
        # Therefore, do fenics import first and then overwrite
        from fenics import *
        
        def q(u):
            """Nonlinear coefficient in the PDE."""
            return 1 + u**2
        
        # Use sympy to compute f given manufactured solution u
        import sympy as sym
        x, y = sym.symbols('x[0] x[1]')
        u = 1 + x + 2*y
        f = - sym.diff(q(u)*sym.diff(u, x), x) - \ 
              sym.diff(q(u)*sym.diff(u, y), y)
        f = sym.simplify(f)


.. admonition:: Define symbolic coordinates as required in ``Expression`` objects

   Note that we would normally write ``x, y = sym.symbols('x y')``, but
   if we want the resulting expressions to be have valid syntax for
   ``Expression`` objects, and then :math:`x` reads ``x[0]`` and :math:`y` must be ``x[1]``.
   This is easily accomplished with ``sympy`` by defining the names of ``x`` and
   ``y`` as ``x[0]`` and ``x[1]``: ``x, y = sym.symbols('x[0] x[1]')``.




Turning the expressions for ``u`` and ``f`` into C or C++ syntax for
``Expression`` objects needs two steps. First we ask for the C code of
the expressions,

.. code-block:: python

        u_code = sym.printing.ccode(u)
        f_code = sym.printing.ccode(f)

Sometimes we need some editing of the result to match the required syntax of
``Expression`` objects, but not in this case. (The primary example is
that ``M_PI`` for :math:`\pi` in C/C++ must be replaced by ``pi`` for ``Expression``
objects.) In our case here,
the output of ``c_code`` and ``f_code`` is

.. code-block:: c

        x[0] + 2*x[1] + 1
        -10*x[0] - 20*x[1] - 10

After having defined the mesh, the function space, and the boundary,
we define the boundary values, ``u0``, as

.. code-block:: python

        u0 = Expression(u_code)

Similarly, we define the right-hand side function as

.. code-block:: python

        f = Expression(f_code)

The complete code is found in the file
`ft03_poisson_flat_nonlinear.py <https://github.com/hplgit/fenics-tutorial/blob/master/src/ft03_poisson_flat_nonlinear.py>`__.


.. admonition:: Name clash between ``fenics`` and program variables

   In a program like the one above, strange errors may occur due to
   name clashes. If you define ``sym``, ``q``, and ``f`` prior to doing
   ``from fenics import *``, the latter statement will also import
   variables with the names ``sym``, ``q``, and ``f`` and overwrite
   the objects you had! This may lead to strange errors. The best
   solution is to do ``import fenics as fe`` and prefix all FEniCS
   object names by ``fe``. The next best solution is to do the
   ``from fenics import *`` first and then define our own variables
   that overwrite those imported from ``fenics``. This is acceptable
   if we do not need ``f``, ``q``, and ``sym`` from ``fenics``.




Running the code gives output that tells how the Newton iteration
progresses. With :math:`2(6\times 4)` cells we get convergence in 7
iterations with a tolerance of :math:`10^{-9}`, and the error in the
numerical solution is about :math:`10^{-11}`. Using more elements, e.g.,
:math:`2(16\times 14)`, brings the error down to about :math:`10^{-15}`,
which provides evidence for a correct implementation.

The current example shows how easy it is to solve a nonlinear problem
in FEniCS. However, experts on numerical solution of nonlinear PDEs
know very well that automated procedures may fail in nonlinear
problems, and that it is often necessary to have much more manual
control of the solution process than what we have in the current
case. Therefore, we return to this problem in the chapter :ref:`ftut:nonlinear` and show how we can implement our own solution
algorithms for nonlinear equations and also how we can steer the
parameters in the automated Newton method used above. You will then
realize how easy it is to implement tailored solution strategies for
nonlinear problems in FEniCS.

.. Stand-alone notebook?

.. _ftut:elast:

The equations of linear elasticity
==================================

Analysis of structures is one of the major activities in modern
engineering, thus making the PDEs for deformation of elastic bodies
most likely the most popular PDE model in the world.
It just takes a page of code to solve the equations of 2D or 3D
elasticity in FEniCS, and the details follows below.

.. _ftut:elast:varform:

Variational formulation          (3)
------------------------------------

The equations governing small elastic deformations of a body :math:`\Omega`
can be written as

.. _Eq:ftut:elast:varform:equilibrium:

.. math::

    \tag{36}
    \nabla\cdot\sigma = \varrho f\hbox{ in }\Omega,
        
        

.. _Eq:ftut:elast:varform:stresstrain:

.. math::

    \tag{37}
    \sigma = \lambda\,\hbox{tr}\,\varepsilon I + 2\mu\varepsilon,
        
        

.. _Eq:ftut:elast:varform:strainu:

.. math::

    \tag{38}
    \varepsilon = \frac{1}{2}\left(\nabla u + (\nabla u)^T\right),
        
        

where :math:`\sigma` is the stress tensor, :math:`\varrho` is the density of the
material, :math:`f` is the body force, :math:`\lambda` and :math:`\mu` are Lame's
elasticity coefficients for the material in :math:`\Omega` $I$ is the
identity tensor, tr is the trace operator on a tensor, :math:`\varepsilon`
is the strain tensor, and :math:`u` is the displacement vector field.

We shall combine :ref:`(37) <Eq:ftut:elast:varform:stresstrain>` and
:ref:`(38) <Eq:ftut:elast:varform:strainu>` to

.. _Eq:ftut:elast:varform:stressu:

.. math::

    \tag{39}
    \sigma = \lambda\nabla\cdot u I + \mu(\nabla u + (\nabla u)^T){\thinspace .}
        
        

Note that :ref:`(36) <Eq:ftut:elast:varform:equilibrium>`-:ref:`(38) <Eq:ftut:elast:varform:strainu>`
can easily be transformed to a vector PDE for :math:`u`, which is the governing
PDE for the unknown :math:`u`. In the derivation of the variational formulation,
however, the splitting of the equations as done above is convenient.

The variational formulation of
:ref:`(36) <Eq:ftut:elast:varform:equilibrium>`-:ref:`(38) <Eq:ftut:elast:varform:strainu>`
consists of forming the inner product of
:ref:`(36) <Eq:ftut:elast:varform:equilibrium>` and a *vector* test function
:math:`v\in \hat{V}`, where :math:`\hat{V}` is a test vector function space, and
integrating over the domain :math:`\Omega`:

.. math::
         \int_\Omega (\nabla\cdot\sigma) \cdot v {\, \mathrm{d}x} =
        \int_\Omega \varrho f\cdot v{\, \mathrm{d}x}{\thinspace .}

Since :math:`\nabla\cdot\sigma` contains second-order derivatives of the primary
unknown :math:`u`, we integrate this term by parts:

.. math::
         \int_\Omega (\nabla\cdot\sigma) \cdot \nabla v {\, \mathrm{d}x}
        -\int_\Omega \sigma : \nabla v{\, \mathrm{d}x} + \int_{\partial\Omega}
        (\sigma\cdot n)\cdot v {\, \mathrm{d}s},

where the colon operator is the inner product between tensors, and :math:`n`
is the outward unit normal at the boundary. The quantity :math:`\sigma\cdot n`
is known as the *traction* or stress vector at the boundary, and is often
prescribed as a boundary condition. We assume that it is prescribed
at a part :math:`\partial\Omega_T` of the boundary and set :math:`T = \sigma\cdot n`.
We then have

.. math::
        
        \int_\Omega (\sigma : \nabla v + \varrho f\cdot v) = \int_{\partial\Omega_T}
        T\cdot v{\, \mathrm{d}s}{\thinspace .}

Inserting :ref:`(39) <Eq:ftut:elast:varform:stressu>` for :math:`\sigma` gives the
variational form with :math:`u` as unknown.

We can now summarize the variational formulation as find :math:`u\in V` such that

.. _Eq:_auto6:

.. math::

    \tag{40}
    a(u,v) = L(v)\quad\forall v\in\hat{V},
        
        

where

.. _Eq:_auto7:

.. math::

    \tag{41}
    a(u,v) = \int_\Omega\sigma(u) :\nabla v {\, \mathrm{d}x},
        
        

.. _Eq:_auto8:

.. math::

    \tag{42}
    \sigma(u) = \lambda\nabla\cdot u I + \mu(\nabla u + (\nabla u)^T),
        
        

.. _Eq:_auto9:

.. math::

    \tag{43}
    L(v) = -\int_\Omega \varrho f\cdot v{\, \mathrm{d}x} + \int_{\partial\Omega_T}
        T\cdot v{\, \mathrm{d}s}{\thinspace .}
        
        

One can show that the inner product of a symmetric tensor :math:`A` and a
non-symmetric tensor :math:`B` vanishes. If we express :math:`\nabla v` as a sum
of its symmetric and non-symmetric parts, only the symmetric part will
survive in the product :math:`\sigma :\nabla v` since :math:`\sigma` is a
symmetric tensor. This gives rise to the slightly different
variational form

.. _Eq:_auto10:

.. math::

    \tag{44}
    a(u,v) = \int_\Omega\sigma(u) :\varepsilon(v) {\, \mathrm{d}x},
        
        

where :math:`\varepsilon(v)` is the symmetric part of :math:`v`:

.. math::
         \varepsilon(v) = \frac{1}{2}(\nabla v + (\nabla v)^T){\thinspace .}

A simple implementation          (3)
------------------------------------

Test problem          (2)
~~~~~~~~~~~~~~~~~~~~~~~~~

As test example, we may look at a clamped beam deformed under its
own weight.  Then :math:`f=(0,0,-g)` is the body force with :math:`g` as the
acceleration of gravity. The beam is box-shaped with length :math:`L` and
square cross section of width :math:`W`. We set :math:`u=(0,0,0)` at the clamped
end, :math:`x=0`. The rest of the boundaries is traction free.

Let us scale the problem. [**hpl 6**: This was meant to simplify the problem so we don't need values for :math:`\lambda`, :math:`\mu`, :math:`\varrho`, etc for a specific material, but the scaling requires some care.]
In the equation for :math:`u`, arising from inserting
:ref:`(37) <Eq:ftut:elast:varform:stresstrain>` and
:ref:`(38) <Eq:ftut:elast:varform:strainu>` in
:ref:`(36) <Eq:ftut:elast:varform:equilibrium>`,

.. math::
         \nabla\cdot(\lambda\nabla\cdot u) + \mu\nabla^2 u = \varrho f,

we insert coordinates made dimensionless by :math:`L`, and :math:`\bar u=u/u_c`,
which results in the dimensionless governing equation

.. math::
        
        \bar\nabla\cdot(\bar\nabla\cdot \bar u) + \beta\bar\nabla^2 \bar u =
        \bar f,\quad \bar f = (0,0,\gamma),

where :math:`\beta = \mu/\lambda` is a dimensionless elasticity parameter and

.. math::
         \gamma = \frac{\varrho gL^2}{u_c\lambda}{\thinspace .}

Sometimes, one will argue to chose :math:`u_c` to make :math:`\gamma` unity (:math:`u_c
= \varrho gL^2/\lambda`).  This is often the reasoning for getting a
:math:`\bar u` that is of order unity. However, in elasticity, this leads us
to displacements of the size of the geometry, which looks very strange
in plots.  We therefore want the characteristic displacement to be a
small fraction of the characteristic length of the geometry.
Actually, for a clamped beam, one has a deflection formula which gives
:math:`u_c = \frac{3}{2}\varrho gL^2\delta^2/E`, where :math:`\delta = L/W`.
Thus, the dimensionless parameter :math:`\delta` is very important in the
problem (as expected: :math:`\delta\gg 1` is what gives beam theory).
Taking :math:`E` to be of the same order of :math:`\lambda`, we realize that
:math:`\gamma \sim \delta^{-2}`.  Experiments with the code point to :math:`\gamma
= 0.25\delta^{-2}` as an appropriate choice.  We implement the code
with physical parameters, :math:`\lambda`, :math:`\mu`, :math:`\varrho`, :math:`g`, :math:`L`, and
:math:`W`, but set these to achieve the solution of the scaled problem:
:math:`\lambda = \varrho = L = 1`, :math:`W` as :math:`W/L`, :math:`g=\gamma`, and
:math:`\mu=\beta`.

Code
~~~~

[**hpl 7**: Must explain the code. New concepts here, though not many.]

.. code-block:: python

        from fenics import *
        
        # Scaled variables
        L = 1; W = 0.2
        lambda_ = 1
        rho = 1
        delta = W/L
        gamma = 0.25*delta**2
        beta = 0.8
        mu = beta
        g = gamma
        
        # Create mesh and define function space
        mesh = BoxMesh(Point(0,0,0), Point(L,W,W), 10, 3, 3)
        V = VectorFunctionSpace(mesh, 'P', 1)
        
        # Define boundary conditions
        tol = 1E-14
        
        def clamped_boundary(x, on_boundary):
            return on_boundary and (x[0] < tol)
        
        bc = DirichletBC(V, Constant((0,0,0)), clamped_boundary)
        
        def epsilon(u):
            return 0.5*(nabla_grad(u) + nabla_grad(u).T)
            #return sym(nabla_grad(u))
        
        def sigma(u):
            return lambda_*nabla_div(u)*Identity(d) + 2*mu*epsilon(u)
        
        # Define variational problem
        u = TrialFunction(V)
        d = u.geometric_dimension()  # no of space dim
        v = TestFunction(V)
        f = rho*Constant((0,0,g))
        T = Constant((0,0,0))
        a = inner(sigma(u), epsilon(v))*dx
        L = -dot(f, v)*dx + dot(T, v)*ds
        
        # Compute solution
        u = Function(V)
        solve(a == L, u, bc)
        
        # Plot solution and mesh
        plot(u, title='Displacement', mode='displacement')
        
        von_Mises = inner(sigma(u), sigma(u)) - div(u)
        V = FunctionSpace(mesh, 'P', 1)
        von_Mises = project(von_Mises, V)
        plot(von_Mises, title='Stress intensity', mode='displacement')
        u_magnitude = sqrt(dot(u,u))
        u_magnitude = project(u_magnitude, V)
        plot(u_magnitude, 'Displacement magnitude', mode='displacement')
        print('min/max u:', u_magnitude.vector().array().min(),
              u_magnitude.vector().array().max())

.. figure:: beam1.png
   :width: 800

   Gravity-induced deformation of a clamped beam: deflection (left) and stress intensity (right)

.. Stand-alone notebook?

The Navier - Stokes equations
=============================

Should we here also include coupling to a transport equation? It shows
multi-physics capabilities.

Variational formulation          (4)
------------------------------------

A simple implementation          (4)
------------------------------------

