.. !split

The fundamentals
%%%%%%%%%%%%%%%%

Mathematical problem formulation
================================

[**hpl 3**: Need a little intro.]

.. _tut:poisson1:bvp:

The Poisson equation
--------------------

.. index:: Poisson's equation

Let us start with a "Hello, World!" program in the world of PDEs - it
must be a program that solves the Laplace or Poisson equation.
Our first example regards the following Poisson problem,

.. _Eq:tut:poisson1:

.. math::

    \tag{1}
    - \nabla^2 u(\boldsymbol{x}) = f(\boldsymbol{x}),\quad \boldsymbol{x}\mbox{ in } \Omega,
        
        

.. _Eq:tut:poisson1:bc:

.. math::

    \tag{2}
    u(\boldsymbol{x}) = u_0(\boldsymbol{x}),\quad \boldsymbol{x}\mbox{ on } \partial \Omega{\thinspace .} 
        

Here, :math:`u(\boldsymbol{x})` is the unknown function, :math:`f(\boldsymbol{x})` is a
prescribed function, :math:`\nabla^2` is the Laplace operator (also
often written as :math:`\Delta`), :math:`\Omega` is the spatial domain, and
:math:`\partial\Omega` is the boundary of :math:`\Omega`. A stationary PDE like
this, together with a complete set of boundary conditions, constitute
a *boundary-value problem*, which must be precisely stated before
it makes sense to start solving it with FEniCS.

In two space dimensions with coordinates :math:`x` and :math:`y`, we can write out
the Poisson equation as

.. _Eq:_auto1:

.. math::

    \tag{3}
    - {\partial^2 u\over\partial x^2} -
        {\partial^2 u\over\partial y^2} = f(x,y){\thinspace .}
        
        

The unknown :math:`u` is now a function of two variables, :math:`u(x,y)`, defined
over a two-dimensional domain :math:`\Omega`.

The Poisson equation arises in numerous physical contexts, including
heat conduction, electrostatics, diffusion of substances, twisting of
elastic rods, inviscid fluid flow, and water waves. Moreover, the
equation appears in numerical splitting strategies of more complicated
systems of PDEs, in particular the Navier-Stokes equations.

Solving a physical problem with FEniCS consists of the following steps:

 1. Identify the PDE and its boundary conditions.

 2. Reformulate the PDE problem as a variational problem.

 3. Make a Python program where the formulas in the variational
    problem are coded, along with definitions of input data such as
    :math:`f`, :math:`u_0`, and a mesh for the spatial domain :math:`\Omega`.

 4. Add statements in the program for solving the variational
    problem, computing derived quantities such as :math:`\nabla u`, and
    visualizing the results.

We shall now go through steps 2-4 in detail.  The key feature of
FEniCS is that steps 3 and 4 result in fairly short code, while most
other software frameworks for PDEs require much more code and more
technically difficult programming.

.. _tut:poisson1:varform:

Variational formulation          (1)
------------------------------------

.. index:: variational formulation

FEniCS makes it easy to solve PDEs if finite elements are used for
discretization in space and the problem is expressed as a *variational
problem*. Readers who are not familiar with variational problems will
get a brief introduction to the topic in this tutorial, but getting
and reading a proper book on the finite element method in addition is
encouraged.  The section :ref:`tut:appendix:books` contains a list of some
suitable books.

.. index:: test function

.. index:: trial function

The core of the recipe for turning a PDE into a variational problem is
to multiply the PDE by a function :math:`v`, integrate the resulting
equation over :math:`\Omega`, and perform integration by parts of terms with
second-order derivatives. The function :math:`v` which multiplies the PDE is
in the mathematical finite element literature called a *test
function*. The unknown function :math:`u` to be approximated is referred to
as a *trial function*. The terms test and trial function are used in
FEniCS programs too.  Suitable function spaces must be specified for
the test and trial functions.  For standard PDEs arising in physics
and mechanics such spaces are well known.

In the present case, we first multiply the Poisson equation
by the test function :math:`v` and integrate,

.. _Eq:tut:poisson1:multbyv:

.. math::

    \tag{4}
    -\int_\Omega (\nabla^2 u)v {\, \mathrm{d}x} = \int_\Omega fv {\, \mathrm{d}x}{\thinspace .} 

Then we apply integration by parts to the integrand with
second-order derivatives,

.. _Eq:tut:poisson1:eqbyparts:

.. math::

    \tag{5}
    -\int_\Omega (\nabla^2 u)v {\, \mathrm{d}x}
        = \int_\Omega\nabla u\cdot\nabla v {\, \mathrm{d}x} - \int_{\partial\Omega}{\partial u\over
        \partial n}v {\, \mathrm{d}s} ,
        

where :math:`\frac{\partial u}{\partial n}` is the derivative of :math:`u` in the
outward normal direction at the boundary.  The test function :math:`v` is
required to vanish on the parts of the boundary where :math:`u` is known,
which in the present problem implies that :math:`v=0` on the whole boundary
:math:`\partial\Omega`.  The second term on the right-hand side of
:ref:`(5) <Eq:tut:poisson1:eqbyparts>` therefore vanishes.  From
:ref:`(4) <Eq:tut:poisson1:multbyv>` and :ref:`(5) <Eq:tut:poisson1:eqbyparts>` it
follows that

.. _Eq:tut:poisson1:weak1:

.. math::

    \tag{6}
    \int_\Omega\nabla u\cdot\nabla v {\, \mathrm{d}x} = \int_\Omega fv {\, \mathrm{d}x}{\thinspace .}
        
        

This equation is supposed to hold for all :math:`v` in some function space
:math:`\hat V`. The trial function :math:`u` lies in some (possibly different)
function space :math:`V`.  We refer to :ref:`(6) <Eq:tut:poisson1:weak1>` as the
*weak form* or *variational form* of the original boundary-value
problem :ref:`(1) <Eq:tut:poisson1>`-:ref:`(2) <Eq:tut:poisson1:bc>`.

The proper statement of
our variational problem now goes as follows:
Find :math:`u \in V` such that

.. _Eq:tut:poisson1:var:

.. math::

    \tag{7}
    \int_{\Omega} \nabla u \cdot \nabla v {\, \mathrm{d}x} =
          \int_{\Omega} fv {\, \mathrm{d}x}
          \quad \forall v \in \hat{V}.
        

The test and trial spaces :math:`\hat{V}` and :math:`V` are in the present
problem defined as

.. math::
        
            \hat{V} &= \{v \in H^1(\Omega) : v = 0 \mbox{ on } \partial\Omega\}, \\ 
             V      &= \{v \in H^1(\Omega) : v = u_0 \mbox{ on } \partial\Omega\}{\thinspace .}
        

In short, :math:`H^1(\Omega)` is the mathematically well-known Sobolev space
containing functions :math:`v` such that :math:`v^2` and :math:`||\nabla v||^2` have
finite integrals over :math:`\Omega`. The solution of the underlying PDE
must lie in a function space where also the derivatives are
continuous, but the Sobolev space :math:`H^1(\Omega)` allows functions with
discontinuous derivatives.  This weaker continuity requirement of :math:`u`
in the variational statement :ref:`(7) <Eq:tut:poisson1:var>`, caused by the
integration by parts, has great practical consequences when it comes
to constructing finite elements.

To solve the Poisson equation numerically, we need to transform the
continuous variational problem :ref:`(7) <Eq:tut:poisson1:var>` to a discrete
variational problem. This is done by introducing *finite-dimensional*
test and trial spaces, often denoted as :math:`\hat{V}_h\subset\hat{V}` and
:math:`V_h\subset{V}`. The discrete variational problem reads: Find :math:`u_h \in
V_h \subset V` such that

.. _Eq:tut:poisson1:vard:

.. math::

    \tag{8}
    \int_{\Omega} \nabla u_h \cdot \nabla v {\, \mathrm{d}x} =
          \int_{\Omega} fv {\, \mathrm{d}x}
          \quad \forall v \in \hat{V}_h \subset \hat{V}{\thinspace .}
        

The choice of :math:`\hat{V}_h` and :math:`V_h` follows directly from the kind of
finite elements we want to apply in our problem. For example, choosing
the well-known linear triangular element with three nodes implies that
:math:`\hat V_h` and :math:`V_h` are the spaces of all piecewise linear functions
over a mesh of triangles, where the functions in :math:`\hat V_h` are zero
on the boundary and those in :math:`V_h` equal :math:`u_0` on the boundary.


.. admonition:: What we mean by the notation :math:`u` and :math:`V`

   The mathematics literature on variational problems writes :math:`u_h` for
   the solution of the discrete problem and :math:`u` for the solution of the
   continuous problem. To obtain (almost) a one-to-one relationship
   between the mathematical formulation of a problem and the
   corresponding FEniCS program, we shall use :math:`u` for the solution of
   the discrete problem and :math:`{u_{\small\mbox{e}}}` for the exact solution of the
   continuous problem, *if* we need to explicitly distinguish
   between the two.
   
   In most cases, we will introduce the PDE problem with
   :math:`u` as unknown, derive a variational equation :math:`a(u,v)=L(v)` with :math:`u\in
   V` and :math:`v\in \hat V`, and then simply discretize the problem by saying
   that we choose finite-dimensional spaces for :math:`V` and :math:`\hat V`, without
   adding any subscript to :math:`V` or :math:`\hat V`. This
   restriction of :math:`V` simply implies that :math:`u` becomes a discrete finite element
   function.  In practice, this means that we turn our PDE problem into a
   continuous variational problem, create a mesh and specify an element
   type, and then let :math:`V` correspond to this mesh and element choice.
   Depending upon whether :math:`V` is infinite- or finite-dimensional, :math:`u`
   will be the exact or approximate solution.




It turns out to be convenient to introduce the following unified
notation for linear weak forms:

.. _Eq:_auto2:

.. math::

    \tag{9}
    a(u, v) = L(v){\thinspace .}
        
        

In the present problem we have that

.. _Eq:tut:poisson1:vard:a:

.. math::

    \tag{10}
    a(u, v) = \int_{\Omega} \nabla u \cdot \nabla v {\, \mathrm{d}x},
        
        

.. _Eq:tut:poisson1:vard:L:

.. math::

    \tag{11}
    L(v) = \int_{\Omega} fv {\, \mathrm{d}x}{\thinspace .}  
        

From the mathematics literature, :math:`a(u,v)` is known as a *bilinear
form* and :math:`L(v)` as a *linear form*.  We shall in every linear problem
we solve identify the terms with the unknown :math:`u` and collect them in
:math:`a(u,v)`, and similarly collect all terms with only known functions in
:math:`L(v)`. The formulas for :math:`a` and :math:`L` are then coded directly in the
program.

To summarize, before making a FEniCS program for solving a PDE,
we must first perform two steps:

  * Turn the PDE problem into a discrete
    variational problem: find :math:`u\in V`
    such that :math:`a(u,v) = L(v)\quad\forall v\in \hat{V}`.

  * Specify the choice of spaces (:math:`V` and :math:`\hat V`), which means
    specifying the mesh and type of finite elements.

.. Suggested: var coeff as early as possible!

.. A basic Poisson solver

.. Useful extensions/Useful stuff/: var coeff here

.. Visualization: membrane, vtk, paraview, structured mesh

.. Postprocessing computations: var coeff, functionals, conv rates

.. Multiple domains and boundaries

.. _tut:poisson1:impl:

A basic Poisson solver
======================

The test problem so far has a general domain :math:`\Omega` and general
functions :math:`u_0` and :math:`f`. For our first implementation we must decide
on specific choices of :math:`\Omega`, :math:`u_0`, and :math:`f`.  It will be wise to
construct a specific problem where we can easily check that the
computed solution is correct. Let us start with specifying an exact
solution :math:`{u_{\small\mbox{e}}}(x,y)`:

.. _Eq:tut:poisson1:impl:uex:

.. math::

    \tag{12}
    \
        {u_{\small\mbox{e}}}(x,y) = 1 +x^2 + 2y^2
        

on some 2D domain.  By inserting :ref:`(12) <Eq:tut:poisson1:impl:uex>` in
our Poisson problem, we find that :math:`{u_{\small\mbox{e}}}(x,y)` is a solution if

.. math::
         f(x,y) = -6,\quad u_0(x,y)={u_{\small\mbox{e}}}(x,y)=1 + x^2 + 2y^2,

regardless of the shape of the domain. We choose here, for simplicity,
the domain to be the unit square,

.. math::
         \Omega = [0,1]\times [0,1] .

The reason for specifying the solution :ref:`(12) <Eq:tut:poisson1:impl:uex>` is
that the finite element method, with a rectangular domain uniformly
partitioned into linear triangular elements, will exactly reproduce a
second-order polynomial at the vertices of the cells, regardless of
the size of the elements. This property allows us to verify the
implementation by comparing the computed solution (:math:`u`) with the exact
solution (:math:`{u_{\small\mbox{e}}}`). These quantities should be equal to machine
precision *at the nodes*.


.. admonition:: Tip: Try to verify your code with exact numerical solutions

   The classical way of testing a program is to compare the numerical
   solution with an exact analytical solution of the test problem
   and conclude that the program works if the error is "small enough".
   Unfortunately, it is impossible to tell if an error :math:`10^{-5}` on
   a :math:`20\times 20` mesh of P1 elements is just all the numerical
   approximation errors in the method or if this error also contains
   the effect of a bug in the code. All we usually know about the
   numerical error is its *asymptotic properties*, for instance that
   it goes like :math:`h^2` if :math:`h` is the size of a cell in the mesh. Then we
   can compare the error on meshes with different :math:`h` values to see if
   the asymptotic behavior is correct. This is a very powerful
   verification technique and is explained in detail in the section :ref:`tut:poisson1:convrates`. However, if we have a test problem where
   we know that there are no numerical approximation errors, we know that
   the analytical solution of the PDE problem should be reproduced to
   machine precision by the program. That is why we emphasize this kind
   of test problems throughout this tutorial.
   Typically, elements of degree :math:`d` can reproduce polynomials of
   degree :math:`d+1` exactly, so this is the starting point for constructing
   a solution without numerical approximation errors. Then we fit the
   data in the problem (like :math:`u_0` and :math:`f`) to this solution.




.. _tut:poisson1:impl:code:

A simple Poisson solver
-----------------------

A FEniCS program for solving the Poisson equation in 2D with the given
choices of :math:`u_0`, :math:`f`, and :math:`\Omega` may look as follows:

.. code-block:: python

        from fenics import *
        
        # Create mesh and define function space
        mesh = UnitSquareMesh(6, 4)
        V = FunctionSpace(mesh, 'Lagrange', 1)
        
        # Define boundary conditions
        u0 = Expression('1 + x[0]*x[0] + 2*x[1]*x[1]')
        
        def u0_boundary(x, on_boundary):
            return on_boundary
        
        bc = DirichletBC(V, u0, u0_boundary)
        
        # Define variational problem
        u = TrialFunction(V)
        v = TestFunction(V)
        f = Constant(-6.0)
        a = inner(nabla_grad(u), nabla_grad(v))*dx
        L = f*v*dx
        
        # Compute solution
        u = Function(V)
        solve(a == L, u, bc)
        
        # Plot solution and mesh
        plot(u)
        
        # Dump solution to file in VTK format
        file = File("poisson.pvd")
        file << u
        
        # Find max error
        u0_Function = interpolate(u0, V)         # exact solution
        u0_array = u0_Function.vector().array()  # dof values
        max_error = (u0_array - u.vector().array()).max()
        print('max error:', max_error)
        
        # Hold plot
        interactive()

The complete code can be found in the file `p2D_plain.py <https://github.com/hplgit/fenics-tutorial/blob/master/src/poisson/p2D_plain.py>`__ in the
directory `src/poisson <https://github.com/hplgit/fenics-tutorial/blob/master/src/poisson>`__.

.. _tut:poisson1:impl:run:

Running the program
-------------------

To run the program ``p2D_plain.py``, open a terminal window, move to
the directory containing the program and write

.. code-block:: text

        Terminal> python p2D_plain.py

A plot window pops up showing how the solution :math:`u` looks like as a surface.
With the left mouse button you can tilt the figure. Click ``m`` to bring
up the underlying mesh. Click ``p`` to save to a PNG file ``fenics_plot_0.png``
and ``P`` to save to a PDF file ``fenics_plot_1.pdf``. To kill the
plot window and terminate the application, click ``Ctrl+q`` (hold down
the ``Ctrl`` key and press ``q``).
Figure :ref:`tut:poisson:2D:fig:ex1:u` displays the surface and the mesh below.
Since :math:`u` is a simple quadratic function,
constructed for testing our solver, the
surface looks quite boring.

.. _tut:poisson:2D:fig:ex1:u:

.. figure:: ex1_u.png
   :width: 600

   *Plot of the solution in the first FEniCS example*

.. _tut:poisson1:impl:dissect:

Dissection of the program
-------------------------

We shall now dissect this FEniCS program in detail. The program is
written in the Python programming language.  You may either take a
quick look at the `official Python tutorial <http://docs.python.org/tutorial/>`__ to pick up the basics of Python if
you are unfamiliar with the language, or you may learn enough Python
as you go along with the examples in the present tutorial. The latter
strategy has proven to work for many newcomers to FEniCS. (The
requirement of using Python and an abstract mathematical formulation
of the finite element problem may seem difficult for those who are
unfamiliar with these topics.  However, the amount of mathematics and
Python that is really demanded to get you productive with FEniCS is
quite limited.  And Python is an easy-to-learn language that you
certainly will love and use far beyond FEniCS programming.)  the section :ref:`tut:appendix:pybooks` lists some relevant Python books.

The listed FEniCS program defines a finite element mesh, the discrete
function spaces :math:`V` and :math:`\hat{V}` corresponding to this mesh and the
element type, boundary conditions for :math:`u` (the function :math:`u_0`),
:math:`a(u,v)`, and :math:`L(v)`.  Thereafter, the unknown trial function :math:`u` is
computed. Then we can compare the numerical and exact solution
as well as investigate :math:`u` visually.

The key import line
~~~~~~~~~~~~~~~~~~~

The first line in the program,

.. code-block:: python

        from fenics import *

imports the key classes ``UnitSquareMesh``, ``FunctionSpace``, ``Function``,
and so forth, from the FEniCS library.  All FEniCS programs for
solving PDEs by the finite element method normally start with this
line.

[**hpl 4**: The following paragraph was natural when we did ``from dolfin import *``, but is not longer relevant to explain that syntax. However, it should be somewhere: we should in the tutorial explain the various components of FEniCS since they appear so frequently in all the official demo programs.]

DOLFIN is a software library with efficient and convenient C++
classes for finite element computing, and ``dolfin`` is a Python package
providing access to this C++ library from Python programs.  You can
think of FEniCS as an umbrella, or project name, for a set of
computational components, where DOLFIN is one important component for
writing finite element programs. The ``from fenics import *`` statement
imports other components too, but newcomers to FEniCS programming do
not need to care about this.

.. index:: Mesh

Generating simple meshes
~~~~~~~~~~~~~~~~~~~~~~~~

The statement

.. code-block:: python

        mesh = UnitSquareMesh(6, 4)

defines a uniform finite element mesh over the unit square
:math:`[0,1]\times [0,1]`. The mesh consists of *cells*, which are triangles
with straight sides. The parameters 6 and 4 tell that the square is
first divided into :math:`6\times 4` rectangles, and then each rectangle is
divided into two triangles. The total number of triangles then becomes
48. The total number of vertices in this mesh is :math:`7\cdot 5=35`.
FEniCS offers some classes for creating meshes over very simple
geometries. For domains of more complicated shape one needs to use a
separate *preprocessor* program to create the mesh.  The FEniCS
program will then read the mesh from file.

.. index:: FunctionSpace

.. index:: finite element specifications

.. index:: CG finite element family

.. index:: Lagrange finite element family

.. index:: P1 element

Defining a function space corresponding to a mesh
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Having a mesh, we can define a discrete function space ``V`` over this mesh:

.. code-block:: python

        V = FunctionSpace(mesh, 'Lagrange', 1)

The second argument reflects the type of element, while the third
argument is the degree of the basis functions on the element.  The
type of element is here "Lagrange", implying the standard Lagrange
family of elements.  (Some FEniCS programs use ``'CG'``, for Continuous
Galerkin, as a synonym for ``'Lagrange'``.)  With degree 1, we simply
get the standard linear Lagrange element, which is a triangle with
nodes at the three vertices.  Some finite element practitioners refer
to this element as the "linear triangle" or the P1 element.  The
computed :math:`u` will be continuous and linearly varying in :math:`x` and :math:`y`
over each cell in the mesh.  Higher-degree polynomial approximations
over each cell are trivially obtained by increasing the third
parameter in ``FunctionSpace``, which will then generate P2, P3, and so
forth, type of elements. Changing the second parameter to ``'DG'``
creates a function space for discontinuous Galerkin methods.

.. index:: TestFunction

.. index:: TrialFunction

.. index:: DirichletBC

.. index:: Dirichlet boundary conditions

Defining test and trial functions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In mathematics, we distinguish between the trial and test spaces :math:`V`
and :math:`\hat{V}`. The only difference in the present problem is the
boundary conditions. In FEniCS we do not specify the boundary
conditions as part of the function space, so it is sufficient to work
with one common space ``V`` for the and trial and test functions in the
program:

.. code-block:: python

        u = TrialFunction(V)
        v = TestFunction(V)

.. index:: boundary specification (function)

Specifying the boundary and boundary conditions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The next step is to specify the boundary condition: :math:`u=u_0` on
:math:`\partial\Omega`. This is done by

.. code-block:: python

        bc = DirichletBC(V, u0, u0_boundary)

where ``u0`` is an instance holding the :math:`u_0` values, and ``u0_boundary``
is a function (or object) describing whether a point lies on the
boundary where :math:`u` is specified.

Boundary conditions of the type :math:`u=u_0` are known as *Dirichlet
conditions*, and also as *essential boundary conditions* in a finite
element context.  Naturally, the name of the class holding the
information about Dirichlet boundary conditions is ``DirichletBC``.

.. index:: Expression

The ``u0`` variable refers to an ``Expression`` object, which is used to
represent a mathematical function. The typical construction is

.. code-block:: python

        u0 = Expression(formula)

where ``formula`` is a string containing the mathematical expression.
This formula is written with C++ syntax. The expression is
automatically turned into an efficient, compiled C++ function. The
independent variables in the function expression are supposed to be
available as a point vector ``x``, where the first element ``x[0]``
corresponds to the :math:`x` coordinate, the second element ``x[1]`` to the
:math:`y` coordinate, and (in a three-dimensional problem) ``x[2]`` to the :math:`z`
coordinate. With our choice of :math:`u_0(x,y)=1 + x^2 + 2y^2`, the formula
string must be written as ``1 + x[0]*x[0] + 2*x[1]*x[1]``:

.. code-block:: python

        u0 = Expression('1 + x[0]*x[0] + 2*x[1]*x[1]')

.. index:: C++ expression syntax

.. index:: expression syntax (C++)


.. admonition:: Remember that string expressions must have valid C++ syntax

   The string argument to an ``Expression`` object must obey C++ syntax.
   Most Python syntax for mathematical expressions are also valid C++ syntax,
   but power expressions make an exception: ``p**a`` must be written as
   ``pow(p,a)`` in C++ (this is also an alternative Python syntax).
   The following mathematical functions can be used directly
   in C++
   expressions when defining ``Expression`` objects:
   ``cos``, ``sin``, ``tan``, ``acos``, ``asin``,
   ``atan``, ``atan2``, ``cosh``, ``sinh``, ``tanh``, ``exp``,
   ``frexp``, ``ldexp``, ``log``, ``log10``, ``modf``,
   ``pow``, ``sqrt``, ``ceil``, ``fabs``, ``floor``, and ``fmod``.
   Moreover, the number :math:`\pi` is available as the symbol ``pi``.
   All the listed functions are taken from the ``cmath`` C++ header file, and
   one may hence
   consult documentation of ``cmath`` for more information on the
   various functions.
   
   If tests are possible using the C syntax for inline branching. The
   function
   
   .. math::
            f(x,y) = \left\lbrace\begin{array}{ll} x^2, & x, y\geq 0\\ 
           2, & \hbox{otherwise}\end{array}\right.
   
   is implemented as
   
   .. code-block:: python
   
           f = Expression('x[0] >= 0 && x[1] >= 0? pow(x[0], 2) : 2')
   
   Parameters in expression strings are allowed, but
   must be initialized via keyword
   arguments when creating the ``Expression`` object. For example, the
   function :math:`f(x)=e^{-\kappa\pi^2t}\sin(\pi k x)` can be coded as
   
   .. code-block:: python
   
           f = Expression('exp(-kappa*pow(pi,2)*t)*sin(pi*k*x[0])',
                          kappa=1.0, t=0, k=4)
   
   At any time, parameters can be updated:
   
   .. code-block:: python
   
           f.t += dt
           f.k = 10




.. index:: boundary specification (function)

The information about where to apply the ``u0`` function as boundary
condition is coded in a function ``u0_boundary``:

.. code-block:: python

        def u0_boundary(x, on_boundary):
            return on_boundary

A function like ``u0_boundary`` for marking the boundary must return a
boolean value: ``True`` if the given point ``x`` lies on the Dirichlet
boundary and ``False`` otherwise.  The argument ``on_boundary`` is ``True``
if ``x`` is on the physical boundary of the mesh, so in the present
case, where we are supposed to return ``True`` for all points on the
boundary, we can just return the supplied value of ``on_boundary``.  The
``u0_boundary`` function will be called for every discrete point in the
mesh, which allows us to have boundaries where :math:`u` are known also
inside the domain, if desired.

One can also omit the ``on_boundary`` argument, but in that case we need
to test on the value of the coordinates in ``x``:

.. code-block:: python

        def u0_boundary(x):
            return x[0] == 0 or x[1] == 0 or x[0] == 1 or x[1] == 1

As for the formula in ``Expression`` objects, ``x`` in the ``u0_boundary``
function represents a point in space with coordinates ``x[0]``, ``x[1]``,
etc. Comparing floating-point values using an exact match test with
``==`` is not good programming practice, because small round-off errors
in the computations of the ``x`` values could make a test ``x[0] == 1``
become false even though ``x`` lies on the boundary.  A better test is
to check for equality with a tolerance:

.. code-block:: python

        def u0_boundary(x):
            tol = 1E-15
            return abs(x[0]) < tol or \ 
                   abs(x[1]) < tol or \ 
                   abs(x[0] - 1) < tol or \ 
                   abs(x[1] - 1) < tol

.. index:: UFL

Specifying the right-hand side function
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Before defining :math:`a(u,v)` and :math:`L(v)` we have to specify the :math:`f` function:

.. code-block:: python

        f = Expression('-6')

When :math:`f` is constant over the domain, ``f`` can be
more efficiently represented as a ``Constant`` object:

.. code-block:: python

        f = Constant(-6.0)

Specifying the variational formulation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Now we have all the objects we need in order to specify this problem's
:math:`a(u,v)` and :math:`L(v)`:

.. code-block:: python

        a = inner(nabla_grad(u), nabla_grad(v))*dx
        L = f*v*dx

In essence, these two lines specify the PDE to be solved.  Note the
very close correspondence between the Python syntax and the
mathematical formulas :math:`\nabla u\cdot\nabla v {\, \mathrm{d}x}` and :math:`fv {\, \mathrm{d}x}`.  This
is a key strength of FEniCS: the formulas in the variational
formulation translate directly to very similar Python code, a feature
that makes it easy to specify PDE problems with lots of PDEs and
complicated terms in the equations.  The language used to express weak
forms is called UFL (Unified Form Language) [Ref02]_ [Ref01]_
and is an integral part of FEniCS.

Instead of ``nabla_grad`` we could also just have written ``grad`` in the
examples in this tutorial. However, when taking gradients of vector
fields, ``grad`` and ``nabla_grad`` differ. The latter is consistent with
the tensor algebra commonly used to derive vector and tensor PDEs,
where :math:`\nabla` ("nabla") acts as a vector operator, and therefore
this author prefers to always use ``nabla_grad``.

Forming and solving the linear system
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Having ``a`` and ``L`` defined, and information about essential
(Dirichlet) boundary conditions in ``bc``, we can compute the solution,
a finite element function ``u``, by

.. code-block:: python

        u = Function(V)
        solve(a == L, u, bc)

Some prefer to replace ``a`` and ``L`` by an ``equation``
variable, which is accomplished by this equivalent code:

.. code-block:: python

        equation = inner(nabla_grad(u), nabla_grad(v))*dx == f*v*dx
        u = Function(V)
        solve(equation, u, bc)

Note that we first defined the variable ``u`` as a ``TrialFunction`` and
used it to represent the unknown in the form ``a``.  Thereafter, we
redefined ``u`` to be a ``Function`` object representing the solution,
i.e., the computed finite element function :math:`u`.  This redefinition of
the variable ``u`` is possible in Python and often done in FEniCS
applications. The two types of objects that ``u`` refers to are equal
from a mathematical point of view, and hence it is natural to use the
same variable name for both objects. In a program, however,
``TrialFunction`` objects must always be used for the unknowns in the
problem specification (the form ``a``), while ``Function`` objects must be
used for quantities that are computed (known).

.. index:: degrees of freedom

Examining the values of the solution
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The present test problem should produce a numerical solution that
equals the exact solution to machine precision. That is, there are
no approximation errors in our test problem. We can use this property
to "prove" that our implementation is correct, a necessary first step
before we try to apply our code to more complicated problems.
For such verification, we need
to compare the computed ``u`` function to ``u0``.

A finite element function like :math:`u` is expressed as a linear combination
of basis functions :math:`\phi_j`, spanning the space :math:`V`:

.. _Eq:tut:poisson1:ufem:

.. math::

    \tag{13}
    u = \sum_{j=1}^N U_j \phi_j {\thinspace .}
        

By writing ``solve(a == L, u, bc)`` in the program, a linear system
will be formed from :math:`a` and :math:`L`, and this system is solved for the
:math:`U_1,\ldots,U_N` values. The :math:`U_1,\ldots,U_N` values are known
as *degrees of freedom* of :math:`u`. For Lagrange elements (and many other
element types) :math:`U_k` is simply the value of :math:`u` at the node
with global number :math:`k`.
The nodes and cell vertices coincide for linear Lagrange elements, while
for higher-order elements there are additional nodes at
the facets and maybe also in the interior of cells.

Having ``u`` represented as a ``Function`` object, we can either evaluate
``u(x)`` at any point ``x`` in the mesh (expensive operation!),
or we can grab all the degrees of
freedom values :math:`U_j` directly by

.. code-block:: python

        u_nodal_values = u.vector()

The result is a ``Vector`` object, which is basically an
encapsulation of the vector object used in the linear algebra package
that is used to solve the linear system arising from the
variational problem.
Since we program in Python it is convenient to convert the
``Vector`` object to a standard ``numpy`` array for further
processing:

.. index:: degrees of freedom array

.. index:: nodal values array

.. index::
   single: numbering; degrees of freedom

.. index::
   single: numbering; cell vertices

.. code-block:: python

        u_array = u_nodal_values.array()

With ``numpy`` arrays we can write MATLAB-like code to analyze
the data. Indexing is done with square brackets: ``u_array[i]``,
where the index ``i`` always starts at ``0``. However, ``i`` corresponds
to :math:`u` at some point in the mesh and the correspondence requires
knowledge of the numbering of degrees of freedom and the numbering of
vertices in elements in the mesh, see the section :ref:`tut:poisson1:verify1`
for details.

.. index:: interpolate

For now, we want to check that the values in ``u_array`` are correct:
they should equal our ``u0`` function. The most natural approach is
to interpolate our ``u0`` expression onto our space
(i.e., the finite element mesh),

.. code-block:: python

        u0_Function = interpolate(u0, V)

The ``interpolate`` function returns a ``Function`` object, whose degrees
of freedom values can be obtained by ``.vector().array()``.  Our goal is
to show that the degrees of freedom arrays of ``u`` and ``u0_Function``
are equal. One safe of doing this is to compute the maximum error,

.. code-block:: python

        u0_array = u0_Function.vector().array()  # dof values
        max_error = (u0_array - u.vector().array()).max()
        print('max error:', max_error)


.. admonition:: How to check that the error vanishes

   With inexact arithmetics, as we always have on a computer,
   this maximum error is not zero, but should be a small number.
   The machine precision is about :math:`10^{-16}`, but in finite element
   calculations, rounding errors of this size may accumulate, so
   the expected accuracy of ``max_error`` smaller. Experiments show
   that increasing the number of elements and increasing the degree
   of the finite element polynomials increase ``max_error``.
   For a mesh with :math:`2(20\times 20)` cubic Lagrange elements (degree 3)
   ``max_error`` is about :math:`2\cdot 10^{-12}`, while for 18 linear elements
   the maximum error is about :math:`2\cdot 10^{-15}`.




Plotting the solution
~~~~~~~~~~~~~~~~~~~~~

The simplest way of quickly looking at ``u`` is to say

.. code-block:: python

        plot(u, interactive=True)
        # or
        plot(u)
        interactive()

Clicking on ``Help`` in the plot windows brings up a list of commands.
For example, typing ``m`` brings up the mesh.  With the left, middle,
and right mouse buttons you can rotate, translate, and zoom
(respectively) the plotted surface to better examine what the solution
looks like. You must click ``Ctrl+q`` to kill the plot window and
continue execution beyond the ``plot(u, interactive=True)`` command or
``interactive()``.  Figure :ref:`tut:poisson:2D:fig:ex1:u` displays the
resulting :math:`u` function.

Plotting both the solution and the mesh is accomplished by

.. code-block:: python

        plot(u)
        plot(mesh)
        # Hold plot
        interactive()

Type ``Ctrl+w`` to kill all plot windows and continue execution.

It is also possible to dump the computed solution to file, e.g., in the
VTK format:

.. code-block:: python

        file = File('poisson.pvd')
        file << u

The ``poisson.pvd`` file can now be loaded into any front-end to VTK,
say ParaView or VisIt. The ``plot`` function is intended for quick
examination of the solution during program development.  More in-depth
visual investigations of finite element solutions will normally
benefit from using highly professional tools such as ParaView and
VisIt.

.. _tut:poisson1:impl2:

Refactored implementation
-------------------------

Our initial program above is "flat". That is, it is not organized into
logical, reusable units in terms of Python functions. Such flat programs are
popular for quickly testing out some software, but not well suited for
serious problem solving. We shall therefore at once *refactor* the program,
meaning that we divide it into functions, but this is just a
reordering of the existing statements. During refactoring, we try
make functions as reusable as possible in other contexts, but
statements specific to a certain problem or task are also encapsulated
in (non-reusable) functions.
Being able to distinguish reusable code from specialized code is a key issue
when refactoring code, and this ability depends on a good mathematical
understanding of the problem at hand ("what is general, what is special?").
In a flat program, general and specialized code (and mathematics)
is often mixed together.

A general solver function
~~~~~~~~~~~~~~~~~~~~~~~~~

Some of the code in the previous flat program are needed to solve any
Poisson problem :math:`-\nabla^2 u=f` on :math:`[0,1]\times [0,1]` with :math:`u=u_0` on
the boundary. Let us collect this code in a reusable function
``solver``.  Our special test problem will then just be an application
of ``solver`` with some additional statements.
We limit the ``solver`` function to just *compute the numerical
solution*. Plotting and comparing the solution with the exact solution
are considered to be problem-specific activities to be performed elsewhere.

We parameterize ``solver`` by :math:`f`, :math:`u_0`, and the
resolution of the mesh. Since it is so trivial to use higher-order
finite element functions by changing the third argument to
``FunctionSpace``, we let also the degree of the polynomials in the
finite element basis functions be an argument to ``solver``.
[**hpl 5**: The refactoring extends functionality. Should we be strict and keep linear elements? The test is better when it tests the degree parameter as well...]

.. code-block:: python

        from fenics import *
        
        def solver(f, u0, Nx, Ny, degree=1):
            """
            Solve -Laplace(u)=f on [0,1]x[0,1] with 2*Nx*Ny Lagrange
            elements of specified degree and u=u0 (Expresssion) on
            the boundary.
            """
            # Create mesh and define function space
            mesh = UnitSquareMesh(Nx, Ny)
            V = FunctionSpace(mesh, 'Lagrange', degree)
        
            def u0_boundary(x, on_boundary):
                return on_boundary
        
            bc = DirichletBC(V, u0, u0_boundary)
        
            # Define variational problem
            u = TrialFunction(V)
            v = TestFunction(V)
            a = inner(nabla_grad(u), nabla_grad(v))*dx
            L = f*v*dx
        
            # Compute solution
            u = Function(V)
            solve(a == L, u, bc)
        
            return u

Plotting for the test problem
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The additional tasks we did in our initial program can be placed in
other functions. For example, plotting the solution in our particular
test problem is placed in an
``application_test`` function:

.. code-block:: python

        def application_test():
            """Plot the solution in the test problem."""
            u0 = Expression('1 + x[0]*x[0] + 2*x[1]*x[1]')
            f = Constant(-6.0)
            u = solver(f, u0, 6, 4, 1)
            # Dump solution to file in VTK format
            file = File("poisson.pvd")
            file << u
            # Plot solution and mesh
            plot(u)

Make a module!
~~~~~~~~~~~~~~

The refactored code is put in a file `p2D_func.py <https://github.com/hplgit/fenics-tutorial/blob/master/src/poisson/p2D_func.py>`__. We should make
sure that such a file can be imported (and hence reused) in other programs.
Then all statements in the main program should appear with a test
``if __name__ == '__main__':``. This test is true if the file is executed
as a program, but false if the file is imported.
If we want to run this file in the same way as we can
run ``p2D_func.py``, the main program is simply a call to
``application_test()`` followed by a call ``interactive()`` to hold the plot:

.. code-block:: python

        if __name__ == '__main__':
            application_test()
            # Hold plot
            interactive()

.. index:: unit testing

Verification
~~~~~~~~~~~~

The remaining part of our first program is to compare the numerical and
the exact solution. Every time we edit the code we must rerun the test
and examine that ``max_error`` is sufficiently small so we know that the
code still works. To this end, we shall adopt *unit testing*, meaning
that we create a mathematical test and corresponding software that
can run all our tests automatically and check that all tests pass.
Python has several tools for unit testing. Two very popular ones are
pytest and nose. These are almost identical and very easy to use.
More classical unit testing with test classes is offered by the built-in
tool ``unittest``, but here we are going to use pytest (or nose) since it demands
shorter and clearer code.

Mathematically, our unit test is that the finite element solution of
our problem when :math:`f=-6` equals the exact solution :math:`u=u_0=1+x^2+2y^2`.
We have already created code that finds the maximum error in the
numerical solution. Because of rounding errors, we cannot demand this
maximum error to be zero, but we have to use a tolerance, which depends
to the number of elements and the degrees of the polynomials in the finite
element basis functions. In the section :ref:`tut:poisson1:impl:dissect` we
reported some experiments with the size of the maximum error. If we want
to test that ``solver`` works for meshes up to :math:`2(20\times 20)` elements
and cubic Lagrange elements, :math:`10^{-11}` is
an appropriate tolerance for testing that the maximum error vanishes.

Only three statements are necessary to carry out the unit test. However,
we shall embed these statements in software that the testing frameworks
pytest and nose can recognize. This means that each unit test
must be placed in a function that

 * has a name starting with ``test_``

 * has no arguments

 * implements the test as ``assert success, msg``

Regarding the last point, ``success`` is a boolean expression that is ``False``
if the test fails, and in that case the string ``msg`` is written to the
screen. When the test fails, ``assert`` raises an ``AssertionError`` exception
in Python, otherwise the statement runs silently. The ``msg`` string is
optional, so ``assert success`` is the minimal test. In our case, we
will do ``assert max_error < tol``, where ``tol`` is the tolerance (:math:`10^{-11}`)
mentioned above.

A proper *test function* for implementing this unit test in the pytest
or nose testing frameworks has the following form. Note that we perform
the test for different mesh resolutions and degrees of finite elements.

.. code-block:: python

        def test_solver():
            """Reproduce u=1+x^2+2y^2 to "machine precision"."""
            tol = 1E-11  # This problem's precision
            u0 = Expression('1 + x[0]*x[0] + 2*x[1]*x[1]')
            f = Constant(-6.0)
            for Nx, Ny in [(3,3), (3,5), (5,3), (20,20)]:
                for degree in 1, 2, 3:
                    print('solving on 2(%dx%d) mesh with P%d elements'
                          % (Nx, Ny, degree))
                    u = solver(f, u0, Nx, Ny, degree)
                    # Make a finite element function of the exact u0
                    V = u.function_space()
                    u0_Function = interpolate(u0, V)  # exact solution
                    # Check that dof arrays are equal
                    u0_array = u0_Function.vector().array()  # dof values
                    max_error = (u0_array - u.vector().array()).max()
                    msg = 'max error: %g for 2(%dx%d) mesh and degree=%d' %\ 
                          (max_error, Nx, Ny, degree)
                    assert max_error < tol, msg

We can at any time run

.. code-block:: text

        Terminal> py.test -s -v p2D_func.py

and the pytest tool will run all functions ``test_*()`` in the file and report
how the tests go.

We shall make it a habit in this book to encapsulate numerical test
problems in unit tests as done above, and we strongly encourage the
reader to create similar unit tests whenever a FEniCS solver is
implemented. We dare to assert that this is the only serious way
do reliable computational science with FEniCS.


.. admonition:: Tip: Print messages in test functions

   The ``assert`` statement runs silently when the test passes so users may
   become uncertain if all the statements in a test function are really
   executed. A psychological help is to print out something before ``assert``
   (as we do in the example above) such that it is clear that the
   test really takes place.
   (Note that ``py.test`` needs the ``-s`` option to show printout
   from the test functions.)




The next three sections deal with some technicalities about specifying
the solution method for linear systems (so that you can solve large
problems) and examining array data from the computed solution (so that
you can check that the program is correct).  These technicalities are
scattered around in forthcoming programs. However, the impatient
reader who is more interested in seeing the previous program being
adapted to a real physical problem, and play around with some
interesting visualizations, can safely jump to the section :ref:`tut:poisson:membrane`.  Information in the intermediate sections
can be studied on demand.

.. --- begin exercise ---

Exercise 1: Solve a Poisson problem
-----------------------------------

Solve the following problem

.. _Eq:_auto3:

.. math::

    \tag{14}
    \nabla^2 u = 2e^{-2x}\sin(\pi y)((4-5\pi^2)\sin(2\pi x) - 8\pi\cos(2\pi x)),
        \quad\hbox{ in }\Omega = [0,1]\times [0,1]
        
        

.. _Eq:_auto4:

.. math::

    \tag{15}
    u = 0\quad\hbox{ on }\partial\Omega
        
        

The exact solution is given by

.. math::
         {u_{\small\mbox{e}}} = 2e^{-2x}\sin(\pi x)\sin(\pi y){\thinspace .}

Compute the maximum numerical approximation error in a mesh with
:math:`2(N_x\times N_y)` elements and in a mesh with double resolution:
:math:`4(N_x\times N_y)` elements. Show that the doubling the resolution
reduces the error by a factor 4 when using Lagrange elements of degree one.
(This is a good verification that the implementation is correct, but
note that the result requires sufficiently fine mesh - here
one may start with :math:`N_x=N_y=20`.)
Make an illustrative plot of the solution too.

**a)**
Base your implementation on editing the program
``p2D_plain.py``.

.. --- begin hint in exercise ---

**Hint.**
In the string for an ``Expression`` object, ``pi`` is the value of
:math:`\pi`. Also note that :math:`\pi^2` must be expressed with syntax
``pow(pi,2)`` and not (the common Python syntax) ``pi**2``.

FEniCS will abort with a compilation error if you type the expressions
in a wrong way syntax-wise.  Search for *error:* in the
``/very/long/path/compile.log`` file mentioned in the error message to
see what the C++ compiler reported as error in the expressions.

.. --- end hint in exercise ---

Filename: ``p2D_fsin_plain``.

.. --- begin solution of exercise ---

**Solution.**
Looking at the ``p2D_plain.py`` code, we realize that
the following edits are required:

 * Modify the ``mesh`` computation.

 * Modify ``u0`` and ``f``.

 * Add expression for the exact solution.

 * Modify the computation of the numerical error.

 * Insert a loop to enable solving the problem twice.

 * Put the error reduction computation and the plot statements after the loop.

Here is the modified code:

.. code-block:: python

        from fenics import *
        
        Nx = Ny = 20
        error = []
        for i in range(2):
            Nx *= (i+1)
            Ny *= (i+1)
        
            # Create mesh and define function space
            mesh = UnitSquareMesh(Nx, Ny)
            V = FunctionSpace(mesh, 'Lagrange', 1)
        
            # Define boundary conditions
            u0 = Constant(0)
        
            def u0_boundary(x, on_boundary):
                return on_boundary
        
            bc = DirichletBC(V, u0, u0_boundary)
        
            # Define variational problem
            u = TrialFunction(V)
            v = TestFunction(V)
            f = Expression('-2*exp(-2*x[0])*sin(pi*x[1])*('
                           '(4-5*pow(pi,2))*sin(2*pi*x[0]) '
                           ' - 8*pi*cos(2*pi*x[0]))')
            # Note: no need for pi=DOLFIN_PI in f, pi is valid variable
            a = inner(nabla_grad(u), nabla_grad(v))*dx
            L = f*v*dx
        
            # Compute solution
            u = Function(V)
            solve(a == L, u, bc)
        
            u_e = Expression(
                '2*exp(-2*x[0])*sin(2*pi*x[0])*sin(pi*x[1])')
        
            u_e_Function = interpolate(u_e, V)         # exact solution
            u_e_array = u_e_Function.vector().array()  # dof values
            max_error = (u_e_array - u.vector().array()).max()
            print('max error:', max_error, '%dx%d mesh' % (Nx, Ny))
            error.append(max_error)
        
        print('Error reduction:', error[1]/error[0])
        
        # Plot solution and mesh
        plot(u)
        
        # Dump solution to file in VTK format
        file = File("poisson.pvd")
        file << u
        
        # Hold plot
        interactive()

The number :math:`\pi` has the symbol ``M_PI`` in C and C++, but in C++
strings in ``Expression`` objects, the symbol ``pi`` can be used directly
(or one can use the less readable ``DOLFIN_PI``).

.. figure:: p2D_fsin.png
   :width: 500

.. --- end solution of exercise ---

**b)**
Base your implementation on a new file that imports functionality
from the module ``p2D_func.py``. Embed the check of the
reduction of the numerical approximation error in a unit test.
Filename: ``p2D_fsin_func``.

.. --- begin solution of exercise ---

**Solution.**
Solving the two problems is a matter of calling ``solver`` with
different sets of arguments.
To compute the numerical error,
we need code that is close to what we have in ``test_solver``.

.. code-block:: python

        from p2D_func import (
            solver, Expression, Constant, interpolate, File, plot,
            interactive)
        
        def data():
            """Return data for this Poisson problem."""
            u0 = Constant(0)
            u_e = Expression(
                '2*exp(-2*x[0])*sin(2*pi*x[0])*sin(pi*x[1])')
            f = Expression('-2*exp(-2*x[0])*sin(pi*x[1])*('
                           '(4-5*pow(pi,2))*sin(2*pi*x[0]) '
                           ' - 8*pi*cos(2*pi*x[0]))')
            return u0, f, u_e
        
        def test_solver():
            """Check convergence rate of solver."""
            u0, f, u_e = data()
            Nx = 20
            Ny = Nx
            error = []
            # Loop over refined meshes
            for i in range(2):
                Nx *= i+1
                Ny *= i+1
                print('solving on 2(%dx%d) mesh' % (Nx, Ny))
                u = solver(f, u0, Nx, Ny, degree=1)
                # Make a finite element function of the exact u_e
                V = u.function_space()
                u_e_array = interpolate(u_e, V).vector().array()
                max_error = (u_e_array - u.vector().array()).max()  # Linf norm
                error.append(max_error)
                print('max error:', max_error)
            for i in range(1, len(error)):
                error_reduction = error[i]/error[i-1]
                print('error reduction:', error_reduction)
                assert abs(error_reduction - 0.25) < 0.1
        
        def application():
            """Plot the solution."""
            u0, f, u_e = data()
            Nx = 40
            Ny = Nx
            u = solver(f, u0, Nx, Ny, 1)
            # Dump solution to file in VTK format
            file = File("poisson.pvd")
            file << u
            # Plot solution and mesh
            plot(u)
        
        if __name__ == '__main__':
            test_solver()
            application()
            # Hold plot
            interactive()

The unit test is embedded in a proper test function ``test_solver``
for the pytest or
nose testing frameworks. Visualization of the solution is encapsulated
in the ``application`` function. Since we need ``u_e``, ``u0``, and ``f``
in two functions, we place the definitions in a function ``data`` to
avoid copies of these expressions.

.. --- end solution of exercise ---

.. Closing remarks for this Exercise

Remarks
~~~~~~~

This exercise demonstrates that changing a flat program to solve a new
problem requires careful editing of statements scattered around in the
file, while
the solution in b), based on the ``solver`` function, requires *no modifications*
of the ``p2D_func.py`` file, just
*minimalistic additional new code* in a separate file. The Poisson solver
remains in one place (``p2D_func.py``) while in a) we got two
Poisson solvers. If you decide to switch to an iterative solution method
for linear systems, you can do so in one place in b), and all applications
can take advantage of the extension.

.. --- end exercise ---

.. Or Useful extensions and recipies?

Useful extensions
=================

[**hpl 3**: Need a little intro.]

.. _tut:poisson1:solve:prm:

Controlling the solution process
--------------------------------

Sparse LU decomposition (Gaussian elimination) is used by default to
solve linear systems of equations in FEniCS programs.  This is a very
robust and recommended method for a few thousand unknowns in the
equation system, and may hence be the method of choice in many 2D and
smaller 3D problems. However, sparse LU decomposition becomes slow and
memory demanding in large problems.  This fact forces the use of
iterative methods, which are faster and require much less memory.
Consequently, we must tell you already now how you can take
advantage of state-of-the-art iterative solution methods in FEniCS.

Setting linear solver parameters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Preconditioned Krylov solvers is a type of popular iterative methods
that are easily accessible in FEniCS programs. The Poisson equation
results in a symmetric, positive definite coefficient matrix, for
which the optimal Krylov solver is the Conjugate Gradient (CG)
method. However, the CG method requires boundary conditions to be
implemented in a symmetric way. This is not the case by default, so
then a Krylov solver for non-symmetric system, such as GMRES, is a
better choice.  Incomplete LU factorization (ILU) is a popular and
robust all-round preconditioner, so let us try the GMRES-ILU pair:

.. code-block:: python

        solve(a == L, u, bc)
              solver_parameters={'linear_solver': 'gmres',
                                 'preconditioner': 'ilu'})
        # Alternative syntax
        solve(a == L, u, bc,
              solver_parameters=dict(linear_solver='gmres',
                                     preconditioner='ilu'))

the section :ref:`tut:app:solver:prec` lists the most popular choices of
Krylov solvers and preconditioners available in FEniCS.

.. index:: linear algebra backend

.. index:: PETSc

.. index:: Trilinos

.. index:: MTL4

.. index:: uBLAS

Linear algebra backend
~~~~~~~~~~~~~~~~~~~~~~

The actual GMRES and ILU implementations that are brought into action
depends on the choice of linear algebra package. FEniCS interfaces
several linear algebra packages, called *linear algebra backends* in
FEniCS terminology.  PETSc is the default choice if DOLFIN is compiled
with PETSc, otherwise uBLAS.  Epetra (Trilinos), Eigen, MTL4 are other
supported backends.  [**hpl 7**: Here the term DOLFIN appears so make sure it is explained somewhere.] Which backend to apply can be controlled by
setting

.. code-block:: python

        parameters['linear_algebra_backend'] = backendname

where ``backendname`` is a string, either ``'Eigen'``, ``'PETSc'``, ``'uBLAS'``,
``'Epetra'``, or ``'MTL4'``.  All these backends offer high-quality
implementations of both iterative and direct solvers for linear systems
of equations.

.. index:: UMFPACK

A common platform for FEniCS users is Ubuntu Linux.  The FEniCS
distribution for Ubuntu contains PETSc, making this package the
default linear algebra backend.  The default solver is sparse LU
decomposition (``'lu'``), and the actual software that is called is then
the sparse LU solver from UMFPACK (which PETSc has an interface
to). The available linear algebra backends in a FEniCS installation is
listed by

.. code-block:: python

        list_linear_algebra_backends()

.. index:: parameters database

.. index:: info function

The ``parameters`` database
~~~~~~~~~~~~~~~~~~~~~~~~~~~

We will normally like to control the tolerance in the stopping
criterion and the maximum number of iterations when running an
iterative method.  Such parameters can be set by accessing the *global
parameter database*, which is called ``parameters`` and which behaves as
a nested dictionary. Write

.. code-block:: python

        info(parameters, verbose=True)

to list all parameters and their default values in the database.
The nesting of parameter sets is indicated through indentation in the
output from ``info``.
According to this output, the relevant parameter set is
named ``'krylov_solver'``, and the parameters are set like this:

.. code-block:: python

        prm = parameters['krylov_solver']  # short form
        prm['absolute_tolerance'] = 1E-10
        prm['relative_tolerance'] = 1E-6
        prm['maximum_iterations'] = 1000

Stopping criteria for Krylov solvers usually involve the norm of
the residual, which must be smaller than the absolute tolerance
parameter *or* smaller than the relative tolerance parameter times
the initial residual.

To get a printout of the number of actual iterations to reach the
stopping criterion, we can insert

.. code-block:: python

        set_log_level(PROGRESS)
        # or
        set_log_level(DEBUG)

A message with the equation system size, solver type, and number of
iterations arises from specifying the argument ``PROGRESS``, while
``DEBUG`` results in more information, including CPU time spent in
the various parts of the matrix assembly and solve process.

We remark that default values for the global parameter database can be
defined in an XML file. To generate such a file from the current set
of parameters in a program, run

.. code-block:: python

        File('fenics_parameters.xml') << parameters

If a ``fenics_parameters.xml`` file is found in the directory where a
FEniCS program is run, this file is read and used to initialize the
``parameters`` object. Otherwise, the file
``.config/fenics/fenics_parameters.xml`` in the user's home directory is
read, if it exists.  Another alternative is to load the XML (with any
name) manually in the program:

.. code-block:: python

        File('fenics_parameters.xml') >> parameters

The XML file can also be in gzip'ed form with the extension ``.xml.gz``.

.. index:: p2D_iter.py

An extended solver function
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Let us extend the previous solver function from
``p2D_func.py`` such that it also offers the GMRES+ILU
preconditioned Krylov solver.

.. code-block:: python

        from fenics import *
        
        def solver(
            f, u0, Nx, Ny, degree=1,
            linear_solver='Krylov', # Alt: 'direct'
            abs_tol=1E-5,           # Absolute tolerance in Krylov solver
            rel_tol=1E-3,           # Relative tolerance in Krylov solver
            max_iter=1000,          # Max no of iterations in Krylov solver
            log_level=PROGRESS,     # Amount of solver output
            dump_parameters=False,  # Write out parameter database?
            ):
            """
            Solve -Laplace(u)=f on [0,1]x[0,1] with 2*Nx*Ny Lagrange
            elements of specified degree and u=u0 (Expresssion) on
            the boundary.
            """
            # Create mesh and define function space
            mesh = UnitSquareMesh(Nx, Ny)
            V = FunctionSpace(mesh, 'Lagrange', degree)
        
            def u0_boundary(x, on_boundary):
                return on_boundary
        
            bc = DirichletBC(V, u0, u0_boundary)
        
            # Define variational problem
            u = TrialFunction(V)
            v = TestFunction(V)
            a = inner(nabla_grad(u), nabla_grad(v))*dx
            L = f*v*dx
        
            # Compute solution
            u = Function(V)
        
            if linear_solver == 'Krylov':
                prm = parameters['krylov_solver'] # short form
                prm['absolute_tolerance'] = abs_tol
                prm['relative_tolerance'] = rel_tol
                prm['maximum_iterations'] = max_iter
                print(parameters['linear_algebra_backend'])
                set_log_level(log_level)
                if dump_parameters:
                    info(parameters, True)
                solver_parameters = {'linear_solver': 'gmres',
                                     'preconditioner': 'ilu'}
            else:
                solver_parameters = {'linear_solver': 'lu'}
        
            solve(a == L, u, bc, solver_parameters=solver_parameters)
            return u
        
        def solver_objects(
            f, u0, Nx, Ny, degree=1,
            linear_solver='Krylov', # Alt: 'direct'
            abs_tol=1E-5,           # Absolute tolerance in Krylov solver
            rel_tol=1E-3,           # Relative tolerance in Krylov solver
            max_iter=1000,          # Max no of iterations in Krylov solver
            log_level=PROGRESS,     # Amount of solver output
            dump_parameters=False,  # Write out parameter database?
            ):
            """As solver, but use objects for linear variational problem
            and solver."""
            # Create mesh and define function space
            mesh = UnitSquareMesh(Nx, Ny)
            V = FunctionSpace(mesh, 'Lagrange', degree)
        
            def u0_boundary(x, on_boundary):
                return on_boundary
        
            bc = DirichletBC(V, u0, u0_boundary)
        
            # Define variational problem
            u = TrialFunction(V)
            v = TestFunction(V)
            a = inner(nabla_grad(u), nabla_grad(v))*dx
            L = f*v*dx
        
            # Compute solution
            u = Function(V)
            problem = LinearVariationalProblem(a, L, u, bc)
            solver  = LinearVariationalSolver(problem)
        
            if linear_solver == 'Krylov':
                solver.parameters['linear_solver'] = 'gmres'
                solver.parameters['preconditioner'] = 'ilu'
                prm = solver.parameters['krylov_solver'] # short form
                prm['absolute_tolerance'] = abs_tol
                prm['relative_tolerance'] = rel_tol
                prm['maximum_iterations'] = max_iter
                print(parameters['linear_algebra_backend'])
                set_log_level(log_level)
                if dump_parameters:
                    info(parameters, True)
                solver_parameters = {'linear_solver': 'gmres',
                                     'preconditioner': 'ilu'}
            else:
                solver_parameters = {'linear_solver': 'lu'}
        
            solver.solve()
            return u

This new ``solver`` function, found in the file
``p2D_iter.py``, replaces the one in ``p2D_func.py``:
it has all the functionality of the previous ``solver`` function,
but can also solve the linear system with
iterative methods and report the progress of such solvers.

Remark regarding unit tests
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Regarding verification of the new ``solver`` function in terms of unit
tests, it turns out that unit testing in a problem where the
approximation error vanishes is gets more complicated when we use
iterative methods. The problem is to keep the error due to iterative
solution smaller than the tolerance used in the verification
tests. First of all this means that the tolerances used in the Krylov
solvers must be smaller than the tolerance used in the ``assert`` test,
but this is no guarantee to keep the linear solver error this small.
For linear elements and small meshes, a tolerance of :math:`10^{-11}` works
well in the case of Krylov solvers too (using a tolerance :math:`10^{-12}`
in those solvers. However, as soon as we switch to P2 elements, it is
hard to force the linear solver error below :math:`10^{-6}`. Consequently,
tolerances in tests depend on the numerical methods. The interested
reader is referred to the ``test_solver`` function in
``p2D_iter.py`` for details: this test function tests the
numerical solution for direct and iterative linear solvers, for
different meshes, and different degrees of the polynomials in the
finite element basis functions.

.. _tut:poisson1:solver:problem:

Linear variational problem and solver objects
---------------------------------------------

.. index:: LinearVariationalProblem

.. index:: LinearVariationalSolver

.. index:: p2D_iter.py

The ``solve(a == L, u, bc)`` call is just a compact syntax alternative to a
slightly more comprehensive specification of the variational equation
and the solution of the associated linear system.  This alternative
syntax is used in a lot of FEniCS applications and will also be
used later in this tutorial, so we show it already now:

.. code-block:: python

        u = Function(V)
        problem = LinearVariationalProblem(a, L, u, bc)
        solver  = LinearVariationalSolver(problem)
        solver.solve()

Many objects have an attribute ``parameters`` corresponding to
a parameter set in the global ``parameters`` database,
but local to the object. Here, ``solver.parameters`` play that
role. Setting the CG method with ILU preconditioning as solution
method and specifying solver-specific parameters can be done
like this:

.. code-block:: python

        solver.parameters['linear_solver'] = 'gmres'
        solver.parameters['preconditioner'] = 'ilu'
        prm = solver.parameters['krylov_solver'] # short form
        prm['absolute_tolerance'] = 1E-7
        prm['relative_tolerance'] = 1E-4
        prm['maximum_iterations'] = 1000

Settings in the global ``parameters`` database are
propagated to parameter sets in individual objects, with the
possibility of being overwritten as done above.

The linear variational problem and solver objects as outlined above
are incorporated in an alternative solver function, named
``solver_objects``, in
``p2D_iter.py``. Otherwise, this function is parallel to the
previously shown ``solver`` function.

.. _tut:poisson1:verify1:

Writing out the discrete solution
---------------------------------

We have seen how to grab the degrees of freedom array from a
finite element function ``u``:

.. code-block:: python

        u_array = u.vector().array()

The elements in ``u_array`` correspond to function values of ``u`` at nodes
in the mesh.  Now, a fundamental question is: What are the
coordinates of node ``i`` whose value is ``u_array[i]``? To answer this
question, we need to understand how to get our hands on the
coordinates, and in particular, the numbering of degrees of freedom
and the numbering of vertices in the mesh. We start with P1 (1st order
Lagrange) elements where all the nodes are vertices in the mesh.

The function ``mesh.coordinates()`` returns the coordinates of the
vertices as a ``numpy`` array with shape :math:`(M,d`), :math:`M` being the number
of vertices in the mesh and :math:`d` being the number of space dimensions:

.. code-block:: python

        >>> from fenics import *
        >>>
        >>> mesh = UnitSquareMesh(2, 2)
        >>> coor = mesh.coordinates()
        >>> coor
        array([[ 0. ,  0. ],
               [ 0.5,  0. ],
               [ 1. ,  0. ],
               [ 0. ,  0.5],
               [ 0.5,  0.5],
               [ 1. ,  0.5],
               [ 0. ,  1. ],
               [ 0.5,  1. ],
               [ 1. ,  1. ]])

We see from this output that vertices are first numbered along :math:`y=0`
with increasing :math:`x` coordinate, then along :math:`y=0.5`, and so on.

Next we compute a function ``u`` on this mesh, e.g., the :math:`u=x+y`:

.. code-block:: python

        >>> V = FunctionSpace(mesh, 'Lagrange', 1)
        >>> u = interpolate(Expression('x[0]+x[1]'), V)
        >>> plot(u, interactive=True)
        >>> u_array = u.vector().array()
        >>> u_array
        array([ 1. ,  0.5,  1.5,  0. ,  1. ,  2. ,  0.5,  1.5,  1. ])

We observe that ``u_array[0]`` is *not* the value of :math:`x+y` at vertex number 0,
since this vertex has coordinates :math:`x=y=0`. The numbering of the
degrees of freedom :math:`U_1,\ldots,U_{N}` is obviously not the same as the
numbering of the vertices.

In the plot of ``u``, type ``w`` to turn on wireframe instead of fully colored
surface, ``m`` to show the mesh, and then ``v`` to show the
numbering of the vertices.

| 
| 

.. figure:: vertex_numbering.png
   :width: 500

| 
| 

.. index:: compute vertex values

.. index:: vertex values

The vertex values of a ``Function`` object can be extracted by
``u.compute_vertex_values()``, which returns an array where element ``i``
is the value of ``u`` at vertex ``i``:

.. code-block:: python

        >>> u_at_vertices = u.compute_vertex_values()
        >>> for i, x in enumerate(coor):
        ...     print('vertex %d: u_at_vertices[%d]=%g\tu(%s)=%g' %
        ...           (i, i, u_at_vertices[i], x, u(x)))
        vertex 0: u_at_vertices[0]=0	u([ 0.  0.])=8.46545e-16
        vertex 1: u_at_vertices[1]=0.5	u([ 0.5  0. ])=0.5
        vertex 2: u_at_vertices[2]=1	u([ 1.  0.])=1
        vertex 3: u_at_vertices[3]=0.5	u([ 0.   0.5])=0.5
        vertex 4: u_at_vertices[4]=1	u([ 0.5  0.5])=1
        vertex 5: u_at_vertices[5]=1.5	u([ 1.   0.5])=1.5
        vertex 6: u_at_vertices[6]=1	u([ 0.  1.])=1
        vertex 7: u_at_vertices[7]=1.5	u([ 0.5  1. ])=1.5
        vertex 8: u_at_vertices[8]=2	u([ 1.  1.])=2

.. index:: vertex to dof map

.. index:: dof to vertex map

Alternatively, we can ask for the mapping from vertex numbering to degrees
of freedom numbering in the space :math:`V`:

.. code-block:: text

        v2d = vertex_to_dof_map(V)

Now, ``u_array[v2d[i]]`` will give us the value of the
degree of freedom in ``u`` corresponding
to vertex ``i`` (``v2d[i]``). In particular, ``u_array[v2d]`` is an array
with all the elements in the same (vertex numbered) order as ``coor``.
The inverse map, from degrees of freedom
number to vertex number is given by ``dof_to_vertex_map(V)``, so
``coor[dof_to_vertex_map(V)]`` results in an array of all the
coordinates in the same order as the degrees of freedom.

For Lagrange elements of degree larger than 1, there are degrees of
freedom (nodes) that do not correspond to vertices.
[**hpl 8**: Anders, is the following true?] There is no simple way of getting the
coordinates associated with the non-vertex degrees of freedom, so
if we want to write out the values of a finite element solution,
the following code snippet does the task at the vertices, and this
will work for all kinds of Lagrange elements.

.. code-block:: python

        def compare_exact_and_numerical_solution(Nx, Ny, degree=1):
            u0 = Expression('1 + x[0]*x[0] + 2*x[1]*x[1]')
            f = Constant(-6.0)
            u = solver(f, u0, Nx, Ny, degree, linear_solver='direct')
            # Grab exact and numerical solution at the vertices and compare
            V = u.function_space()
            u0_Function = interpolate(u0, V)
            u0_at_vertices = u0_Function.compute_vertex_values()
            u_at_vertices = u.compute_vertex_values()
            coor = V.mesh().coordinates()
            for i, x in enumerate(coor):
                print('vertex %2d (%9g,%9g): error=%g'
                      % (i, x[0], x[1],
                         u0_at_vertices[i] - u_at_vertices[i]))
                # Could compute u0(x) - u_at_vertices[i] but this
                # is much more expensive and gives more rounding errors
            center = (0.5, 0.5)
            error = u0(center) - u(center)
            print('numerical error at %s: %g' % (center, error))

As expected, the error is either identically zero or about :math:`10^{-15}` or
:math:`10^{-16}`.


.. admonition:: Cheap vs expensive function evaluation

   Given a ``Function`` object ``u``, we can evaluate its values in various
   ways:
   
   1. ``u(x)`` for an arbitrary point ``x``
   
   2. ``u.vector().array()[i]`` for degree of freedom number ``i``
   
   3. ``u.compute_vertex_values()[i]`` at vertex number ``i``
   
   The first method, though very flexible, is in general very expensive
   while the other two are very efficient (but limited to certain points).




To demonstrate the use of point evaluations of ``Function`` objects,
we write out the computed ``u`` at the center point
of the domain and compare it with the exact solution:

.. code-block:: python

        center = (0.5, 0.5)
        error = u0(center) - u(center)
        print('numerical error at %s: %g' % (center, error)

Trying a :math:`2(3\times 3)` mesh, the output from the
previous snippet becomes

.. code-block:: text

        numerical error at (0.5, 0.5): -0.0833333

The discrepancy is due to the fact that the center point is not a node
in this particular mesh, but a point in the interior of a cell,
and ``u`` varies linearly over the cell while
``u0`` is a quadratic function. When the center point is a node, as in
a :math:`2(t\times 2)` or :math:`2(4\times 4)` mesh, the error is of the order
:math:`10^{-15}`.

We have seen how to extract the nodal values in a ``numpy`` array.
If desired, we can adjust the nodal values too. Say we want to
normalize the solution such that :math:`\max_j U_j = 1`. Then we
must divide all :math:`U_j` values
by :math:`\max_j U_j`. The following function performs the task:

.. code-block:: python

        def normalize_solution(u):
            """Normalize u: return u divided by max(u)."""
            u_array = u.vector().array()
            u_max = u_array.max()
            u_array /= u_max
            u.vector()[:] = u_array
            u.vector().set_local(u_array)  # alternative
            return u

That is, we manipulate ``u_array`` as desired, and then we insert this
array into ``u``'s ``Vector`` object.  The ``/=`` operator implies an
in-place modification of the object on the left-hand side: all
elements of the ``u_array`` are divided by the value ``max_u``.
Alternatively, one could write ``u_array = u_array/max_u``, which
implies creating a new array on the right-hand side and assigning this
array to the name ``u_array``.


.. admonition:: Be careful when manipulating degrees of freedom

   A call like ``u.vector().array()`` returns a *copy* of the data in
   ``u.vector()``. One must therefore never perform assignments like
   ``u.vector.array()[:] = ...``, but instead extract the ``numpy`` array
   (i.e., a copy), manipulate it, and insert it back with ``u.vector()[:]
   = `` or ``u.set_local(...)``.




All the code in this subsection can be found in the file ``p2D_iter.py``
in the ``poisson`` directory.

.. _tut:poisson:nD:

Parameterizing the number of space dimensions
---------------------------------------------

.. index:: dimension-independent code

FEniCS makes it is easy to write a unified simulation code that can
operate in 1D, 2D, and 3D. We will conveniently make use of this
feature in forthcoming examples.  As an appetizer, go back to the
introductory programs ``p2D_plain.py`` or
``p2D_func.py`` in the ``poisson`` directory and change the
mesh construction from ``UnitSquareMesh(6, 4)`` to ``UnitCubeMesh(6, 4,
5)``. Now the domain is the unit cube partitioned into :math:`6\times 4\times
5` boxes, and each box is divided into six tetrahedra-shaped
finite elements for computations.  Run the program and observe that we
can solve a 3D problem without any other modifications (!). The
visualization allows you to rotate the cube and observe the function
values as colors on the boundary.

Generating a hypercube
~~~~~~~~~~~~~~~~~~~~~~

The syntax for generating a unit interval, square, or box is different,
so we need to encapsulate this part of the code. Given a list or
tuple with the divisions into cells in the various spatial direction,
the following function returns the mesh in a :math:`d`-dimensional problem:

.. code-block:: python

        def unit_hypercube(divisions, degree):
            mesh_classes = [UnitIntervalMesh, UnitSquareMesh, UnitCubeMesh]
            d = len(divisions)
            mesh = mesh_classes[d-1](*divisions)
            V = FunctionSpace(mesh, 'Lagrange', degree)
            return V, mesh

The construction ``mesh_class[d-1]`` will pick the right name of the
object used to define the domain and generate the mesh.
Moreover, the argument ``*divisions``
sends all the component of the list ``divisions`` as separate
arguments. For example, in a 2D problem where ``divisions`` has
two elements, the statement

.. code-block:: python

        mesh = mesh_classes[d-1](*divisions)

is equivalent to

.. code-block:: python

        mesh = UnitSquareMesh(divisions[0], divisions[1])

Replacing the ``Nx`` and ``Ny`` parameters by ``divisions`` and calling
``unit_hypercube`` to create the mesh are the two modifications that
we need in any of the previously shown ``solver`` functions to turn
them into solvers for :math:`d`-dimensional problems!

.. _tut:poisson:gradu:

Computing derivatives
---------------------

.. index:: projection

In Poisson and many other problems, the gradient of the solution is
of interest. The computation is in principle simple:
since
:math:`u = \sum_{j=1}^N U_j \phi_j`, we have that

.. math::
        
        \nabla u = \sum_{j=1}^N U_j \nabla \phi_j{\thinspace .}
        

Given the solution variable ``u`` in the program, its gradient is
obtained by ``grad(u)`` or ``nabla_grad(u)``.  However, the gradient of a
piecewise continuous finite element scalar field is a discontinuous
vector field since the :math:`\phi_j` has discontinuous derivatives at the
boundaries of the cells. For example, using Lagrange elements of
degree 1, :math:`u` is linear over each cell, and the numerical :math:`\nabla u`
becomes a piecewise constant vector field. On the contrary, the exact
gradient is continuous.  For visualization and data analysis purposes
we often want the computed gradient to be a continuous vector
field. Typically, we want each component of :math:`\nabla u` to be
represented in the same way as :math:`u` itself. To this end, we can project
the components of :math:`\nabla u` onto the same function space as we used
for :math:`u`.  This means that we solve :math:`w = \nabla u` approximately by a
finite element method, using the same elements for the components of
:math:`w` as we used for :math:`u`. This process is known as *projection*.

.. index:: project

.. index:: projection

Not surprisingly, projection is a so common operation in finite
element programs that FEniCS has a function for doing the task:
``project(q, W)``, which returns the projection of some ``Function`` or
``Expression`` object named ``q`` onto the ``FunctionSpace`` (if ``q`` is
scalar) or ``VectorFunctionSpace`` (if ``q`` is vector-valued) named ``W``.
Specifically, in our case where ``u`` is computed and we want to project
the vector-valued ``grad(u)`` onto the ``VectorFunctionSpace`` where each
component has the same ``Function`` space as ``u``:

.. code-block:: python

        V = u.function_space()
        degree = u.ufl_element().degree()
        W = VectorFunctionSpace(V.mesh(), 'Lagrange', degree)
        
        grad_u = project(grad(u), W)

Figure :ref:`tut:poisson:2D:fig:ex1:gradu` shows
example of how such a smoothed ``gradu(u)`` vector field is visualized.

.. _tut:poisson:2D:fig:ex1:gradu:

.. figure:: ex1_gradu.png
   :width: 480

   *Example of visualizing the vector field :math:`\nabla u` by arrows at the nodes*

The applications of projection are many, including turning discontinuous
gradient fields into continuous ones, comparing higher- and lower-order
function approximations, and transforming a higher-order finite element
solution down to a piecewise linear field, which is required by many
visualization packages.

The scalar component fields of the gradient
can be extracted as separate fields and, e.g., visualized:

.. code-block:: python

        grad_u_x, grad_u_y = grad_u.split(deepcopy=True)
        plot(grad_u_x, title='x-component of grad(u)')
        plot(grad_u_y, title='y-component of grad(u)')

The ``deepcopy=True`` argument signifies a *deep copy*, which is
a general term in computer science implying that a copy of the data is
returned. (The opposite, ``deepcopy=False``,
means a *shallow copy*, where
the returned objects are just pointers to the original data.)

.. index:: degrees of freedom array

.. index:: nodal values array

.. index:: degrees of freedom array (vector field)

The ``grad_u_x`` and ``grad_u_y`` variables behave as
``Function`` objects. In particular, we can extract the underlying
arrays of nodal values by

.. code-block:: python

        grad_u_x_array = grad_u_x.vector().array()
        grad_u_y_array = grad_u_y.vector().array()

The degrees of freedom of the ``grad_u`` vector field can also be
reached by

.. code-block:: python

        grad_u_array = grad_u.vector().array()

but this is a flat ``numpy`` array where the degrees of freedom for the
:math:`x` component of the gradient is stored in the first part, then the
degrees of freedom of the :math:`y` component, and so on. This is less convenient
to work with.

.. index:: p2D_iter.py

The function ``gradient(u)`` in ``p2D_iter.py``
returns a projected (smoothed) :math:`\nabla u` vector field, given some
finite element function ``u``:

.. code-block:: python

        def gradient(u):
            """Return grad(u) projected onto same space as u."""
            V = u.function_space()
            mesh = V.mesh()
            V_g = VectorFunctionSpace(mesh, 'Lagrange', 1)
            grad_u = project(grad(u), V_g)
            grad_u.rename('grad(u)', 'continuous gradient field')
            return grad_u

Examining the arrays with vertex values of ``grad_u_x`` and ``grad_u_y``
quickly reveals that the computed ``grad_u`` field does not equal the
exact gradient :math:`(2x, 4y)` in this particular test problem where
:math:`u=1+x^2+2y^2`.  There are inaccuracies at the boundaries, arising
from the approximation problem for :math:`w`. Increasing the mesh resolution
shows, however, that the components of the gradient vary linearly as
:math:`2x` and :math:`4y` in the interior of the mesh (i.e., as soon as we are one
element away from the boundary).  The ``application_test_gradient``
function in ``p2D_iter.py`` performs some experiments.


.. admonition:: Detour: Manual projection

   Although you will always use ``project`` to project a finite element
   function, it can be constructive this point in the tutorial to formulate the
   projection mathematically and implement its steps manually in FEniCS.
   
   Looking at the component :math:`\partial u/\partial x` of the gradient, we
   project the (discrete) derivative :math:`\sum_jU_j{\partial \phi_j/\partial
   x}` onto a function space with basis :math:`\phi_1,\phi_2,\ldots` such that
   the derivative in this space is expressed by the standard sum
   :math:`\sum_j\bar U_j \phi_j`, for suitable (new) coefficients :math:`\bar U_j`.
   
   The variational problem for :math:`w` reads: find  :math:`w\in V^{(\mbox{g})}` such that
   
   .. _Eq:_auto5:

.. math::

    \tag{16}
    a(w, v) = L(v)\quad\forall v\in \hat{V^{(\mbox{g})}},
           
           
   
   where
   
   .. _Eq:_auto6:

.. math::

    \tag{17}
    a(w, v) = \int_\Omega w\cdot v {\, \mathrm{d}x},
           
           
   
   .. _Eq:_auto7:

.. math::

    \tag{18}
    L(v) = \int_\Omega \nabla u\cdot v {\, \mathrm{d}x}{\thinspace .}
           
           
   
   The function spaces :math:`V^{(\mbox{g})}` and :math:`\hat{V^{(\mbox{g})}}` (with the superscript g
   denoting "gradient") are vector versions of the function space for
   :math:`u`, with boundary conditions removed (if :math:`V` is the space we used for
   :math:`u`, with no restrictions on boundary values, :math:`V^{(\mbox{g})} = \hat{V^{(\mbox{g})}} =
   [V]^d`, where :math:`d` is the number of space dimensions).  For example, if
   we used piecewise linear functions on the mesh to approximate :math:`u`, the
   variational problem for :math:`w` corresponds to approximating each
   component field of :math:`w` by piecewise linear functions.
   
   The variational problem for the vector field
   :math:`w`, called ``grad_u`` in the code, is easy to solve in FEniCS:
   
   .. code-block:: python
   
           V_g = VectorFunctionSpace(mesh, 'Lagrange', 1)
           w = TrialFunction(V_g)
           v = TestFunction(V_g)
           
           a = inner(w, v)*dx
           L = inner(grad(u), v)*dx
           grad_u = Function(V_g)
           solve(a == L, grad_u)
           
           plot(grad_u, title='grad(u)')
   
   The boundary condition argument to ``solve`` is dropped since there are
   no essential boundary conditions in this problem.
   The new thing is basically that we work with a ``VectorFunctionSpace``,
   since the unknown is now a vector field, instead of the
   ``FunctionSpace`` object for scalar fields.




.. _tut:possion:2D:varcoeff:

A variable-coefficient Poisson problem
--------------------------------------

.. index:: Poisson's equation with variable coefficient

.. index:: p2D_vc.py

Suppose we have a variable coefficient :math:`p(x,y)` in the Laplace operator,
as in the boundary-value problem

.. _Eq:tut:poisson:2D:varcoeff:

.. math::

    \tag{19}
    - \nabla\cdot \left\lbrack
        p(x,y)\nabla u(x,y)\right\rbrack &= f(x,y) \quad \mbox{in } \Omega,
            \\ 
            u(x,y) &= u_0(x,y) \quad \mbox{on}\  \partial\Omega{\thinspace .}
          
        

We shall quickly demonstrate that this simple extension of our model
problem only requires an equally simple extension of the FEniCS program.

Test problem          (1)
~~~~~~~~~~~~~~~~~~~~~~~~~

Let us continue to use our favorite solution :math:`u(x,y)=1+x^2+2y^2` and
then prescribe :math:`p(x,y)=x+y`. It follows that
:math:`u_0(x,y) = 1 + x^2 + 2y^2` and :math:`f(x,y)=-8x-10y`.

Modifications of the PDE solver
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

What are the modifications we need to do in the previously shown codes
to incorporate the variable coefficient :math:`p`?
from the section :ref:`tut:poisson1:verify1`?

  * ``solver`` must take ``p`` as argument,

  * ``f`` in our test problem
    must be an ``Expression`` since it is no longer a constant,

  * a new ``Expression p`` must be defined for the variable coefficient,

  * the formula for :math:`a(u,v)` in the variational problem is slightly changed.

First we address the modified variational problem. Multiplying
the PDE by a test function :math:`v` and
integrating by parts now results
in

.. math::
        
        \int_\Omega p\nabla u\cdot\nabla v {\, \mathrm{d}x} -
        \int_{\partial\Omega} p{\partial u\over
        \partial n}v {\, \mathrm{d}s} = \int_\Omega fv {\, \mathrm{d}x}{\thinspace .}
        

The function spaces for :math:`u` and :math:`v` are the same as in
the section :ref:`tut:poisson1:varform`, implying that the boundary integral
vanishes since :math:`v=0` on :math:`\partial\Omega` where we have Dirichlet conditions.
The weak form :math:`a(u,v)=L(v)` then has

.. _Eq:_auto8:

.. math::

    \tag{20}
    a(u,v) = \int_\Omega p\nabla u\cdot\nabla v {\, \mathrm{d}x},
        
        

.. _Eq:_auto9:

.. math::

    \tag{21}
    L(v) = \int_\Omega fv {\, \mathrm{d}x}{\thinspace .}
        
        

In the code for solving :math:`-\nabla^2u=f` we must replace

.. code-block:: python

        a = inner(nabla_grad(u), nabla_grad(v))*dx

by

.. code-block:: python

        a = p*inner(nabla_grad(u), nabla_grad(v))*dx

to solve :math:`-\nabla\cdot(p\nabla u)=f`. Moreover,
the definitions of ``p`` and ``f`` in the test problem read

.. code-block:: python

        p = Expression('x[0] + x[1]')
        f = Expression('-8*x[0] - 10*x[1]')

No additional modifications are necessary. The file
``p2D_vc.py`` (variable-coefficient Poisson problem in 2D)
is a copy of ``p2D_iter.py`` with the mentioned changes
incorporated. Observe that :math:`p=1` recovers the original problem in
``p2D_iter.py``.

You can run it and confirm
that it recovers the exact :math:`u` at the nodes.

Modifications of the flux computations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The flux :math:`-p\nabla u` may be of particular interest in
variable-coefficient Poisson problems as it often has an interesting
physical significance. As explained in the section :ref:`tut:poisson:gradu`,
we normally want the piecewise discontinuous flux or gradient to be
approximated by a continuous vector field, using the same elements as
used for the numerical solution :math:`u`. The approximation now consists of
solving :math:`w = -p\nabla u` by a finite element method: find :math:`w\in V^{(\mbox{g})}`
such that

.. _Eq:_auto10:

.. math::

    \tag{22}
    a(w, v) = L(v)\quad\forall v\in \hat{V^{(\mbox{g})}},
        
        

where

.. _Eq:_auto11:

.. math::

    \tag{23}
    a(w, v) = \int_\Omega w\cdot v {\, \mathrm{d}x},
        
        

.. _Eq:_auto12:

.. math::

    \tag{24}
    L(v) = \int_\Omega (-p \nabla u)\cdot v {\, \mathrm{d}x}{\thinspace .}
        
        

This problem is identical to the one in the section :ref:`tut:poisson:gradu`,
except that :math:`p` enters the integral in :math:`L`.

The relevant Python statement for computing the flux field take the form

.. code-block:: python

        flux = project(-p*grad(u),
                       VectorFunctionSpace(mesh, 'Lagrange', degreee))

An appropriate function for computing the flux based on ``u`` and ``p`` is

.. code-block:: python

        def flux(u, p):
            """Return p*grad(u) projected onto same space as u."""
            V = u.function_space()
            mesh = V.mesh()
            degree = u.ufl_element().degree()
            V_g = VectorFunctionSpace(mesh, 'Lagrange', degree)
            flux_u = project(-p*grad(u), V_g)
            flux_u.rename('flux(u)', 'continuous flux field')
            return flux_u

Plotting the flux vector field is naturally as easy as plotting
the gradient (see the section :ref:`tut:poisson:gradu`):

.. code-block:: python

        plot(flux, title='flux field')
        
        flux_x, flux_y = flux.split(deepcopy=True)  # extract components
        plot(flux_x, title='x-component of flux (-p*grad(u))')
        plot(flux_y, title='y-component of flux (-p*grad(u))')

For data analysis of the nodal values of the flux field we can
grab the underlying ``numpy`` arrays (demands a ``deepcopy=True``
in the split of ``flux``):

.. code-block:: python

        flux_x_array = flux_x.vector().array()
        flux_y_array = flux_y.vector().array()

[**hpl 9**: The following is not done properly in the revised version.]
The function ``application_test_gradient`` in the
program ``p2D_vc.py`` contains in addition some plots,
including a curve plot
comparing ``flux_x`` and the exact counterpart along the line :math:`y=1/2`.
The associated programming details related to this visualization
are explained in the section :ref:`tut:structviz`.

.. _tut:poisson1:linalg:

Creating the linear system explicitly
-------------------------------------

Given :math:`a(u,v)=L(v)`, the discrete solution :math:`u` is computed by
inserting :math:`u=\sum_{j=1}^N U_j \phi_j` into :math:`a(u,v)` and demanding
:math:`a(u,v)=L(v)` to be fulfilled for :math:`N` test functions
:math:`\hat\phi_1,\ldots,\hat\phi_N`. This implies

.. math::
        
        \sum_{j=1}^N a(\phi_j,\hat\phi_i) U_j = L(\hat\phi_i),\quad i=1,\ldots,N,
        

which is nothing but a linear system,

.. math::
        
          AU = b,
        

where the entries in :math:`A` and :math:`b` are given by

.. math::
        
          A_{ij} &= a(\phi_j, \hat{\phi}_i), \\ 
          b_i &= L(\hat\phi_i){\thinspace .}
        

.. index:: assemble

.. index:: linear systems (in FEniCS)

.. index:: assembly of linear systems

The examples so far have specified the left- and right-hand side of
the variational formulation and then asked FEniCS to assemble the
linear system and solve it.  An alternative is to explicitly call
functions for assembling the coefficient matrix :math:`A` and the right-side
vector :math:`b`, and then solve the linear system :math:`AU=b` with respect to
the :math:`U` vector.  Instead of ``solve(a == L, u, b)`` we now write

.. code-block:: python

        A = assemble(a)
        b = assemble(L)
        bc.apply(A, b)
        u = Function(V)
        U = u.vector()
        solve(A, U, b)

The variables ``a`` and ``L`` are as before. That is, ``a`` refers to the
bilinear form involving a ``TrialFunction`` object (e.g., ``u``)
and a ``TestFunction`` object (``v``), and ``L`` involves a
``TestFunction`` object (``v``). From ``a`` and ``L``,
the ``assemble`` function can
compute :math:`A` and :math:`b`.

The matrix :math:`A` and vector :math:`b` are first assembled without incorporating
essential (Dirichlet) boundary conditions. Thereafter, the
call ``bc.apply(A, b)`` performs the necessary modifications of
the linear system such that ``u`` is guaranteed to equal the prescribed
boundary values.
When we have multiple Dirichlet conditions stored in a list ``bcs``,
as explained in the section :ref:`tut:poisson:multiple:Dirichlet`, we must apply
each condition in ``bcs`` to the system:

.. code-block:: python

        # bcs is a list of DirichletBC objects
        for bc in bcs:
            bc.apply(A, b)

.. index:: assemble_system

There is an alternative function ``assemble_system``, which can
assemble the system and take boundary conditions into account in one call:

.. code-block:: python

        A, b = assemble_system(a, L, bcs)

The ``assemble_system`` function incorporates the boundary conditions
in the element matrices and vectors, prior to assembly.
The conditions are also incorporated in a symmetric way to preserve
eventual symmetry of the coefficient matrix.

.. That is, for each degree of freedom

.. that is known, the corresponding row and column is zero'ed out and 1

.. is placed on the main diagonal, and the right-hand side ``b`` is

.. modified by subtracting the column in ``A`` times the value of the

.. degree of, and then the corresponding entry in ``b`` is replaced by the

.. known value of the degree of freedom.

With ``bc.apply(A, b)`` the
matrix ``A`` is modified in an nonsymmetric way.

.. : The row is zero'ed out

.. and 1 is placed on the main diagonal, and the degree of freedom value

.. is inserted in ``b``.

Note that the solution ``u`` is, as before, a ``Function`` object.
The degrees of freedom, :math:`U=A^{-1}b`, are filled
into ``u``'s ``Vector`` object (``u.vector()``)
by the ``solve`` function.

The object ``A`` is of type ``Matrix``, while ``b`` and
``u.vector()`` are of type ``Vector``. We may convert the
matrix and vector data to ``numpy`` arrays by calling the
``array()`` method as shown before. If you wonder how essential
boundary conditions are incorporated in the linear system, you can
print out ``A`` and ``b`` before and after the
``bc.apply(A, b)`` call:

.. code-block:: python

        A = assemble(a)
        b = assemble(L)
        if mesh.num_cells() < 16:  # print for small meshes only
            print(A.array())
            print(b.array())
        bc.apply(A, b)
        if mesh.num_cells() < 16:
            print(A.array())
            print(b.array())

With access to the elements in ``A`` through a ``numpy`` array we can easily
perform computations on this matrix, such as computing the eigenvalues
(using the ``eig`` function in ``numpy.linalg``). We can alternatively dump
``A.array()`` and ``b.array()`` to file in MATLAB format and invoke
MATLAB or Octave to analyze the linear system.
Dumping the arrays to MATLAB format is done by

.. code-block:: python

        import scipy.io
        scipy.io.savemat('Ab.mat', {'A': A.array(), 'b': b.array()})

Writing ``load Ab.mat`` in MATLAB or Octave will then make
the array variables ``A`` and ``b`` available for computations.

.. index:: SLEPc

Matrix processing in Python or MATLAB/Octave is only feasible for
small PDE problems since the ``numpy`` arrays or matrices in MATLAB
file format are dense matrices. DOLFIN also has an interface to the
eigensolver package SLEPc, which is a preferred tool for computing the
eigenvalues of large, sparse matrices of the type encountered in PDE
problems (see ``demo/la/eigenvalue`` in the DOLFIN source code tree
for a demo).

By default, ``solve(A, U, b)`` applies sparse LU decomposition
as solver. Specification of an iterative solver and preconditioner
is done through two optional arguments:

.. code-block:: python

        solve(A, U, b, 'cg', 'ilu')

Appropriate names of solvers and preconditioners are found in
the section :ref:`tut:app:solver:prec`.

.. index:: KrylovSolver

To control tolerances in the stopping criterion and the maximum
number of iterations, one can explicitly form a ``KrylovSolver`` object
and set items in its ``parameters`` attribute
(see also the section :ref:`tut:poisson1:solver:problem`):

.. code-block:: python

        solver = KrylovSolver('cg', 'ilu')
        prm = solver.parameters
        prm['absolute_tolerance'] = 1E-7
        prm['relative_tolerance'] = 1E-4
        prm['maximum_iterations'] = 1000
        u = Function(V)
        U = u.vector()
        set_log_level(DEBUG)
        solver.solve(A, U, b)

The function ``solver_linalg`` in the
program file ``p2D_vc.py`` implements a solver function where
the user can choose between different types of assembly: the variational
(``solve(a == L, u, bc)``), assembling the matrix and right-hand side separately, and assembling the system such that the coefficient matrix preserves
symmetry.
The function ``application_linalg`` runs a test problem on sequence of
meshes and solves the problem with symmetric and non-symmetric modification
of the coefficient matrix. One can monitor the number of Krylov
method iteration and realize that with a symmetric coefficient matrix,
the Conjugate Gradient method requires slightly fewer iterations than
GMRES in the non-symmetric case. Taking into account that the Conjugate
Gradient method has less work per iteration, there is some efficiency to
be gained by using ``assemble_system``.

[**hpl 10**: Running ``application_linalg``, the results are strange: Why does the ``solve(a==L,...)`` method need many more iterations than ``solve(A, U, b, ...)`` when we use the same Krylov parameter settings? Something wrong with the settings?]

.. index:: random start vector (linear systems)

The choice of start vector for the iterations in a linear solver is often
important. With the ``solver.solve(A, U, b)`` call the default start vector
is the zero vector. A start vector
with random numbers in the interval :math:`[-100,100]` can be computed as

.. code-block:: python

        n = u.vector().array().size
        U = u.vector()
        U[:] = numpy.random.uniform(-100, 100, n)
        solver.parameters['nonzero_initial_guess'] = True
        solver.solve(A, U, b)

Note that we must turn off the default behavior of setting the start
vector ("initial guess") to zero, and then the provided value of ``U``
is used as start vector.

Creating the linear system explicitly in a program can have some
advantages in more advanced problem settings. For example, :math:`A` may
be constant throughout a time-dependent simulation, so we can avoid
recalculating :math:`A` at every time level and save a significant amount
of simulation time.  The sections :ref:`tut:timedep:diffusion1:impl`
and :ref:`tut:timedep:diffusion1:noassemble` deal with this topic
in detail.

.. In other problems, we may divide the variational

.. problem and linear system into different terms, say :math:`A=M + {{\Delta t}} K`,

.. where :math:`M` is a matrix arising from a term like :math:`\partial u/\partial t`,

.. :math:`K` is a term corresponding to a Laplace operator, and :math:`{\Delta t}` is

.. a time discretization parameter. When :math:`{\Delta t}` is changed in time,

.. we can efficiently recompute :math:`A = M + {{\Delta t}} K` without

.. reassembling the constant matrices :math:`M` and :math:`K`. This strategy may

.. speed up simulations significantly.

Visualization
=============

Perhaps you are not particularly amazed by viewing the simple surface
of :math:`u` in the test problem used in the previous sections.  However,
solving a real physical problem with a more interesting and amazing
solution on the screen is only a matter of specifying a more exciting
domain, boundary condition, and/or right-hand side :math:`f`.  The present
chapter starts with the solver for a membrane deflection, where the
geometry is a circle instead of the unit square, and where the
involved functions have more exciting shapes. We then go on with
explaining how the membrane deflection and the pressure load can be
visualized, using both the built-in FEniCS visualization tool and the
powerful application ParaView. Finally, we return to box-shaped
domains with uniform partition and show how the unstructured data in
FEniCS finite element solvers can be transformed to structured mesh
representations like those commonly used for finite difference
methods. The structured mesh representation, whenever possible,
gives greater flexibility
with respect to visualization and data analysis.

.. _tut:poisson:membrane:

Deflection of a circular membrane
---------------------------------

The problem
~~~~~~~~~~~

One possible physical problem regards the deflection :math:`D(x,y)` of an
elastic circular membrane with radius :math:`R`, subject to a localized
perpendicular pressure force, modeled as a Gaussian function.  The
appropriate PDE model is

.. _Eq:_auto13:

.. math::

    \tag{25}
    -T\nabla^2 D = p(x,y)\quad\hbox{in }\Omega = \{ (x,y)\,|\, x^2+y^2\leq R\},
        
        

with

.. _Eq:_auto14:

.. math::

    \tag{26}
    p(x,y) = {A\over 2\pi\sigma}\exp{\left(
        - {1\over2}\left( {x-x_0\over\sigma}\right)^2
        - {1\over2}\left( {y-y_0\over\sigma}\right)^2
        \right)}\, .
        
        

Here, :math:`T` is the tension in the membrane (constant), :math:`p` is the external
pressure load,
:math:`A` the amplitude of the pressure, :math:`(x_0,y_0)` the localization of
the Gaussian pressure function, and :math:`\sigma` the "width" of this
function. The boundary of the membrane has no
deflection, implying :math:`D=0` as boundary condition.

.. For scaling and verification it is convenient to simplify the problem

.. to find an analytical solution. In the limit :math:`\sigma\rightarrow\infty`,

.. :math:`p\rightarrow A/(2\pi\sigma)` (constant pressure throughout :math:`\Omega`),

.. and we can easily find an analytical solution

.. of the problem by integrating the Poisson equation in the

.. radial coordinate: :math:`r\in [0,R]`. The result becomes

.. :math:`D(r)=(r^2-R^2)A/(8\pi\sigma T)`.

Scaling
~~~~~~~

The localization of the pressure, :math:`(x_0,y_0)`, is for simplicity
set to :math:`(0, R_0)`.
There are many physical parameters in this problem, and we can benefit
from grouping them by means of scaling. Let us introduce dimensionless
coordinates :math:`\bar x = x/R`, :math:`\bar y = y/R`, and a dimensionless
deflection :math:`w=D/D_c`, where :math:`D_c` is a characteristic size of the
deflection. Introducing :math:`\bar R_0=R_0/R`, we get

.. math::
         \frac{\partial^2 w}{\partial\bar x^2} +
        \frac{\partial^2 w}{\partial\bar y^2}= \alpha
        \exp{\left(
        - \beta^2(\bar x^2
        + (\bar y-\bar R_0)^2)\right)}\hbox{ for } \bar x^2 + \bar y^2 < 1,

where

.. math::
         \alpha = \frac{R^2A}{2\pi T D_c\sigma},\quad\beta = \frac{R}{\sqrt{2}\sigma}{\thinspace .}

With an appropriate scaling, :math:`\bar w` and its derivatives are of size
unity, so the left-hand side of the scaled PDE is about unity in size,
while the right-hand side has :math:`\alpha` as its characteristic size.
This suggest choosing :math:`\alpha` to be unity, or around unit.
We shall in particular choose :math:`\alpha=4`. With this value,
the solution is :math:`w(\bar x,\bar y) = 1-\bar x^2 - \bar y^2`.
(One can also find the analytical solution in scaled coordinates and show
that the maximum deflection :math:`D(0,0)` is :math:`D_c` if we choose :math:`\alpha=4`
to determine :math:`D_c`.)
With :math:`D_c=AR^2/(8\pi\sigma T)`
and dropping the bars we get the scaled problem

.. _Eq:tut:poisson1:membrane:scaled:eq:

.. math::

    \tag{27}
    \nabla^2w = 4\exp{\left(
        - \beta^2(x^2
        + (y-R_0)^2)\right)},
        
        

to be solved over the unit circle with :math:`w=0` on the boundary.  Now
there are only two parameters to vary: the dimensionless extent of the
pressure, :math:`\beta`, and the localization of the pressure peak, :math:`R_0\in
[0,1]`.  As :math:`\beta\rightarrow 0`, we have a special case with solution
:math:`w=1-x^2-y^2`.

Given a computed :math:`w`, the physical deflection is given by

.. math::
         D = \frac{AR^2}{8\pi\sigma T}w{\thinspace .}

Implementation          (1)
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Very few modifications of the software in ``p2D_iter.py`` are
required. Actually, the ``solver`` function can be reused, except that
the domain is now a circle and not a square. We change the ``solver``
function by letting the mesh be an argument ``mesh`` (instead of ``Nx``
and ``Ny``):

.. code-block:: python

        def solver(
            f, u0, mesh, degree=1,
            linear_solver='Krylov', # Alt: 'direct'
            ...):
            V = FunctionSpace(mesh, 'Lagrange', degree)
            ...

A mesh over the unit circle can be created by the ``mshr`` tool in
FEniCS:

.. code-block:: python

        from mshr import *
        domain = Circle(Point(0.0, 0.0), 1.0)
        mesh = generate_mesh(domain, n)

The ``Circle`` shape from ``mshr`` takes the center and radius of the circle
as the two first arguments, while ``n`` is the resolution, here the
suggested number of cells per radius.

.. index:: Expresion

.. index:: Expression with parameters

The right-hand side pressure function
is represented by an ``Expression`` object. There
are two physical parameters in the formula for :math:`f` that enter the
expression string and these parameters must have their values set
by keyword arguments:

.. code-block:: python

        p = Expression(
            '4*exp(-pow(beta,2)*(pow(x[0], 2) + pow(x[1]-R0, 2)))',
            beta=beta, R0=R0)

The coordinates in ``Expression`` objects *must* be a vector
with indices 0, 1, and 2, and with the name ``x``. Otherwise
we are free to introduce names of parameters as long as these are
given default values by keyword arguments. All the parameters
initialized by keyword arguments can at any time have their
values modified. For example, we may set

.. code-block:: python

        f.beta = 12
        f.R0 = 0.3

.. index:: interpolation

It would be of interest to visualize :math:`p` along with :math:`w` so that we can
examine the pressure force and the membrane's response.  We must then transform
the formula (``Expression``) to a finite element function
(``Function``).  The most natural approach is to construct a finite
element function whose degrees of freedom are
calculated from :math:`p`. That is, we interpolate :math:`p`:

.. code-block:: python

        p = interpolate(p, V)

Calling ``plot(p)`` will produce a plot of :math:`p`. Note that the assignment
to ``p`` destroys the previous ``Expression`` object ``p``, so if
it is of interest to still have access to this object, another name must be used
for the ``Function`` object returned by ``interpolate``.

We need some evidence that the program works, and to this end we may
use the analytical solution listed above for the case :math:`\beta =0`.

The final program is found in the file ``membrane.py``, located
in the ``poisson`` directory. The key function to simulate
membrane deflection is named ``application``.

.. code-block:: python

        def application(beta, R0, num_elements_radial_dir):
            # Scaled pressure function
            p = Expression(
                '4*exp(-pow(beta,2)*(pow(x[0], 2) + pow(x[1]-R0, 2)))',
                beta=beta, R0=R0)
        
            # Generate mesh over the unit circle
            domain = Circle(Point(0.0, 0.0), 1.0)
            mesh = generate_mesh(domain, num_elements_radial_dir)
        
            w = solver(p, Constant(0), mesh, degree=1,
                       linear_solver='direct')
            w.rename('w', 'deflection')  # set name and label (description)
        
            # Plot scaled solution, mesh and pressure
            plot(mesh, title='Mesh over scaled domain')
            plot(w, title='Scaled ' + w.label())
            V = w.function_space()
            p = interpolate(p, V)
            p.rename('p', 'pressure')
            plot(p, title='Scaled ' + p.label())
        
            # Dump p and w to file in VTK format
            vtkfile = File('membrane.pvd')
            vtkfile << w
            vtkfile << p


.. admonition:: : Tip: Clean up compilation files

   Running FEniCS programs usually implies compilation of some generated
   C++ code. If you run into compilation errors, the first action to perform
   is to clean up compilation files by the command
   
   .. code-block:: text
   
           Terminal> instant-clean
   
   Then recompile, and if the error persist, open the ``.log`` file referred
   to in the error message, search for the word *error*, and see
   if the error message from the C++ compiler makes sense. As a user,
   your compilation errors will in most cases arise from wrong (C++) syntax
   in ``Expression`` objects.




Choosing a very peak-formed pressure with large :math:`\beta` (e.g., :math:`\beta
\geq 20`) and a location :math:`R_0` toward the circular boundary (e.g.,
:math:`R_0=0.5`), may produce an exciting visual demonstrations of the very
smoothed elastic response to a peak force (or mathematically, the
smoothing properties of the inverse of the Laplace operator).  One
needs to experiment with the mesh resolution to get a smooth visual
representation of :math:`p`.  You are strongly encouraged to play around
with the plots and different mesh resolutions:

.. code-block:: text

        Terminal> python -c 'import membrane as m; m.application()' \ 
                  membrane.py

.. _tut:quickviz:

Quick built-in visualization
----------------------------

.. index:: visualization

.. index:: plotting

.. index:: VTK

As we go along with examples it is fun to play around with
``plot`` commands and visualize what is computed. This section explains
some useful visualization features.

The ``plot`` command applies the VTK package to visualize finite element
functions in a very quick and simple way.  The command is ideal for
debugging, teaching, and initial scientific investigations.  The
visualization can be interactive, or you can steer and automate it
through program statements.  More advanced and professional
visualizations are usually better created with advanced tools like
Mayavi, ParaView, or VisIt.

.. index:: membranev.p

We have made a program ``membrane.py`` for the membrane deflection
problem in the section :ref:`tut:poisson:membrane` and added various
demonstrations of plotting capabilities. You are encouraged to play around with
``membrane.py`` and modify the code as you read about various features.

.. index:: plot

The ``plot`` function can take additional arguments, such as
a title of the plot, or a specification of a wireframe plot (elevated mesh)
instead of a colored surface plot:

.. code-block:: python

        plot(mesh, title='Finite element mesh')
        plot(w, wireframe=True, title='Solution')

Axes can be turned on by the ``axes=True`` argument, while
``interactive=True`` makes the program hang at the plot command - you have
to type ``q`` in the plot window to terminate the plot and continue execution.

The left mouse button is used to rotate the surface, while the right
button can zoom the image in and out.
Point the mouse to the ``Help`` text down in the lower left corner to
get a list of all the keyboard commands that are available.
For example,

 * pressing ``m`` turns visualization of the mesh on and off,

 * pressing ``b`` turns on and off a bounding box,

 * pressing ``p`` dumps the plot to a PNG file,

 * pressing ``P`` dumps the plot to a PDF file,

 * pressing `Ctrl +' stretches the surface in the :math:`z` direction,

 * pressing `Ctrl -' shrinks++ the surface in the :math:`z` direction,

 * pressing `Ctrl w' closes the plot window,

 * pressing `Ctrl q' closes all plot windows.

The plots created by pressing ``p`` or ``P`` are stored in files with
names ``fenics_plot_X.png`` or ``fenics_plot_X.pdf``,
where ``X`` is an integer that is increased by one from the last plot
that was made. The file stem ``fenics_plot_`` can be set to something
more suitable through the ``hardcopy_prefix`` keyword argument to the
``plot`` function,
for instance, ``plot(f, hardcopy_prefix='pressure')``.

.. index:: rotate PDF plots

.. index:: pdftk

Plots stored in PDF format need to be rotated 90 degrees before
inclusion in documents. This can be done by the ``convert -rotate 90``
command (from the ImageMagick utility), but the resulting file has
then no more high-resolution PDF vector graphics. A better solution
is therefore to use ``pdftk`` to preserve the vector graphics:

.. code-block:: text

        Terminal> pdftk fenics_plot_1.pdf cat 1-endnorth output out.pdf

For making plots in batch, we can do the following:

.. code-block:: python

        viz_w = plot(w, interactive=False)
        viz_w.elevate(-10)  # adjust (lift) camera from the default view
        viz_w.plot(w)       # bring new settings into action
        viz_w.write_png('deflection')  # make deflection.png
        viz_w.write_pdf('deflection')  # make deflection.pdf
        # Rotate pdf file (right) from landscape to portrait
        import os
        os.system('pdftk deflection.pdf cat 1-endnorth output w.pdf')

The commands above appear in the ``application2``
function in the ``membrane.py`` file.

.. _tut:poisson:2D:fig1:

.. figure:: membrane_deflection.png
   :width: 480

   *Plot of the deflection of a membrane*

.. _tut:paraview:

ParaView
--------

We strongly recommend FEniCS users to visualize
multi-dimensional  scalar and vector fields with
`ParaView <http://www.paraview.org>`__.

The ``application`` function in the ``membrane.py`` file
writes :math:`w` and :math:`p`, to as finite element functions, to file.
The default filenames are ``membrane000000.vtu`` for the first field, :math:`w`, and
``membrane000001.vtu`` for the second field, :math:`p`. These files are in VTK
format and their data can be visualized in ParaView.

1. Start the ParaView application.

2. Open a file with **File - Open...**. You will see a list of ``.vtu`` files,
   more specifically you see ``mambrane..vtu``. Click to the left of that
   name to expand the collection of ``membrane*.vtu`` files. Choose the
   first one, ``membrane000000.vtu``

3. Click on **Apply** to the left (*Properties* pane) in the GUI, and
   ParaView will visualize the contents of the file, here as a color image.

4. To get rid of the axis in the lower left corner of the plot area
   and axis cross in the middle of the circle, find the *Show Orientation Axis* and *Show Center* buttons to the right in the second row of buttons at the top of the GUI. Click on these buttons to toggle axis information on/off.

5. If you want a color bar to explain the mapping between :math:`w` values and colors,
   go to the *Color Map Editor* in the right of the GUI and use the
   *Show/hide color legend* button. Alternatively, find *Coloring* in the
   lower left part of the GUI, and toggle the *Show* button.

6. The color map, by default going from blue (low values) to red (high values),
   can easily be changed. Find the *Coloring* menu in the left part of the
   GUI, click *Edit*, then in the *Color Map Editor* double click at the
   left end of the color spectrum and choose another color, say yellow, then
   double click at the right and of the spectrum and choose pink, scroll
   down to the bottom of the dialog and click *Update*. The color map now
   goes from yellow to pink.

7. To save the plot to file, click on **File - Export Scene...**,
   choose a file type, fill in a filename, and save.
   See Figure :ref:`tut:paraview:figwp` (middle).

8. To change the background color of plots, choose
   **Edit - Settings...**, **Color** tab, click on **Background Color**,
   and choose it to be, e.g., white. Then choose **Foreground Color** to
   be something different.

9. To plot the mesh with colors reflecting the size of :math:`w`, find the
   *Representation* drop down menu in the left part of the GUI, and replace
   *Surface* by *Wireframe*.

10. To overlay a surface plot with a wireframe plot, load :math:`w` and plot
   as surface, then load :math:`w` again and plot as wireframe. Make sure
   both icons in the *Pipeline Browser* in the left part of the GUI
   are *on* for the two ``membrane000000.vtu`` files.
   See Figure :ref:`tut:paraview:figwp` (left).

11. Redo the surface plot. Then we can add some contour lines.
   Press the semi-sphere icon in the third row of buttons at the top of the
   GUI (the so-called *filters*). A set of contour values can now be
   specified at in a dialog box in the left part of the GUI. Remove
   the default contour (0.578808) and add 0.01, 0.02, 0.03, 0.04, 0.05.
   Click *Apply* and see an overlay of white contour lines.
   In the *Pipeline Browser* you can click on the icons to turn
   a filter on or off.

.. _tut:paraview:figwp:

.. figure:: paraview_membrane3b.png
   :width: 800

   *Default visualizations in ParaView: deflection (left, middle) and pressure load (right)*

A particularly useful feature of ParaView is that you can record GUI clicks
(**Tools - Start/Stop Trace**) and
get them translated to Python code. This allows you automate the
visualization process. You can also make curve plots along lines through
the domain, etc.

For more information, we refer to The ParaView Guide [Ref03]_
(free PDF available) and to the `ParaView tutorial <http://www.paraview.org/Wiki/The_ParaView_Tutorial>`__.

.. --- begin exercise ---

Exercise 2: Visualize a solution in a cube
------------------------------------------

Solve the problem :math:`-\nabla^2 u = f` on the unit cube :math:`[0,1]\times[0,1]\times
[0,1]` with :math:`u_0 = 1 + x^2 + 2y^2 - 4z^2` on the boundary.
Visualize the solution. Explore both the built-in visualization tool and
ParaView.

.. --- begin solution of exercise ---

**Solution.**
As hinted by the filename in this exercise,
a good starting point is the ``solver`` function in
the program ``p2D_func.py``, which solves the corresponding 2D
problem. Only one line in the body of ``solver`` needs to be changed (!):
``mesh = ...``. Replace this line with

.. code-block:: python

        mesh = UnitCubeMesh(Nx, Ny, Nz)

and add ``Nz`` as argument to ``solver``. We implement the new :math:`u_0` function
in ``application_test`` and realize that the proper :math:`f(x,y,z)` function
in this new case is 2.

.. code-block:: python

        u0 = Expression('1 + x[0]*x[0] + 2*x[1]*x[1] - 4*x[2]*x[2]')
        f = Constant(2.0)
        u = solver(f, u0, 6, 4, 3, 1)

The numerical solution is without approximation errors so we can
reuse the unit test from 2D, but it needs an extra ``Nz`` parameter.

The variation in :math:`u` is only quadratic so a coarse mesh is okay for
visualization. Below is plot from the ParaView (left) and the built-in
visualization tool (right).  The usage is as in 2D, but now one can
use the mouse to rotate the 3D cube.

.. figure:: cube3D_quad_sol.png
   :width: 800

We can in ParaView add a contour filter and define contour surfaces for
:math:`u=-2,1,0,1,2,3`, then add a slice filter to get a slice with colors:

.. figure:: cube3D_quad_sol_contours.png
   :width: 500

.. --- end solution of exercise ---

Filename: ``p3D_func``.

.. --- end exercise ---

.. _tut:structviz:

Taking advantage of structured mesh data
----------------------------------------

.. index:: structured mesh

.. index::
   single: visualization, structured mesh

.. index:: scitools

When finite element computations are done on a structured rectangular
mesh, maybe with uniform partitioning, VTK-based tools for completely
unstructured 2D/3D meshes are not required.  Instead we can use
visualization and data analysis tools for *structured data*.
Such data typically appear in finite difference simulations and
image analysis.  Analysis and visualization of structured data are faster
and easier than doing the same with data on unstructured meshes, and
the collection of tools to choose among is much larger.  We shall
demonstrate the potential of such tools and how they allow for
tailored and flexible visualization and data analysis.

.. index:: BoxField

A necessary first step is to transform our ``mesh`` object to an object
representing a rectangle with equally-shaped *rectangular* cells.  The
second step is to transform the one-dimensional array of nodal values
to a two-dimensional array holding the values at the corners of the
cells in the structured mesh. We want to access a value by its :math:`i` and
:math:`j` indices, :math:`i` counting cells in the :math:`x` direction, and :math:`j` counting
cells in the :math:`y` direction.  This transformation is in principle
straightforward, yet it frequently leads to obscure indexing errors,
so using software tools to ease the work is advantageous.

In the directory ``src/modules``, associated with this booklet, we have
included a Python module ``BoxField`` that can take a finite element
function ``u`` computed by a FEniCS software and represent it on a
structured box-shaped mesh and assign or extract values by
multi-dimensional indexing: ``[i]`` in 1D, ``[i,j]`` in 2D, and ``[i,j,k]``
in 3D. Given a finite element function ``u``, the following function
returns a ``BoxField`` object that represents ``u`` on a structured mesh:

.. code-block:: python

        def structured_mesh(u, divisions):
            """Represent u on a structured mesh."""
            # u must have P1 elements, otherwise interpolate to P1 elements
            u2 = u if u.ufl_element().degree() == 1 else \ 
                 interpolate(u, FunctionSpace(mesh, 'Lagrange', 1))
            mesh = u.function_space().mesh()
            from BoxField import fenics_function2BoxField
            u_box = fenics_function2BoxField(
                u2, mesh, divisions, uniform_mesh=True)
            return u_box

Note that we can only turn functions on meshes with P1 elements into
``BoxField`` objects, so if ``u`` is based on another element type, we first
interpolate the scalar field onto a mesh with P1 elements. Also note
that to use the
function, we need to know the divisions into cells in the various
spatial directions (``divisions``).

The ``u_box`` object contains several useful data structures:

 * ``u_box.grid``: object for the structured mesh

 * ``u_box.grid.coor[X]``: grid coordinates in ``X=0`` direction

 * ``u_box.grid.coor[Y]``: grid coordinates in ``Y=1`` direction

 * ``u_box.grid.coor[Z]``: grid coordinates in ``Z=2`` direction

 * ``u_box.grid.coorv[X]``: vectorized version of ``u_box.grid.coor[X]``
   (for vectorized computations or surface plotting)

 * ``u_box.grid.coorv[Y]``: vectorized version of ``u_box.grid.coor[Y]``

 * ``u_box.grid.coorv[Z]``: vectorized version of ``u_box.grid.coor[Z]``

 * ``u_box.values``: ``numpy`` array holding the ``u`` values;
   ``u_box.values[i,j]`` holds ``u`` at the mesh point with coordinates 

|    ``(u_box.grid.coor[X], u_box.grid.coor[Y])``

Iterating over points and values
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Let us go back to the ``solver`` function in the
``p2D_vc.py`` code from
the section :ref:`tut:possion:2D:varcoeff`, compute ``u``, map it onto a
``BoxField`` object for a structured mesh representation, and
write out the coordinates and function values at all mesh points:

.. code-block:: python

        u = solver(p, f, u0, nx, ny, 1, linear_solver='direct')
        u_box = structured_mesh(u, (nx, ny))
        u_ = u_box.values       # numpy array
        X = 0;  Y = 1           # for indexing in x and y direction
        
        # Iterate over 2D mesh points (i,j)
        print('u_ is defined on a structured mesh with %s points' %
              str(u_.shape))
        for j in range(u_.shape[1]):
            for i in range(u_.shape[0]):
                print('u[%d,%d]=u(%g,%g)=%g' %
                      (i, j,
                       u_box.grid.coor[X][i], u_box.grid.coor[X][j],
                       u_[i,j]))

Finite difference approximations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Note that with ``u_``, we can easily express finite difference approximation
of derivatives:

.. code-block:: python

        x = u_box.grid.coor[X]
        dx = x[1] - x[0]
        u_xx = (u_[i-1,j] - 2*u_[i,j] + u_[i+1,j])/dx**2

.. index:: surface plot (structured mesh)

Surface plot
~~~~~~~~~~~~

The ability to access a finite element field in the way one can access
a finite difference-type of field is handy in many occasions, including
visualization and data analysis.
With Matplotlib we can create a surface plot, see
Figure :ref:`tut:structviz:fig1` (upper left):

.. code-block:: python

        import matplotlib.pyplot as plt
        from mpl_toolkits.mplot3d import Axes3D
        from matplotlib import cm
        fig = plt.figure()
        ax = fig.gca(projection='3d')
        cv = u_box.grid.coorv  # vectorized mesh coordinates
        ax.plot_surface(cv[X], cv[Y], u_, cmap=cm.coolwarm,
                        rstride=1, cstride=1)
        plt.title('Surface plot of solution')

The key issue is to know that the coordinates needed for the surface
plot is in ``u_box.grid.coorv`` and that the values are in ``u_``.

.. _tut:structviz:fig1:

.. figure:: p2D_vc_structmesh2.png
   :width: 800

   *Various plots of the solution on a structured mesh*

.. index:: contour plot

Contour plot
~~~~~~~~~~~~

A contour plot can also be made by Matplotlib:

.. code-block:: python

        fig = plt.figure()
        ax = fig.gca()
        levels = [1.5, 2.0, 2.5, 3.5]
        cs = ax.contour(cv[X], cv[Y], u_, levels=levels)
        plt.clabel(cs)  # add labels to contour lines
        plt.axis('equal')
        plt.title('Contour plot of solution')

The result appears in Figure :ref:`tut:structviz:fig1` (upper right).

Curve plot through the mesh
~~~~~~~~~~~~~~~~~~~~~~~~~~~

A handy feature of ``BoxField`` objects is the ability to give a start
point in the grid and a direction, and then extract the field and
corresponding coordinates along the nearest line of mesh points. In 3D fields
one can also extract data in a plane.  Say we want to plot :math:`u` along
the line :math:`y=0.4`. The mesh points, ``x``, and the :math:`u` values
along this line, ``u_val``, are extracted by

.. code-block:: python

        start = (0, 0.4)
        X = 0
        x, u_val, y_fixed, snapped = u_box.gridline(start, direction=X)

The variable ``snapped`` is true if the line had to be snapped onto a
gridline and in that case ``y_fixed`` holds the snapped
(altered) :math:`y` value. To avoid interpolation in the structured mesh,
``snapped`` is in fact *always* true.

A comparison of the numerical and exact solution along the line
:math:`y=0.5` (snapped from :math:`y=0.4`) is made by the following code:

.. code-block:: python

        start = (0, 0.4)
        x, u_val, y_fixed, snapped = u_box.gridline(start, direction=X)
        u_e_val = [u0((x_, y_fixed)) for x_ in x]
        
        plt.figure()
        plt.plot(x, u_val, 'r-')
        plt.plot(x, u_e_val, 'bo')
        plt.legend(['P1 elements', 'exact'], loc='upper left')
        plt.title('Solution along line y=%g' % y_fixed)
        plt.xlabel('x');  plt.ylabel('u')

See Figure :ref:`tut:structviz:fig1` (lower left) for the resulting curve plot.

Curve plot of the flux
~~~~~~~~~~~~~~~~~~~~~~

Let us also compare the numerical and
exact flux :math:`-p\partial u/\partial x` along the same line as above:

.. code-block:: python

        flux_u = flux(u, p)
        flux_u_x, flux_u_y = flux_u.split(deepcopy=True)
        
        # Plot the numerical and exact flux along the same line
        flux2_x = flux_u_x if flux_u_x.ufl_element().degree() == 1 \ 
                  else interpolate(flux_x,
                       FunctionSpace(u.function_space().mesh(),
                                     'Lagrange', 1))
        flux_u_x_box = structured_mesh(flux_u_x, (nx,ny))
        x, flux_u_val, y_fixed, snapped = \ 
           flux_u_x_box.gridline(start, direction=X)
        y = y_fixed
        
        plt.figure()
        plt.plot(x, flux_u_val, 'r-')
        plt.plot(x, flux_u_x_exact(x, y_fixed), 'bo')
        plt.legend(['P1 elements', 'exact'], loc='upper right')
        plt.title('Flux along line y=%g' % y_fixed)
        plt.xlabel('x');  plt.ylabel('u')

The second ``plt.plot`` command
requires a Python function ``flux_u_x_exact(x,y)`` to be
available for the exact flux expression.

Note that Matplotlib is one choice of plotting package. With the unified
interface in the `SciTools package <https://github.com/hplgit/scitools>`__ one
can access Matplotlib, Gnuplot, MATLAB, OpenDX, VisIt, and other plotting
engines through the same API.

.. index:: sympy

Test problem          (2)
~~~~~~~~~~~~~~~~~~~~~~~~~

The graphics referred to in Figure :ref:`tut:structviz:fig1` correspond to
a test problem with prescribed solution :math:`{u_{\small\mbox{e}}} = H(x)H(y)`, where

.. math::
         H(x) = e^{-16(x-\frac{1}{2})^2}\sin(3\pi x){\thinspace .}

We just fit a function :math:`f(x,y)` in the PDE (can choose :math:`p=1`),
and notice that :math:`u=0` along the
boundary of the unit square. Although it is easy to carry out the
differentiation of :math:`f` by hand and hardcode the resulting expressions
in an ``Expression`` object, a more reliable habit is to use Python's
symbolic computing engine, ``sympy``, to perform mathematics and
automatically turn formulas into C++ syntax for ``Expression`` objects.
The following text assumes some familiarity with ``sympy`` and illustrates
how FEniCS programmers may take advantage of symbolic computing.

We start out with defining the exact solution in ``sympy``:

.. code-block:: python

        from sympy import exp, sin, pi  # for use in math formulas
        import sympy as sym
        H = lambda x: exp(-16*(x-0.5)**2)*sin(3*pi*x)
        x, y = sym.symbols('x[0], x[1]')
        u = H(x)*H(y)


.. admonition:: Define symbolic coordinates as required in ``Expression`` objects

   Note that we would normally write ``x, y = sym.symbols('x y')``, but
   if we want the resulting expressions to be have valid syntax for
   ``Expression`` objects, and then :math:`x` reads ``x[0]`` and :math:`y` must be ``x[1]``.
   This is easily accomplished with ``sympy`` by defining the names of ``x`` and
   ``y`` as ``x[0]`` and ``x[1]``: ``x, y = sym.symbols('x[0] x[1]')``.




Turning the expression for ``u`` into C or C++ syntax for ``Expression`` objects
needs two steps. First we ask for the C code of the expression,

.. code-block:: python

        u_c = sym.printing.ccode(u)

Then we do some editing of ``u_c`` to match the required syntax of
``Expression`` objects. Printing ``u_c`` gives (here manually broken up as
two lines)

.. code-block:: text

        -exp(-16*pow(x[0] - 0.5, 2) - 16*pow(x[1] - 0.5, 2))*
        sin(3*M_PI*x[0])*sin(3*M_PI*x[1])

The necessary syntax adjustment is replacing
the symbol ``M_PI`` for :math:`\pi` in C/C++ by ``pi`` (or ``DOLFIN_PI``):

.. code-block:: python

        u_c = u_c.replace('M_PI', 'pi')
        u0 = Expression(u_c)

Thereafter, we can progress with the computation of :math:`f = -\nabla\cdot(p\nabla u)`:

.. code-block:: python

        p = 1
        f = sym.diff(-p*sym.diff(u, x), x) + sym.diff(-p*sym.diff(u, y), y)
        f = sym.simplify(f)
        f_c = sym.printing.ccode(f)
        f_c = f_c.replace('M_PI', 'pi')
        f = Expression(f_c)

We also need a Python function for the exact flux :math:`-p\partial u/\partial x`:

.. code-block:: python

        flux_u_x_exact = sym.lambdify([x, y], -p*sym.diff(u, x),
                                      modules='numpy')

It remains to define ``p = Constant(1)`` and set ``nx`` and ``ny`` before calling
``solver`` to compute the finite element solution of this problem.

.. FIGURE: [fig/p2D_vc_structmesh, width=800 frac=1] Various plots of the solution on a structured mesh.

Postprocessing computations
===========================

[**hpl 3**: Need a little intro.]

.. _tut:poisson1:functionals:

Computing functionals
---------------------

.. index:: functionals

After the solution :math:`u` of a PDE is computed, we occasionally want to compute
functionals of :math:`u`, for example,

.. _Eq:tut:poisson1:functionals:energy:

.. math::

    \tag{28}
    {1\over2}||\nabla u||^2 \equiv {1\over2}\int_\Omega \nabla u\cdot \nabla u {\, \mathrm{d}x},
        
        

which often reflects some energy quantity.
Another frequently occurring functional is the error

.. _Eq:tut:poisson1:functionals:error:

.. math::

    \tag{29}
    ||{u_{\small\mbox{e}}}-u|| = \left(\int_\Omega ({u_{\small\mbox{e}}}-u)^2 {\, \mathrm{d}x}\right)^{1/2},
        
        

where :math:`{u_{\small\mbox{e}}}` is the exact solution. The error
is of particular interest when studying convergence properties.
Sometimes the interest concerns the flux out of a part :math:`\Gamma` of
the boundary :math:`\partial\Omega`,

.. _Eq:tut:poisson1:functionals:flux:

.. math::

    \tag{30}
    F = -\int_\Gamma p\nabla u\cdot\boldsymbol{n} {\, \mathrm{d}s},
        
        

where :math:`\boldsymbol{n}` is an outward unit normal at :math:`\Gamma` and :math:`p` is a
coefficient (see the problem in the section :ref:`tut:possion:2D:varcoeff`
for a specific example).
All these functionals are easy to compute with FEniCS, and this section
describes how it can be done.

.. index:: energy functional

Energy functional
~~~~~~~~~~~~~~~~~

The integrand of the
energy functional
:ref:`(28) <Eq:tut:poisson1:functionals:energy>`
is described in the UFL language in the same manner as we describe
weak forms:

.. code-block:: python

        energy = 0.5*inner(grad(u), grad(u))*dx
        E = assemble(energy)

The ``assemble`` call performs the integration.
It is possible to restrict the integration to subdomains, or parts
of the boundary, by using
a mesh function to mark the subdomains as explained in
the section :ref:`tut:poisson:multi:bc`.

.. index:: error functional

Error functional
~~~~~~~~~~~~~~~~

Computation of :ref:`(29) <Eq:tut:poisson1:functionals:error>` is typically done
by

.. code-block:: python

        error = (u - u_exact)**2*dx
        E = sqrt(abs(assemble(error)))

The exact solution :math:`{u_{\small\mbox{e}}}` is here in a ``Function`` or
``Expression`` object ``u_exact``, while ``u`` is the
finite element approximation.
(Sometimes, for very small error values, the result of
``assemble(error)`` can be a (very small) negative number, so we have
used ``abs`` in the expression for ``E`` above to ensure a positive value
for the ``sqrt`` function.)

As will be explained and demonstrate in the section :ref:`tut:poisson1:convrates`, the integration of ``(u - u_exact)**2*dx``
can result in too optimistic convergence rates unless one is careful
how ``u_exact`` is transferred onto a mesh. The general recommendation
for reliable error computation is to use the ``errornorm`` function
(see ``pydoc fenics.errornorm`` and the section :ref:`tut:poisson1:convrates`
for more information):

.. code-block:: python

        E = errornorm(u_exact, u)

.. index:: flux functional

Flux Functionals
~~~~~~~~~~~~~~~~

To compute flux integrals like :math:`F = -\int_\Gamma p\nabla
u\cdot\boldsymbol{n} {\, \mathrm{d}s}` we need to define the :math:`\boldsymbol{n}` vector,
referred to as *facet normal* in FEniCS. If the surface domain
:math:`\Gamma` in the flux integral is the complete
boundary we can perform the flux computation by

.. code-block:: python

        n = FacetNormal(mesh)
        flux = -p*dot(nabla_grad(u), n)*ds
        total_flux = assemble(flux)

Although ``nabla_grad(u)`` and ``grad(u)`` are interchangeable
in the above expression when ``u`` is a scalar function, we have
chosen to write ``nabla_grad(u)`` because this is
the right expression if we generalize the underlying equation
to a vector Laplace/Poisson PDE. With ``grad(u)`` we must in that
case write ``dot(n, grad(u))``.

It is possible to restrict the integration to a part of the boundary
using a mesh function to mark the relevant part, as
explained in the section :ref:`tut:poisson:multi:bc`. Assuming that the
part corresponds to subdomain number ``i``, the relevant syntax for
the variational formulation of the
flux is ``-p*inner(grad(u), n)*ds(i)``.

.. _tut:poisson1:convrates:

Computing convergence rates
---------------------------

To illustrate error computations and convergence of finite element
solutions, we have included a function ``convergence_rate`` in
the ``p2D_vc.py`` program. This is a tool that is very
handy when verifying finite element codes and will therefore be explained in
detail here.

The :math:`L^2` norm of the error in a finite element approximation :math:`u`,
:math:`{u_{\small\mbox{e}}}` being the exact solution, is given by

Various ways of computing the error
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. math::
         E = \left(\int_\Omega (u_e-u)^2 {\, \mathrm{d}x}\right)^{1/2},

and implemented in FEniCS by

.. code-block:: python

        error = (u - u_e)**2*dx
        E = sqrt(abs(assemble(error)))

Sometimes, for very small error values, the result of
``assemble(error)`` can be a (very small) negative number, so we have
used ``abs`` in the expression for ``E`` above to ensure a positive value
for the ``sqrt`` function.

We remark that ``u_e`` will, in the expression
above, be interpolated onto the function space ``V`` before ``assemble``
can perform the integration over the domain. This implies that the
exact solution used in the integral will vary linearly over the cells,
and not as a sine function, if ``V`` corresponds to linear Lagrange
elements.  This situation may yield a smaller error ``u - u_e`` than
what is actually true.  More accurate representation of the exact
solution is easily achieved by interpolating the formula onto a space
defined by higher-order elements, say of third degree:

.. code-block:: python

        Ve = FunctionSpace(mesh, 'Lagrange', degree=3)
        u_e_Ve = interpolate(u_e, Ve)
        error = (u - u_e_Ve)**2*dx
        E = sqrt(assemble(error))

To achieve complete mathematical control of which function space the
computations are carried out in, we can explicitly interpolate ``u`` to
the same space:

.. code-block:: python

        u_Ve = interpolate(u, Ve)
        error = (u_Ve - u_e_Ve)**2*dx

The square in the expression for ``error`` will be expanded and lead to
a lot of terms that almost cancel when the error is small, with the
potential of introducing significant rounding errors.  The function
``errornorm`` is available for avoiding this effect by first
interpolating ``u`` and ``u_exact`` to a space with higher-order elements,
then subtracting the degrees of freedom, and then performing the
integration of the error field. The usage is simple:

.. code-block:: python

        E = errornorm(u_exact, u, normtype='L2', degree=3)

It is illustrative to look at the short implementation of ``errornorm``:

.. code-block:: python

        def errornorm(u_exact, u, Ve):
            u_Ve = interpolate(u, Ve)
            u_e_Ve = interpolate(u_exact, Ve)
            e_Ve = Function(Ve)
            # Subtract degrees of freedom for the error field
            e_Ve.vector()[:] = u_e_Ve.vector().array() - \ 
                               u_Ve.vector().array()
            error = e_Ve**2*dx
            return sqrt(assemble(error))

The ``errornorm`` procedure turns out to be identical to computing
the expression ``(u_e - u)**2*dx`` directly in
the present test case.

Sometimes it is of interest to compute the error of the
gradient field: :math:`||\nabla (u-{u_{\small\mbox{e}}})||`
(often referred to as the :math:`H^1` seminorm of the error).
Given the error field ``e_Ve`` above, we simply write

.. code-block:: python

        H1seminorm = sqrt(assemble(inner(grad(e_Ve), grad(e_Ve))*dx))

All the various types of error computations here are placed in a
function ``compute_errors`` in ``p2D_vc.py``:
[**hpl 12**: Necessary to repeat code? New info is essentiall the return dict.]
[**hpl 13**: Anders, I (in 2010...) ran into problems with ``fenics.errornorm``, see comments in the code below, and made the version below. We should check out these problems again and adjust ``fenics.errornorm`` if necessary.]

.. code-block:: python

        def compute_errors(u, u_exact):
            """Compute various measures of the error u - u_exact, where
            u is a finite element Function and u_exact is an Expression."""
        
            # Compute error norm (for very small errors, the value can be
            # negative so we run abs(assemble(error)) to avoid failure in sqrt
        
            V = u.function_space()
        
            # Function - Expression
            error = (u - u_exact)**2*dx
            E1 = sqrt(abs(assemble(error)))
        
            # Explicit interpolation of u_e onto the same space as u:
            u_e = interpolate(u_exact, V)
            error = (u - u_e)**2*dx
            E2 = sqrt(abs(assemble(error)))
        
            # Explicit interpolation of u_exact to higher-order elements,
            # u will also be interpolated to the space Ve before integration
            Ve = FunctionSpace(V.mesh(), 'Lagrange', 5)  # mesh here: BUG, module mesh in fenics...make warning box
            u_e = interpolate(u_exact, Ve)
            error = (u - u_e)**2*dx
            E3 = sqrt(abs(assemble(error)))
        
            # fenics.errornorm interpolates u and u_e to a space with
            # given degree, and creates the error field by subtracting
            # the degrees of freedom, then the error field is integrated
            # TEMPORARY BUG - doesn't accept Expression for u_e
            #E4 = errornorm(u_e, u, normtype='l2', degree=3)
            # Manual implementation errornorm to get around the bug:
            def errornorm(u_exact, u, Ve):
                u_Ve = interpolate(u, Ve)
                u_e_Ve = interpolate(u_exact, Ve)
                e_Ve = Function(Ve)
                # Subtract degrees of freedom for the error field
                e_Ve.vector()[:] = u_e_Ve.vector().array() - u_Ve.vector().array()
                # More efficient computation (avoids the rhs array result above)
                #e_Ve.assign(u_e_Ve)                      # e_Ve = u_e_Ve
                #e_Ve.vector().axpy(-1.0, u_Ve.vector())  # e_Ve += -1.0*u_Ve
                error = e_Ve**2*dx(Ve.mesh())
                return sqrt(abs(assemble(error))), e_Ve
            E4, e_Ve = errornorm(u_exact, u, Ve)
        
            # Infinity norm based on nodal values
            u_e = interpolate(u_exact, V)
            E5 = abs(u_e.vector().array() - u.vector().array()).max()
        
            # H1 seminorm
            error = inner(grad(e_Ve), grad(e_Ve))*dx
            E6 = sqrt(abs(assemble(error)))
        
            # Collect error measures in a dictionary with self-explanatory keys
            errors = {'u - u_exact': E1,
                      'u - interpolate(u_exact,V)': E2,
                      'interpolate(u,Ve) - interpolate(u_exact,Ve)': E3,
                      'errornorm': E4,
                      'infinity norm (of dofs)': E5,
                      'grad(error) H1 seminorm': E6}
        
            return errors

Computing convergence rates empirically
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Calling the ``solver`` function for finer and finer meshes enables us to
study the convergence rate. Define the element size :math:`h=1/n`, where :math:`n`
is the number of cell divisions in :math:`x` and :math:`y` direction (``n=Nx=Ny`` in
the code). We perform experiments with :math:`h_0>h_1>h_2\cdots` and compute
the corresponding errors :math:`E_0, E_1, E_3` and so forth.  Assuming
:math:`E_i=Ch_i^r` for unknown constants :math:`C` and :math:`r`, we can compare two
consecutive experiments, :math:`E_i=Ch_i^r` and :math:`E_{i-1}=Ch_{i-1}^r`, and
solve for :math:`r`:

.. math::
        
        r = {\ln(E_i/E_{i-1})\over\ln (h_i/h_{i-1})}{\thinspace .}
        

The :math:`r` values should approach the expected convergence
rate ``degree+1`` as :math:`i` increases.

The procedure above can easily be turned into Python code. Here
we run through a different types of elements (P1, P2, P3, and P4),
perform experiments over a series of refined meshes, and for
each experiment report the six error types as returned by ``compute_errors``:

.. code-block:: python

        def convergence_rate(u_exact, f, u0, p, degrees,
                             n=[2**(k+3) for k in range(5)]):
            """
            Compute convergence rates for various error norms for a
            sequence of meshes with Nx=Ny=b and P1, P2, ...,
            Pdegrees elements. Return rates for two consecutive meshes:
            rates[degree][error_type] = r0, r1, r2, ...
            """
        
            h = {}  # Discretization parameter, h[degree][experiment]
            E = {}  # Error measure(s), E[degree][experiment][error_type]
            P_degrees = 1,2,3,4
            num_meshes = 5
        
            # Perform experiments with meshes and element types
            for degree in P_degrees:
                n = 4   # Coarsest mesh division
                h[degree] = []
                E[degree] = []
                for i in range(num_meshes):
                    n *= 2
                    h[degree].append(1.0/n)
                    u = solver(p, f, u0, n, n, degree,
                               linear_solver='direct')
                    errors = compute_errors(u, u_exact)
                    E[degree].append(errors)
                    print('2*(%dx%d) P%d mesh, %d unknowns, E1=%g' %
                          (n, n, degree, u.function_space().dim(),
                           errors['u - u_exact']))
            # Convergence rates
            from math import log as ln  # log is a fenics name too
            error_types = list(E[1][0].keys())
            rates = {}
            for degree in P_degrees:
                rates[degree] = {}
                for error_type in sorted(error_types):
                    rates[degree][error_type] = []
                    for i in range(num_meshes):
                        Ei   = E[degree][i][error_type]
                        Eim1 = E[degree][i-1][error_type]
                        r = ln(Ei/Eim1)/ln(h[degree][i]/h[degree][i-1])
                        rates[degree][error_type].append(round(r,2))
            return rates
        
        def convergence_rate_sin():
            """Compute convergence rates for u=sin(x)*sin(y) solution."""
            omega = 1.0
            u_exact = Expression('sin(omega*pi*x[0])*sin(omega*pi*x[1])',
                                 omega=omega)
            f = 2*omega**2*pi**2*u_exact
            u0 = Constant(0)
            p = Constant(1)
            # Note: P4 for n>=128 seems to break down
            rates = convergence_rates(u_exact, f, u0, p, degrees=4,
                                      n=[2**(k+3) for k in range(5)])
            # Print rates
            print('\n\n')
            for error_type in error_types:
                print(error_type)
                for degree in P_degrees:
                    print('P%d: %s' %
                          (degree, str(rates[degree][error_type])[1:-1]))

Note how we make a complete general function ``convergence_rate``, aimed at
any 2D Poisson problem in the class we now can solve, and then call
this general function in ``convergence_rate_sin`` for a special test
case.

Test problem          (3)
~~~~~~~~~~~~~~~~~~~~~~~~~

The section :ref:`tut:poisson:gradu` specifies a more complicated solution,

.. math::
        
        u(x,y) = \sin(\omega\pi x)\sin(\omega\pi y)
        

on the unit square.
This choice implies :math:`f(x,y)=2\omega^2\pi^2 u(x,y)`.
With :math:`\omega` restricted to an integer
it follows that :math:`u_0=0`.

We need to define the
appropriate boundary conditions, the exact solution, and the :math:`f` function
in the code:

.. code-block:: python

        def boundary(x, on_boundary):
            return on_boundary
        
        bc = DirichletBC(V, Constant(0.0), boundary)
        
        omega = 1.0
        u_e = Expression('sin(omega*pi*x[0])*sin(omega*pi*x[1])',
                         omega=omega)
        
        f = 2*pi**2*omega**2*u_e

Experiments
~~~~~~~~~~~

Calling ``convergence_rate_sin()`` gives some interesting results.
Using the error measure ``E5`` based on the infinity norm of the
difference of the degrees of freedom, we have

=======  ===========  ============  ============  ============  =============  
element  :math:`n=8`  :math:`n=16`  :math:`n=32`  :math:`n=64`  :math:`n=128`  
=======  ===========  ============  ============  ============  =============  
P1              1.99          1.97          1.99           2.0            2.0  
P2              3.99          3.96          3.99           4.0           3.99  
P3              3.96          3.89          3.96          3.99            4.0  
P4              3.75          4.99           5.0           5.0                 
=======  ===========  ============  ============  ============  =============  

The computations with P4 elements on a :math:`128\times 128` with a
direct solver (UMFPACK) on a small laptop broke down.
Otherwise we achieve expected results: the error goes like
:math:`h^{d+1}` for elements of degree :math:`d`. Also :math:`L^2` norms based
on the ``errornorm`` gives the expected :math:`h^{d+1}` rate for
:math:`u` and :math:`h^d` for :math:`\nabla u`.

However, using ``(u - u_exact)**2`` for the error computation, which implies
interpolating ``u_exact`` onto the same space as ``u``, results in :math:`h^4`
convergence for P2 elements.

=======  ===========  ============  ============  ============  =============  
element  :math:`n=8`  :math:`n=16`  :math:`n=32`  :math:`n=64`  :math:`n=128`  
=======  ===========  ============  ============  ============  =============  
P1              1.98          1.94          1.98           2.0            2.0  
P2              3.98          3.95          3.99          3.99           3.99  
P3              3.69          4.03          4.01          3.95           2.77  
=======  ===========  ============  ============  ============  =============  

This is an example where it is important to interpolate ``u_exact`` to a
higher-order space (polynomials of degree 3 are sufficient here) to
avoid computing a too optimistic convergence rate.

.. Problems with interpolate(u,Ve) - interpolate(u_exact,Ve) for

.. high degree and large meshes. Rounding errors? errornorm is the

.. remedy?

.. interpolate(u,Ve) - interpolate(u_exact,Ve)

.. P1: 1.98, 1.96, 1.99, 2.0, 2.0

.. P2: 3.01, 3.03, 3.01, 3.0, 3.02

.. P3: 2.7, 4.02, 4.0, 2.63, 0.17

.. P4: 1.54, 5.11, 0.91, 0.15, -0.01

Checking convergence rates is the next best method for verifying PDE codes
(the best being a numerical solution without approximation errors
as in the section :ref:`tut:poisson1:verify1` and many other places in this tutorial).

Multiple domain and boundaries
==============================

[**hpl 3**: Need a little intro.]

.. _tut:poisson1:DN:

Combining Dirichlet and Neumann conditions
------------------------------------------

Let us make a slight extension of our two-dimensional Poisson problem
from the section :ref:`tut:poisson1:bvp` and add a Neumann boundary
condition. The domain is still the unit square, but now we set the
Dirichlet condition :math:`u=u_0` at the left and right sides, :math:`x=0` and
:math:`x=1`, while the Neumann condition

.. math::
        
        -{\partial u\over\partial n}=g
        

is applied to the remaining
sides :math:`y=0` and :math:`y=1`.
The Neumann condition is also known as a *natural boundary condition*
(in contrast to an essential boundary condition).

.. index:: Neumann boundary conditions

PDE problem
~~~~~~~~~~~

Let :math:`\Gamma_D` and :math:`\Gamma_N` denote the parts of :math:`\partial\Omega`
where the Dirichlet and Neumann conditions apply, respectively.  The
complete boundary-value problem can be written as

.. _Eq:_auto15:

.. math::

    \tag{31}
    - \nabla^2 u = f \mbox{ in } \Omega,  
        
        

.. _Eq:_auto16:

.. math::

    \tag{32}
    u = u_0 \mbox{ on } \Gamma_D,       
        
        

.. _Eq:_auto17:

.. math::

    \tag{33}
    - {\partial u\over\partial n} = g \mbox{ on } \Gamma_N  {\thinspace .}
        
        

Again we choose :math:`u=1+x^2 + 2y^2` as the exact solution and adjust :math:`f`, :math:`g`, and
:math:`u_0` accordingly:

.. math::
        
        f &= -6,\\ 
        g &= \left\lbrace\begin{array}{ll}
        -4, & y=1\\ 
        0,  & y=0
        \end{array}\right.\\ 
        u_0 &= 1 + x^2 + 2y^2{\thinspace .}
        

For ease of programming we may introduce a :math:`g` function defined over the whole
of :math:`\Omega` such that :math:`g` takes on the right values at :math:`y=0` and
:math:`y=1`. One possible extension is

.. math::
        
        g(x,y) = -4y{\thinspace .}
        

Variational formulation          (2)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The first task is to derive the variational problem. This time we cannot
omit the boundary term arising from the integration by parts, because
:math:`v` is only zero on :math:`\Gamma_D`. We have

.. math::
        
         -\int_\Omega (\nabla^2 u)v {\, \mathrm{d}x}
        = \int_\Omega\nabla u\cdot\nabla v {\, \mathrm{d}x} - \int_{\partial\Omega}{\partial u\over
        \partial n}v {\, \mathrm{d}s},
        

and since :math:`v=0` on :math:`\Gamma_D`,

.. math::
        
        - \int_{\partial\Omega}{\partial u\over
        \partial n}v {\, \mathrm{d}s}
        =
        - \int_{\Gamma_N}{\partial u\over
        \partial n}v {\, \mathrm{d}s}
        = \int_{\Gamma_N}gv {\, \mathrm{d}s},
        

by applying the boundary condition on :math:`\Gamma_N`.
The resulting weak form reads

.. _Eq:tut:poisson:2D:DN:weak:

.. math::

    \tag{34}
    \int_{\Omega} \nabla u \cdot \nabla v {\, \mathrm{d}x} +
        \int_{\Gamma_N} gv {\, \mathrm{d}s}
        = \int_{\Omega} fv {\, \mathrm{d}x}{\thinspace .}
        
        

Expressing this equation
in the standard notation :math:`a(u,v)=L(v)` is straightforward with

.. _Eq:tut:poisson2:vard:a:

.. math::

    \tag{35}
    a(u, v) = \int_{\Omega} \nabla u \cdot \nabla v {\, \mathrm{d}x},
        
        

.. _Eq:tut:poisson2:vard:L:

.. math::

    \tag{36}
    L(v) = \int_{\Omega} fv {\, \mathrm{d}x} -
        \int_{\Gamma_N} gv {\, \mathrm{d}s}{\thinspace .}  
        

Implementation          (2)
~~~~~~~~~~~~~~~~~~~~~~~~~~~

How does the Neumann condition impact the implementation?
Let us go back to the very simplest file,
``p2D_plain.py``, from
the section :ref:`tut:poisson1:impl:code`,
we realize that the statements remain almost the same.
Only two adjustments are necessary:

  * The function describing the boundary where Dirichlet conditions
    apply must be modified.

  * The new boundary term must be added to the expression in ``L``.

The first adjustment can be coded as

.. code-block:: python

        def Dirichlet_boundary(x, on_boundary):
            if on_boundary:
                if x[0] == 0 or x[0] == 1:
                    return True
                else:
                    return False
            else:
                return False

A more compact implementation reads

.. code-block:: python

        def Dirichlet_boundary(x, on_boundary):
            return on_boundary and (x[0] == 0 or x[0] == 1)


.. admonition:: Never use ``==`` for comparing real numbers

   A list like ``x[0] == 1`` should never be used if ``x[0]`` is a real number,
   because rounding errors in ``x[0]`` may make the test fail even when it is
   mathematically correct. Consider
   
   .. code-block:: python
   
           >>> 0.1 + 0.2 == 0.3
           False
           >>> 0.1 + 0.2
           0.30000000000000004
   
   Comparison of real numbers need to use tolerances! The values of the
   tolerances depend on the size of the numbers involved in arithmetic
   operations:
   
   .. code-block:: python
   
           >>> abs(0.1+0.2 - 0.3)
           5.551115123125783e-17
           >>> abs(1.1+1.2 - 2.3)
           0.0
           >>> abs(10.1+10.2 - 20.3)
           3.552713678800501e-15
           >>> abs(100.1+100.2 - 200.3)
           0.0
           >>> abs(1000.1+1000.2 - 2000.3)
           2.2737367544323206e-13
           >>> abs(10000.1+10000.2 - 20000.3)
           3.637978807091713e-12
   
   For numbers around unity, tolerances as low as :math:`3\cdot 10^{-16}` can be used
   (in fact, this tolerance is known as the constant ``DOLFIN_EPS`` in FEniCS),
   otherwise an appropriate tolerance must be found.
   
   Testing for ``x[0] == 1`` should therefore be implemented as
   
   .. code-block:: python
   
           tol = 1E-14
           if abs(x[0] - 1) < tol:
               ...




Here is a new boundary function using tolerances in the test:

.. code-block:: python

        def Dirichlet_boundary(x, on_boundary):
            tol = 1E-14   # tolerance for coordinate comparisons
            return on_boundary and \ 
                   (abs(x[0]) < tol or abs(x[0] - 1) < tol)

The second adjustment of our program concerns the definition of ``L``,
where we have to add a boundary integral and a definition of the :math:`g`
function to be integrated:

.. code-block:: python

        g = Expression('-4*x[1]')
        L = f*v*dx - g*v*ds

The ``ds`` variable implies a boundary integral, while ``dx``
implies an integral over the domain :math:`\Omega`.
No more modifications are necessary.

.. _tut:poisson:multiple:Dirichlet:

Multiple Dirichlet conditions
-----------------------------

The PDE problem from the previous section applies a function :math:`u_0(x,y)`
for setting Dirichlet conditions at two parts of the boundary.
Having a single function to set multiple Dirichlet conditions is
seldom possible. The more general case is to have :math:`m` functions for
setting Dirichlet conditions on :math:`m` parts of the boundary.
The purpose of this section is to explain how such multiple conditions
are treated in FEniCS programs.

Let us return to the case from the section :ref:`tut:poisson1:DN` and define
two separate functions for the two Dirichlet conditions:

.. math::
        
            - \nabla^2 u &= -6 \mbox{ in } \Omega, \\ 
            u &= u_L \mbox{ on } \Gamma_0, \\ 
            u &= u_R \mbox{ on } \Gamma_1, \\ 
            - {\partial u\over\partial n} &= g \mbox{ on } \Gamma_N {\thinspace .}
        

Here, :math:`\Gamma_0` is the boundary :math:`x=0`, while :math:`\Gamma_1` corresponds
to the boundary :math:`x=1`.  We have that :math:`u_L = 1 + 2y^2`, :math:`u_R = 2 +
2y^2`, and :math:`g=-4y`.

Functions for marking Dirichlet boundaries
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For the left boundary :math:`\Gamma_0` we define the
usual triple of a function for the boundary value, a function for
defining the boundary of interest, and a ``DirichletBC`` object:

.. code-block:: python

        u_L = Expression('1 + 2*x[1]*x[1]')
        
        def left_boundary(x, on_boundary):
            tol = 1E-14   # tolerance for coordinate comparisons
            return on_boundary and abs(x[0]) < tol
        
        Gamma_0 = DirichletBC(V, u_L, left_boundary)

For the boundary :math:`x=1` we write a similar code snippet:

.. code-block:: python

        u_R = Expression('2 + 2*x[1]*x[1]')
        
        def right_boundary(x, on_boundary):
            tol = 1E-14   # tolerance for coordinate comparisons
            return on_boundary and abs(x[0] - 1) < tol
        
        Gamma_1 = DirichletBC(V, u_R, right_boundary)

The various essential conditions are then collected in a list
and used in the solution process:

.. code-block:: python

        bcs = [Gamma_0, Gamma_1]
        ...
        solve(a == L, u, bcs)
        # or
        problem = LinearVariationalProblem(a, L, u, bcs)
        solver  = LinearVariationalSolver(problem)
        solver.solve()

In other problems, where the :math:`u` values are constant at a part of the
boundary, we may use a simple ``Constant`` object instead of an
``Expression`` object.

Classes for marking Dirichlet boundaries
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Instead of using a function like ``left_boundary(x, on_boundary)`` to
mark a boundary, we can alternatively use a class, which allows
for more flexibility in more complicated problems. The class for marking
a boundary is derived from class ``SubDomain`` and has a method ``inside(self, x, on_boundary)`` for the code that returns whether the ``point`` is on the
boundary in question or not. Our previous ``left_boundary`` function
takes this form in its class version:

.. code-block:: python

        class LeftBoundary(SubDomain):
            def inside(self, x, on_boundary):
                tol = 1E-14   # tolerance for coordinate comparisons
                return on_boundary and abs(x[0]) < tol
        
        left_boundary = LeftBoundary()
        Gamma_0 = DirichletBC(V, u_L, left_boundary)

.. _tut:possion:2D:2mat:impl:

Working with subdomains
-----------------------

.. index:: heterogeneous media

.. index:: multi-material domain

Solving PDEs in domains made up of different materials is a frequently
encountered task. In FEniCS, these kind of problems are handled by
defining subdomains inside the domain. The subdomains may represent the
various materials. We can thereafter define material properties through
functions, known in FEniCS as *mesh functions*,
that are piecewise constant in each subdomain.
A simple example with
two materials (subdomains) in 2D will
demonstrate the basic steps in the process.

.. Later, a multi-material

.. problem in :math:`d` space dimensions is addressed.

.. _tut:possion:2D:2mat:fig1:

.. figure:: layered_medium_2.png
   :width: 400

   *Medium with discontinuous material properties*

Suppose we want to solve

.. _Eq:tut:poisson:2D:2mat:varcoeff2:

.. math::

    \tag{37}
    \nabla\cdot \left\lbrack k(x,y)\nabla u(x,y)\right\rbrack = 0,
        

in a domain :math:`\Omega` consisting of two subdomains where :math:`k` takes on
a different value in each subdomain.
For simplicity, yet without loss of generality, we choose for the current
implementation
the domain :math:`\Omega = [0,1]\times [0,1]` and divide it into two equal
subdomains,
as depicted in Figure :ref:`tut:possion:2D:2mat:fig1`,

.. math::
        
        \Omega_0 = [0, 1]\times [0,1/2],\quad
        \Omega_1 = [0, 1]\times (1/2,1]{\thinspace .}
        

We define :math:`k(x,y)=k_0` in :math:`\Omega_0` and :math:`k(x,y)=k_1` in :math:`\Omega_1`,
where :math:`k_0>0` and :math:`k_1>0` are given constants.

Physically, the present problem may correspond to heat conduction, where
the heat conduction in :math:`\Omega_1` is more efficient than
in :math:`\Omega_0`. An alternative interpretation is flow in porous media
with two geological layers, where the layers' ability to transport
the fluid differ.

Expression objects with if test
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The simplest way of implementing a variable :math:`k` is to define an
``Expression`` object where we return the appropriate :math:`k` value
depending on the position in space.  Since we need some testing on the
coordinates, the most straightforward approach is to define a subclass
of ``Expression``, where we can use a full Python method instead of just
a C++ string formula for specifying a function.  The method that
defines the function is called ``eval``:

.. code-block:: python

        class K(Expression):
            def set_k_values(self, k0, k1):
                self.k0, self.k1 = k0, k1
        
            def eval(self, value, x):
                """x: spatial point, value[0]: function value."""
        	tol = 1E-14  # Tolerance for coordinate comparisons
                if x[1] <= 0.5+tol:
        	    return self.k0
        	else:
        	    return self.k1
        
        # Initialize
        k = K()
        k.set_k_values(1, 0.01)

The ``eval`` method gives great flexibility in defining functions,
but a downside is that C++ calls up ``eval`` in Python for
each point ``x``, which is a slow process, and the number of calls
is proportional to the number of numerical
integration points in the mesh (about
the number of degrees of freedom).
Function expressions in terms of strings are compiled to efficient
C++ functions, being called from C++, so we should try to express functions
as string expressions if possible. (The ``eval`` method can also be
defined through C++ code, but this is much
more complicated and not covered here.)
The idea is to use inline if tests in C++:

.. code-block:: python

        tol = 1E-14
        k0 = 1.0
        k1 = 0.01
        k = Expression('x[1] <= 0.5+tol? k0 : k1',
                       tol=tol, k0=k0, k1=k1)

The method with if tests on the location is feasible when the
subdomains have very simple shapes. A completely general method,
utilizing *mesh functions*, is described next.

.. index:: boundary specification (class)

Mesh functions
~~~~~~~~~~~~~~

We now address how to specify the subdomains :math:`\Omega_0` and :math:`\Omega_1`
so that the method also works for subdomains of any shape. For this
purpose we need to use subclasses of class ``SubDomain``, not only plain
functions as we have used so far for specifying boundaries. Consider
the boundary function

.. code-block:: python

        def boundary(x, on_boundary):
            tol = 1E-14
            return on_boundary and abs(x[0]) < tol

for defining the boundary :math:`x=0`. Instead of using such a stand-alone
function, we can create an instance (or object)
of a subclass of ``SubDomain``,
which implements the ``inside`` method as an alternative to the
``boundary`` function:

.. code-block:: python

        class Boundary(SubDomain):
            def inside(self, x, on_boundary):
                tol = 1E-14
                return on_boundary and abs(x[0]) < tol
        
        boundary = Boundary()
        bc = DirichletBC(V, Constant(0), boundary)

A word about computer science terminology may be used here: The term
*instance* means a Python object of a particular type (such as
``SubDomain``, ``Function``, ``FunctionSpace``, etc.).  Many use *instance*
and *object* as interchangeable terms. In other computer programming
languages one may also use the term *variable* for the same thing.  We
mostly use the well-known term *object* in this text.

A subclass of ``SubDomain`` with an ``inside`` method offers functionality
for marking parts of the domain or the boundary. Now we need to define
one class for the subdomain :math:`\Omega_0` where :math:`y\leq 1/2` and another
for the subdomain :math:`\Omega_1` where :math:`y\geq 1/2`:

.. code-block:: python

        tol = 1E-14  # Tolerance for coordinate comparisons
        
        class Omega0(SubDomain):
            def inside(self, x, on_boundary):
                return x[1] <= 0.5+tol
        
        class Omega1(SubDomain):
            def inside(self, x, on_boundary):
                return x[1] >= 0.5-tol

Notice the use of ``<=`` and ``>=`` in both tests. For a cell to
belong to, e.g., :math:`\Omega_1`, the ``inside`` method must return
``True`` for all the vertices ``x`` of the cell. So to make the
cells at the internal boundary :math:`y=1/2` belong to :math:`\Omega_1`, we need
the test ``x[1] >= 0.5``. However,
because of potential rounding errors in the coordinates ``x[1]``, we
use a tolerance in the comparisons: ``x[1] >= 0.5-tol``.

The next task is to use a *mesh function* to mark all cells in
:math:`\Omega_0` with the subdomain number 0 and all cells in :math:`\Omega_1`
with the subdomain number 1.  Our convention is to number subdomains
as :math:`0,1,2,\ldots`.

A ``MeshFunction`` object is a discrete function that can be evaluated
at a set of so-called *mesh entities*. Examples of mesh entities are
cells, facets, and vertices. A ``MeshFunction`` over cells is suitable
to represent subdomains (materials), while a ``MeshFunction`` over
facets is used to represent pieces of external or internal boundaries.
Mesh functions over vertices can be used to describe continuous
fields.  The specialized classes ``CellFunction`` and ``FacetFunction``
are used to construct mesh functions of cells and facets,
respectively.

Since we need to define subdomains of :math:`\Omega` in the present example,
we must make use of a ``CellFunction``. The constructor
is fed with two arguments: 1) the type of value: ``'int'`` for integers,
``'uint'`` for positive (unsigned) integers, ``'double'`` for real
numbers, and ``'bool'`` for logical values; 2) a ``Mesh`` object.
Alternatively, the constructor can take just a filename and initialize
the ``CellFunction`` from data in a file.

We start with creating a ``CellFunction`` whose values are non-negative
integers (``'uint'``) for numbering the subdomains.
The appropriate code for two subdomains then reads

.. code-block:: python

        materials = CellFunction('size_t', mesh)
        # Mark subdomains with numbers 0 and 1
        subdomain0 = Omega0()
        subdomain0.mark(materials, 0)
        subdomain1 = Omega1()
        subdomain1.mark(materials, 1)
        
        # Alternative
        materials.set_all(0)
        subdomain1.mark(materials, 1)

Calling ``materials.array()`` returns a ``numpy`` array of the
subdomain values. That is, ``materials.array()[i]`` is
the subdomain value of cell number ``i``. This array is used to
look up the subdomain or material number of a specific element.

We need a function ``k`` that is constant in each subdomain :math:`\Omega_0`
and :math:`\Omega_1`. Since we want ``k`` to be a finite element function, it
is natural to choose a space of functions that is constant over each
element.  The family of discontinuous Galerkin methods, in FEniCS
denoted by ``'DG'``, is suitable for this purpose. Since we want
functions that are piecewise constant, the value of the degree
parameter is zero:

.. code-block:: python

        V0 = FunctionSpace(mesh, 'DG', 0)
        k  = Function(V0)

To fill ``k`` with the right values in each element, we loop over
all cells (i.e., indices in ``materials.array()``),
extract the corresponding subdomain number of a cell,
and assign the corresponding :math:`k` value to the ``k.vector()`` array:

.. code-block:: python

        k_values = [1.5, 50]  # values of k in the two subdomains
        for cell_no in range(len(materials.array())):
            material_no = materials.array()[cell_no]
            k.vector()[cell_no] = k_values[material_no]

Long loops in Python are known to be slow, so for large meshes
it is preferable to avoid such loops and instead use *vectorized code*.
Normally this implies that the loop must be replaced by
calls to functions from the ``numpy`` library that operate on complete
arrays (in efficient C code). The functionality we want in the present
case is to compute an array of the same size as
``materials.array()``, but where the value ``i`` of an entry
in ``materials.array()`` is replaced by ``k_values[i]``.
Such an operation is carried out by the ``numpy`` function ``choose``:

.. code-block:: python

        help = numpy.asarray(materials.array(), dtype=numpy.int32)
        k.vector()[:] = numpy.choose(help, k_values)

The ``help`` array is required since ``choose`` cannot work with
``materials.array()`` because this array has elements of
type ``uint32``. We must therefore transform this array to an array
``help`` with standard ``int32`` integers.

The next section exemplifies a complete solver with a piecewise
constant coefficient, like :math:`k`, defined through ``SubDomain`` objects,
combined with different types of boundary conditions.

.. _tut:poisson:multi:bc:

Multiple Neumann, Robin, and Dirichlet condition
------------------------------------------------

.. index:: Dirichlet boundary conditions

.. index:: Neumann boundary conditions

.. index:: Robin boundary conditions

.. index:: boundary conditions

Consider the model problem from the section :ref:`tut:poisson:multiple:Dirichlet` where we had both Dirichlet and
Neumann conditions.  The term ``v*g*ds`` in the expression for ``L``
implies a boundary integral over the complete boundary, or in FEniCS
terms, an integral over all exterior facets.  However, the
contributions from the parts of the boundary where we have Dirichlet
conditions are erased when the linear system is modified by the
Dirichlet conditions.  We would like, from an efficiency point of
view, to integrate ``v*g*ds`` only over the parts of the boundary where
we actually have Neumann conditions.  And more importantly, in other
problems one may have different Neumann conditions or other conditions
like the Robin type condition.  With the mesh function concept we can
mark different parts of the boundary and integrate over specific
parts.  The same concept can also be used to treat multiple Dirichlet
conditions.  The forthcoming text illustrates how this is done.

Three types of boundary conditions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We extend our repertoire of boundary conditions to three types:
Dirichlet, Neumann, and Robin.  Dirichlet conditions apply to some
parts :math:`\Gamma_{D,0}`, :math:`\Gamma_{D,1}`, :math:`...`, of the boundary:

.. math::
         u_{0,0}\hbox{ on }\Gamma_{D,0},\quad
        u_{0,1}\hbox{ on }\Gamma_{D,1}, \ldots

where :math:`u_{0,i}` are prescribed functions, :math:`i=0,1,\ldots`
On other parts, :math:`\Gamma_{N,0}`, :math:`\Gamma_{N,1}`, and so on, we have
Neumann conditions

.. math::
         -p{\partial u\over\partial n} = g_{0}\hbox{ on }\Gamma_{N,0},\quad
        -p{\partial u\over\partial n} = g_{1}\hbox{ on }\Gamma_{N,1},\quad \ldots
        

Finally, we have *Robin conditions*

.. _Eq:tut:poisson:multi:bc:Robin:

.. math::

    \tag{38}
    -p{\partial u\over\partial n} = r(u-s),
        
        

where :math:`r` and :math:`s` are specified functions.  The Robin condition is
most often used to model heat transfer to the surroundings and arise
naturally from Newton's cooling law. In that case, :math:`r` is a heat
transfer coefficient, and :math:`s` is the temperature of the
surroundings. Both can be space and time-dependent.
The Robin conditions apply
at some parts :math:`\Gamma_{R,0}`, :math:`\Gamma_{R,1}`, and so forth:

.. math::
         -p{\partial u\over\partial n} = r_0(u-s_0)\hbox{ on }\Gamma_{R,0},\quad
        -p{\partial u\over\partial n} = r_1(u-s_1)\hbox{ on }\Gamma_{R,1},\quad \ldots
        

.. index:: Robin condition

A general model problem
~~~~~~~~~~~~~~~~~~~~~~~

With the notation above,
the model problem to be solved with multiple Dirichlet, Neumann, and
Robin conditions can formally be defined as

.. _Eq:tut:poisson:2D:DN3:

.. math::

    \tag{39}
    -\nabla\cdot(p\nabla u) = -f, \mbox{ in } \Omega, 
        

.. _Eq:tut:poisson:2D:DN3:bcD:

.. math::

    \tag{40}
    u = u_{0,i} \mbox{ on } \Gamma_{D,i},\quad i=0,1,\ldots
        
        

.. _Eq:tut:poisson:2D:DN3:bcN:

.. math::

    \tag{41}
    -p{\partial u\over\partial n} = g_i \mbox{ on } \Gamma_{N,i},\quad
        i=0,1,\ldots
        
        

.. _Eq:tut:poisson:2D:DN3:bcR:

.. math::

    \tag{42}
    -p{\partial u\over\partial n} = r_i(u-s_i) \mbox{ on } \Gamma_{R,i},\quad
        i=0,1,\ldots
        
        

Variational formulation          (3)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Integration by parts of :math:`-\int_\Omega v\nabla\cdot(p\nabla u) {\, \mathrm{d}x}` becomes
as usual

.. math::
        
         -\int_\Omega v\nabla\cdot(p\nabla u) {\, \mathrm{d}x}
        = \int_\Omega p\nabla u\cdot \nabla v {\, \mathrm{d}x} -
        \int_{\partial\Omega}p\frac{\partial u}{\partial n}v {\, \mathrm{d}s}{\thinspace .}
        

The boundary integral does not apply to the parts of
the boundary where we have Dirichlet conditions (:math:`\Gamma_{D,i}`).
Moreover, on the remaining parts, we must split the boundary integral
into the parts where we have Neumann and Robin conditions such that we
insert the right conditions as integrands.
Specifically, we have

.. math::
        
        -\int_{\partial\Omega}p\frac{\partial u}{\partial n}v {\, \mathrm{d}s}
        &=
        -\sum_i\int_{\Gamma_{N,i}}p\frac{\partial u}{\partial n} {\, \mathrm{d}s}
        -\sum_i\int_{\Gamma_{R,i}}p\frac{\partial u}{\partial n} {\, \mathrm{d}s}\\ 
        &=
        \sum_i\int_{\Gamma_{N,i}}g_i {\, \mathrm{d}s} +
        \sum_i\int_{\Gamma_{R,i}}r_i(u-s_i) {\, \mathrm{d}s}{\thinspace .}
        

The variational formulation then becomes

.. _Eq:tut:poisson:multi:bc:varform:

.. math::

    \tag{43}
    F = \int_{\Omega} p\nabla u\cdot \nabla v {\, \mathrm{d}x} +
        \sum_i\int_{\Gamma_{N,i}} g_iv {\, \mathrm{d}s} +
        \sum_i\int_{\Gamma_{R,i}}r_i(u-s_i)v {\, \mathrm{d}s}
        - \int_{\Omega} fv {\, \mathrm{d}x} =0{\thinspace .}
        
        

We have been used to writing
this variational formulation in the standard notation
:math:`a(u,v)=L(v)`, which requires that we identify all integrals with
*both* :math:`u` and :math:`v`, and collect these in :math:`a(u,v)`, while the remaining
integrals with :math:`v` and not :math:`u` go into :math:`L(v)`.  The integral from the
Robin condition must of this reason be split in two parts:

.. math::
        
        \int_{\Gamma_{R,i}}r_i(u-s_i)v {\, \mathrm{d}s}
        = \int_{\Gamma_{R,i}} r_iuv {\, \mathrm{d}s} - \int_{\Gamma_{R,i}}r_is_iv {\, \mathrm{d}s}{\thinspace .}
        

We then have

.. _Eq:tut:poisson:2D:DN3:var:a:

.. math::

    \tag{44}
    a(u, v) = \int_{\Omega} p\nabla u\cdot \nabla v {\, \mathrm{d}x}
        + \sum_i\int_{\Gamma_{R,i}}r_iuv {\, \mathrm{d}s},
        
        

.. _Eq:tut:poisson:2D:DN3:var:L:

.. math::

    \tag{45}
    L(v) = \int_{\Omega} fv {\, \mathrm{d}x} -
        \sum_i\int_{\Gamma_{N,i}} g_i v {\, \mathrm{d}s} + \sum_i\int_{\Gamma_{R,i}}r_is_iv {\, \mathrm{d}s}{\thinspace .}
        
        

Implementation of boundary conditions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Looking at our previous ``solver`` functions for solving the 2D Poisson equation,
the following new aspects must be taken care of:

 1. definition of a mesh function over the boundary,

 2. marking each side as a subdomain, using the mesh function,

 3. splitting a boundary integral into parts.

A general approach to the first task is to mark each of the desired
boundaries with markers 0, 1, 2, and so forth. Here we aim at
the four sides of the unit square, marked with
0 (:math:`x=0`), 1 (:math:`x=1`), 2 (:math:`y=0`), and 3 (:math:`y=1`).
The marking of boundaries makes use of a mesh function object, but contrary to
the section :ref:`tut:possion:2D:2mat:impl`, this is not a function over
cells, but a function over cell facets. We apply the ``FacetFunction``
for this purpose:

.. code-block:: python

        boundary_parts = FacetFunction('size_t', mesh)

As in the section :ref:`tut:possion:2D:2mat:impl` we use a subclass of
``SubDomain`` to identify the various parts of the mesh
function. Problems with domains of more complicated geometries may set
the mesh function for marking boundaries as part of the mesh
generation.  In our case, the :math:`x=0` boundary can be marked by

.. code-block:: python

        class BoundaryX0(SubDomain):
            def inside(self, x, on_boundary):
                return on_boundary and abs(x[0]) < tol
        
        bx0 = BoundaryX0()
        bx0.mark(boundary_parts, 0)

Similarly, we make the classes ``BoundaryX1`` for the :math:`x=1` boundary,
``BoundaryY0`` for the :math:`y=0` boundary, and ``BoundaryY1`` for the :math:`y=1`
boundary, and mark these as subdomains 1, 2, and 3, respectively.

For generality of the implementation, we let the user specify
what kind of boundary condition that applies to each of the four
boundaries. We set up a Python dictionary for this purpose, with
the key as subdomain number and the value as a dictionary specifying
the kind of condition as key and a function as its value.
For example,

.. code-block:: text

        boundary_conditions = {
          0: {'Dirichlet': u0},
          1: {'Robin': (r, s)},
          2: {'Neumann: g}},
          3: {'Neumann', 0}}

specifies

 * a Dirichlet condition, with values implemented by an ``Expression``
   or ``Constant`` object
   ``u0``, on subdomain 0, i.e., the :math:`x=1` boundary;

 * a Robin condition :ref:`(38) <Eq:tut:poisson:multi:bc:Robin>`
   on subdomain 1, :math:`x=1`, with ``Expression`` or ``Constant`` objects
   ``r`` and ``s`` specifying :math:`r` and :math:`s`;

 * a Neumann condition :math:`\partial u/\partial n=g` on subdomain 2, :math:`y=0`,
   where an ``Expression`` or ``Constant`` object ``g`` implements the value :math:`g`;

 * a homogeneous Neumann condition :math:`\partial u/\partial n=0` on
   subdomain 3, :math:`y=1`.

As explained in the section :ref:`tut:poisson:multiple:Dirichlet`,
multiple Dirichlet conditions must be collected in a list of
``DirichletBC`` objects. Based on the ``boundary_conditions`` data
structure above, we can construct this list by the following snippet:

.. code-block:: python

        bcs = []  # List of Dirichlet conditions
        for n in boundary_conditions:
            if 'Dirichlet' in boundary_conditions[n]:
                bcs.append(
                    DirichletBC(V, boundary_conditions[n]['Dirichlet'],
                                boundary_parts, n))

The new aspect of the variational problem is the two distinct
boundary integrals over :math:`\Gamma_{N,i}` and :math:`\Gamma_{R,i}`.
Having a mesh function over exterior cell facets (our
``boundary_parts`` object), where subdomains (boundary parts) are
numbered as :math:`0,1,2,\ldots`, the special symbol ``ds(0)``
implies integration over subdomain (part) 0, ``ds(1)`` denotes
integration over subdomain (part) 1, and so on.
The idea of multiple ``ds``-type objects generalizes to volume
integrals too: ``dx(0)``, ``dx(1)``, etc., are used to
integrate over subdomain 0, 1, etc.,  inside :math:`\Omega`.

Before we have ``ds(n)`` for integers ``n`` defined, we must do

.. code-block:: python

        ds = Measure('ds', domain=mesh, subdomain_data=boundaries_parts)

Similarly, if we want integration of different parts of the domain,
we redefine ``dx`` as

.. code-block:: python

        dx = Measure('dx', domain=mesh, subdomain_data=domains)

where ``domains`` is a ``CellFunction`` defining subdomains in :math:`\Omega`.

Suppose we have a Robin condition with values ``r`` and ``s`` on subdomain
``R``, a Neumann condition with value ``g`` on subdomain ``N``, the
variational form can be written

.. code-block:: python

        a = inner(nabla_grad(u), nabla_grad(v))*dx + r*u*v*ds(R)
        L = f*v*dx - g*v*ds(N) + r*s*v*ds(R)

In our case things get a bit more complicated since the
information about integrals in Neumann and Robin conditions
are in the ``boundary_conditions`` data structure. We can collect
all Neumann conditions by the code

.. code-block:: python

        u = TrialFunction(V)
        v = TestFunction(V)
        Neumann_integrals = []
        for n in boundary_conditions:
            if 'Neumann' in boundary_conditions[n]:
                if boundary_conditions[n]['Neumann'] != 0:
                    g = boundary_conditions[n]['Neumann']
                    Neumann_integrals.append(g*v*ds(n))

Applying ``sum(Nemann_integrals)`` will apply the ``+`` operator to
the variational forms in the ``Numeann_integrals`` list and result
in the integrals we need for the right-hand side ``L`` of the
variational form.

The integrals in the Robin condition can similarly be collected
in lists:

.. code-block:: python

        Robin_a_integrals = []
        Robin_L_integrals = []
        for n in boundary_conditions:
            if 'Robin' in boundary_conditions[n]:
                r, s = boundary_conditions[n]['Robin']
                Robin_a_integrals.append(r*u*v*ds(n))
                Robin_L_integrals.append(r*s*v*ds(n))

We are now in a position to define the ``a`` and ``L`` expressions
in the variational formulation:

.. code-block:: python

        a = inner(p*nabla_grad(u), nabla_grad(v))*dx + \ 
            sum(Robin_a_integrals)
        L = f*v*dx - sum(Neumann_integrals) + sum(Robin_L_integrals)

Simplified handling of the variational formulation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We carefully ordered the terms in the variational formulation above
into the :math:`a` and :math:`L` parts. This requires a splitting of the Robin
condition and makes the ``a`` and ``L`` expressions less readable (still we
think understanding this splitting is key for any finite element programmer!).
Fortunately, UFL allow us to specify the complete variational form
:ref:`(43) <Eq:tut:poisson:multi:bc:varform>` as *one expression* and offer tools to
extract what goes into the bilinear form :math:`a(u,v)` and the linear form
:math:`L(v)`:

.. code-block:: python

        F = inner(p*nabla_grad(u), nabla_grad(v))*dx + \ 
            sum(Robin_integrals) - f*v*dx + sum(Neumann_integrals)
        a, L = lhs(F), rhs(F)

This time we can more naturally define the integrals from the
Robin condition as ``r*(u-s)*v*ds(n)``:

.. code-block:: python

        Robin_integrals = []
        for n in boundary_conditions:
            if 'Robin' in boundary_conditions[n]:
                r, s = boundary_conditions[n]['Robin']
                Robin_integrals.append(r*(u-s)*v*ds(n))

The complete code is in the ``solver_bc`` function in the
``p2D_vc.py`` file.

Test problem          (4)
~~~~~~~~~~~~~~~~~~~~~~~~~

Let us continue to use :math:`{u_{\small\mbox{e}}}=1+x^2+2y^2` as the exact solution, and
set :math:`p=1` and :math:`f=-6` in the PDE.  Our domain is the unit square, and
we assign Dirichlet conditions at :math:`x=0` and :math:`x=1`, a Neumann condition
at :math:`y=1`, and a Robin condition at :math:`y=0`. With the given :math:`{u_{\small\mbox{e}}}`, we
realize that the Neumann condition is :math:`-4y` (which means :math:`-4` at
:math:`y=1`), while the Robin
condition can be selected in many ways. Since :math:`\partial u/\partial
n=-\partial u/\partial y=0` at :math:`y=0`, we can select :math:`s=u` and have :math:`r`
arbitrary in the Robin condition.

The boundary parts are :math:`\Gamma_{D,0}`: :math:`x=0`, :math:`\Gamma_{D,1}`: :math:`x=1`,
:math:`\Gamma_{R,0}`: :math:`y=0`, and :math:`\Gamma_{N,0}`: :math:`y=1`.

When implementing this test problem (and especially other test problems
with more complicated expressions), it is advantageous to use
symbolic computing. Below we define :math:`{u_{\small\mbox{e}}}` as a ``sympy`` expression
and derive other functions from their mathematical definitions.
Then we turn these expressions into C/C++ code, which can be
fed into ``Expression`` objects.

.. code-block:: python

        def application_bc_test():
            # Define manufactured solution in sympy and derive f, g, etc.
            import sympy as sym
            x, y = sym.symbols('x[0] x[1]')  # UFL needs x[0] for x etc.
            u = 1 + x**2 + 2*y**2
            f = -sym.diff(u, x, 2) - sym.diff(u, y, 2)  # -Laplace(u)
            f = sym.simplify(f)
            u_00 = u.subs(x, 0)  # x=0 boundary
            u_01 = u.subs(x, 1)  # x=1 boundary
            g = -sym.diff(u, y).subs(y, 1)  # x=1 boundary, du/dn=-du/dy
            r = 1000 # any function can go here
            s = u
        
            # Turn to C/C++ code for UFL expressions
            f = sym.printing.ccode(f)
            u_00 = sym.printing.ccode(u_00)
            u_01 = sym.printing.ccode(u_01)
            g = sym.printing.ccode(g)
            r = sym.printing.ccode(r)
            s = sym.printing.ccode(s)
            print('Test problem (C/C++):\nu = %s\nf = %s' % (u, f))
            print('u_00: %s\nu_01: %s\ng = %s\nr = %s\ns = %s' %
                  (u_00, u_01, g, r, s))
        
            # Turn into FEniCS objects
            u_00 = Expression(u_00)
            u_01 = Expression(u_01)
            f = Expression(f)
            g = Expression(g)
            r = Expression(r)
            s = Expression(s)
            u_exact = Expression(sym.printing.ccode(u))
        
            boundary_conditions = {
                0: {'Dirichlet': u_00},   # x=0
                1: {'Dirichlet': u_01},   # x=1
                2: {'Robin': (r, s)},     # y=0
                3: {'Neumann': g}}        # y=1
        
            p = Constant(1)
            Nx = Ny = 2
            u, p = solver_bc(
                p, f, boundary_conditions, Nx, Ny, degree=1,
                linear_solver='direct',
                debug=2*Nx*Ny < 50,  # for small problems only
                )
        
            # Compute max error in infinity norm
            u_e = interpolate(u_exact, u.function_space())
            import numpy as np
            max_error = np.abs(u_e.vector().array() -
                               u.vector().array()).max()
            print('Max error:', max_error)
        
            # Print numerical and exact solution at the vertices
            if u.function_space().dim() < 50:  # (small problems only)
                u_e_at_vertices = u_e.compute_vertex_values()
                u_at_vertices = u.compute_vertex_values()
                coor = u.function_space().mesh().coordinates()
                for i, x in enumerate(coor):
                    print('vertex %2d (%9g,%9g): error=%g %g vs %g'
                          % (i, x[0], x[1],
                             u_e_at_vertices[i] - u_at_vertices[i],
                             u_e_at_vertices[i], u_at_vertices[i]))

This simple test problem is turned into a real unit test for different
function spaces in the function ``test_solver_bc``.

Debugging the setting of boundary conditions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

It is easy to make mistakes when implementing a problem with many
different types of boundary conditions, as in the present case. Some
helpful debugging output is to run through all vertex coordinates and
check if the ``SubDomain.inside`` method marks the vertex as on the
boundary. Another useful printout is to list which degrees of freedom
that are subject to Dirichlet conditions, and for first-order Lagrange
elements, add the corresponding vertex coordinate to the output.

.. code-block:: python

        if debug:
            # Print the vertices that are on the boundaries
            coor = mesh.coordinates()
            for x in coor:
                if bx0.inside(x, True): print('%s is on x=0' % x)
                if bx1.inside(x, True): print('%s is on x=1' % x)
                if by0.inside(x, True): print('%s is on y=0' % x)
                if by1.inside(x, True): print('%s is on y=1' % x)
            # Print the Dirichlet conditions
            print('No of Dirichlet conditions:', len(bcs))
            d2v = dof_to_vertex_map(V)
            for bc in bcs:
                bc_dict = bc.get_boundary_values()
                for dof in bc_dict:
                    print('dof %2d: u=%g' % (dof, bc_dict[dof]))
                    if V.ufl_element().degree() == 1:
                        print('   at point %s' %
                              (str(tuple(coor[d2v[dof]].tolist()))))

In addition, it is helpful to print the exact and the numerical solution
at all the vertices as shown in the section :ref:`tut:poisson1:verify1`.

Implementation of multiple subdomains
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The section :ref:`tut:possion:2D:2mat:impl` explains how to deal with
multiple subdomains of :math:`\Omega` and a piecewise constant coefficient
function :math:`p` that takes on different constant values in the different
subdomains. We can easily add this type of :math:`p` coefficient to the
``solver_bc`` function. The signature of the function is

.. code-block:: python

        def solver_bc(
            p, f,                   # Coefficients in the PDE
            boundary_conditions,    # Dict of boundary conditions
            Nx, Ny,                 # Cell division of the domain
            degree=1,               # Polynomial degree
            subdomains=[],          # List of SubDomain objects in domain
            linear_solver='Krylov', # Alt: 'direct'
            abs_tol=1E-5,           # Absolute tolerance in Krylov solver
            rel_tol=1E-3,           # Relative tolerance in Krylov solver
            max_iter=1000,          # Max no of iterations in Krylov solver
            log_level=PROGRESS,     # Amount of solver output
            dump_parameters=False,  # Write out parameter database?
            debug=False,
            ):
        ...
            return u, p   # p may be modified

If ``subdomain`` is an empty list, we assume there are no subdomains, and
:math:`p` is an ``Expression`` or ``Constant`` object specifying a formula for
:math:`p`. If not, ``subdomain`` is a list of ``SubDomain`` objects, defining
different parts of the domain. The first element is a dummy object,
defining "the rest" of the domain. The next elements define specific
geometries in the ``inside`` methods. We start by marking all elements
with subdomain number 0, this will then be "the rest" after marking
subdomains 1, 2, and so on. The next step is to define ``p`` as a
piecewise constant function over cells and fill it with values.
We assume that the user-argument ``p`` is an array (or list) holding
the values of :math:`p` in the different parts corresponding to ``subdomains``.
The returned ``p`` is needed for flux computations. If there are no
subdomains, the returned ``p`` is just the original ``p`` argument.

The appropriate code for computing ``p`` becomes

.. code-block:: python

        import numpy as np
        if subdomains:
            # subdomains is list of SubDomain objects,
            # p is array of corresponding constant values of p
            # in each subdomain
            materials = CellFunction('size_t', mesh)
            materials.set_all(0)  # "the rest"
            for m, subdomain in enumerate(subdomains[1:], 1):
                subdomain.mark(materials, m)
        
            p_values = p
            V0 = FunctionSpace(mesh, 'DG', 0)
            p  = Function(V0)
            help = np.asarray(materials.array(), dtype=np.int32)
            p.vector()[:] = np.choose(help, p_values)

We define :math:`p(x,y)=p_0` in :math:`\Omega_0` and :math:`k(x,y)=p_1` in :math:`\Omega_1`,
where :math:`p_0>0` and :math:`p_1>0` are given constants.
As boundary conditions, we choose :math:`u=0` at :math:`y=0`, :math:`u=1` at :math:`y=1`,
and :math:`\partial u/\partial n=0` at :math:`x=0` and :math:`x=1`.
One can show that the exact solution is now given by

.. _Eq:_auto18:

.. math::

    \tag{46}
    u(x, y) = \left\lbrace\begin{array}{ll}
        {2yp_1\over p_0+p_1}, & y \leq 1/2\\ 
        {(2y-1)p_0 + p_1\over p_0+p_1}, & y \geq 1/2
        \end{array}\right.
        
        

As long as the element boundaries coincide with the internal boundary
:math:`y=1/2`, this piecewise linear solution should be exactly recovered
by Lagrange elements of any degree. We can use this property to verify
the implementation and make a unit test for a series of function
spaces:

.. code-block:: python

        def test_solvers_bc_2mat():
            tol = 2E-13  # Tolerance for comparisons
        
            class Omega0(SubDomain):
                def inside(self, x, on_boundary):
                    return x[1] <= 0.5+tol
        
            class Omega1(SubDomain):
                def inside(self, x, on_boundary):
                    return x[1] >= 0.5-tol
        
            subdomains = [Omega0(), Omega1()]
            p_values = [2.0, 13.0]
            boundary_conditions = {
                0: {'Neumann': 0},
                1: {'Neumann': 0},
                2: {'Dirichlet': Constant(0)}, # y=0
                3: {'Dirichlet': Constant(1)}, # y=1
                }
        
            f = Constant(0)
            u_exact = Expression(
                'x[1] <= 0.5? 2*x[1]*p_1/(p_0+p_1) : '
                '((2*x[1]-1)*p_0 + p_1)/(p_0+p_1)',
                p_0=p_values[0], p_1=p_values[1])
        
            for Nx, Ny in [(2,2), (2,4), (8,4)]:
                for degree in 1, 2, 3:
                    u, p = solver_bc(
                        p_values, f, boundary_conditions, Nx, Ny, degree,
                        linear_solver='direct', subdomains=subdomains,
                        debug=False)
        
                    # Compute max error in infinity norm
                    u_e = interpolate(u_exact, u.function_space())
                    import numpy as np
                    max_error = np.abs(u_e.vector().array() -
                                   u.vector().array()).max()
                    assert max_error < tol, 'max error: %g' % max_error

Refactoring of a solver function into solver and problem classes
----------------------------------------------------------------

A FEniCS solver for a PDE can be implemented in a general way, but
the problem-dependent data, like boundary conditions, must be specified
in each case by the user. The implementation in the previous section
required the user to supply a ``boundary_conditions`` dictionary with
specifications of the boundary condition on each of the four sides of
the unit square. If we, e.g., want two Dirichlet conditions at one
side, as our mathematical formulation of the problem in the previous
section in fact supports, this is not possible without extending
the ``solver_bc`` function.

A different software design is to introduce a problem class and
methods, supplied by the user from case to case, where boundary
conditions and other input data are defined. Such a design is used in
a lot of more advanced FEniCS application codes, and it is time to
exemplify it here.  As a counterpart to the solver function, we
introduce a solver class, but all the arguments for various input data
are instead method calls to an instance of a *problem class*. This
puts a somewhat greater burden on the programmer, but it allows for
more flexibility, and the code for, e.g., boundary conditions can be
more tailored to the problem at hand than the code we introduced in
the ``solver_bc`` function in the previous section.

The solver class will need problem information and for this purpose
call up the methods in a problem class. For example, the solver
gets the :math:`f` and :math:`p` functions in the PDE problem by calling
``problem.f_rhs()`` and ``problem.p_coeff()``. The mesh object and the
polynomial degree of the elements are supposed to be returned from
``problem.mesh_degree()``. Furthermore, the problem class defines the
boundary conditions in the problem as lists of minimal information
from which the solver can build proper data structures.

The solver class is a wrapping of the previous ``solver_bc`` and ``flux``
functions as methods in a class, but some of the code for handling
boundary conditions in ``solver_bc`` is now delegated to the user in
the problem class.

.. code-block:: python

        from fenics import *
        import numpy as np
        
        class Solver(object):
            def __init__(self, problem, debug=False):
                self.mesh, degree = problem.mesh_degree()
                self.V = V = FunctionSpace(self.mesh, 'Lagrange', degree)
                Dirichlet_cond = problem.Dirichlet_conditions()
                if isinstance(Dirichlet_cond, (Expression)):
                    # Just one Expression for Dirichlet conditions on
                    # the entire boundary
                    self.bcs = [DirichletBC(
                        V, Dirichlet_cond,
                        lambda x, on_boundary: on_boundary)]
                else:
                    # Boundary SubDomain markers
                    self.bcs = [
                        DirichletBC(V, value, boundaries, index)
                        for value, boundaries, index
                        in Dirichlet_cond]
        
                if debug:
                    # Print the Dirichlet conditions
                    print('No of Dirichlet conditions:', len(self.bcs))
                    coor = self.mesh.coordinates()
                    d2v = dof_to_vertex_map(V)
                    for bc in self.bcs:
                        bc_dict = bc.get_boundary_values()
                        for dof in bc_dict:
                            print('dof %2d: u=%g' % (dof, bc_dict[dof]))
                            if V.ufl_element().degree() == 1:
                                print('   at point %s' %
                                      (str(tuple(coor[d2v[dof]].tolist()))))
        
                u = TrialFunction(V)
                v = TestFunction(V)
                p = problem.p_coeff()
                self.p = p  # store for flux computations
                f = problem.f_rhs()
                F = inner(p*nabla_grad(u), nabla_grad(v))*dx
                F -= f*v*dx
                F -= sum([g*v*ds_
                          for g, ds_ in problem.Neumann_conditions()])
                F += sum([r*(u-s)*ds_
                          for r, s, ds_ in problem.Robin_conditions()])
                self.a, self.L = lhs(F), rhs(F)
        
                if debug and V.dim() < 50:
                    A = assemble(self.a)
                    print('A:\n', A.array())
                    b = assemble(self.L)
                    print('b:\n', b.array())
        
            def solve(self, linear_solver='direct'):
                # Compute solution
                self.u = Function(self.V)
        
                if linear_solver == 'Krylov':
                    solver_parameters = {'linear_solver': 'gmres',
                                         'preconditioner': 'ilu'}
                else:
                    solver_parameters = {'linear_solver': 'lu'}
        
                solve(self.a == self.L, self.u, self.bcs,
                      solver_parameters=solver_parameters)
                return self.u
        
            def flux(self):
                """Compute and return flux -p*grad(u)."""
                mesh = self.u.function_space().mesh()
                degree = self.u.ufl_element().degree()
                V_g = VectorFunctionSpace(mesh, 'Lagrange', degree)
                self.flux_u = project(-self.p*grad(self.u), V_g)
                self.flux_u.rename('flux(u)', 'continuous flux field')
                return self.flux_u

Note that this is a general Poisson problem solver that works in any number
of space dimensions and with any mesh and composition of boundary conditions.


.. admonition:: Tip: Be careful with the ``mesh`` variable

   In classes, one often stores the mesh in ``self.mesh``. When you need
   the mesh, it is easy to write just ``mesh``, but this gives rise to
   peculiar error messages, since ``mesh`` is a module imported
   in ``from fenics import *`` and already available as a name in the file.
   When encountering strange error messages in statements containing a
   variable ``mesh``, make sure you use ``self.mesh``.




Below is the specific problem class for solving a scaled 2D Poisson
problem.  We have a two-material domain where a rectangle
:math:`[0.3,0.7]\times [0.3,0.7]` is embedded in the unit square and where
:math:`p` has a constant value inside the rectangle and another value
outside. On :math:`x=0` and :math:`x=1` we have homogeneous Neumann conditions,
and on :math:`y=0` and :math:`y=1` we have the Dirichlet conditions :math:`u=1` and
:math:`u=0`, respectively.

.. code-block:: python

        class Problem1(Problem):
            """
            -div(p*grad(u)=f on the unit square.
            General Dirichlet, Neumann, or Robin condition along each
            side. Can have multiple subdomains with p constant in
            each subdomain.
            """
            def __init__(self, Nx, Ny):
                """Initialize mesh, boundary parts, and p."""
                self.mesh = UnitSquareMesh(Nx, Ny)
        
                tol = 1E-14
        
                class BoundaryX0(SubDomain):
                    def inside(self, x, on_boundary):
                        return on_boundary and abs(x[0]) < tol
        
                class BoundaryX1(SubDomain):
                    def inside(self, x, on_boundary):
                        return on_boundary and abs(x[0] - 1) < tol
        
                class BoundaryY0(SubDomain):
                    def inside(self, x, on_boundary):
                        return on_boundary and abs(x[1]) < tol
        
                class BoundaryY1(SubDomain):
                    def inside(self, x, on_boundary):
                        return on_boundary and abs(x[1] - 1) < tol
        
                # Mark boundaries
                #self.boundary_parts = FacetFunction('size_t', mesh)
                self.boundary_parts = FacetFunction('uint', self.mesh)
                self.boundary_parts.set_all(9999)
                self.bx0 = BoundaryX0()
                self.bx1 = BoundaryX1()
                self.by0 = BoundaryY0()
                self.by1 = BoundaryY1()
                self.bx0.mark(self.boundary_parts, 0)
                self.bx1.mark(self.boundary_parts, 1)
                self.by0.mark(self.boundary_parts, 2)
                self.by1.mark(self.boundary_parts, 3)
                self.ds =  Measure(
                    'ds', domain=self.mesh,
                    subdomain_data=self.boundary_parts)
        
                # The domain is the unit square with an embedded rectangle
                class Rectangle(SubDomain):
                    def inside(self, x, on_boundary):
                        return 0.3 <= x[0] <= 0.7 and 0.3 <= x[1] <= 0.7
        
                self.materials = CellFunction('size_t', self.mesh)
                self.materials.set_all(0)  # "the rest"
                subdomain = Rectangle()
                subdomain.mark(self.materials, 1)
                self.V0 = FunctionSpace(self.mesh, 'DG', 0)
                self.p = Function(self.V0)
                help = np.asarray(self.materials.array(), dtype=np.int32)
                p_values = [1, 1E-3]
                self.p.vector()[:] = np.choose(help, p_values)
        
            def mesh_degree(self):
                return self.mesh, 2
        
            def p_coeff(self):
                return self.p
        
            def f_rhs(self):
                return Constant(0)
        
            def Dirichlet_conditions(self):
                """Return list of (value,boundary) pairs."""
                return [(1.0, self.boundary_parts, 2),
                        (0.0, self.boundary_parts, 3)]
        
            def Neumann_conditions(self):
                """Return list of g*ds(n) values."""
                return [(0, self.ds(0)), (0, self.ds(1))]

A specific problem can be solved by

.. code-block:: python

        def demo():
            problem = Problem1(Nx=20, Ny=20)
            problem.solve(linear_solver='direct')
            u = problem.solution()
            plot(u)
            flux_u = problem.solver.flux()
            plot(flux_u)
            interactive()

The complete code is found in the file ``p2D_class.py``.


.. admonition:: Pros of cons of solver/problem classes versus solver function

   What are the advantages of class ``Solver`` and ``Problem`` over the
   function implementation in the section :ref:`tut:poisson:multi:bc`?
   The primary advantage is that
   the class version works for any mesh and any composition of
   boundary conditions, while the solver function is tied to a mesh
   over the unit square, only one type of boundary condition on a
   each side, and a piecewise constant :math:`p` function. The programmer has
   to supply more code in the class version, but gets greater flexibility.
   The disadvantage of the class version is that it applies the class
   concept and one needs experience with Python class programming.




Handy methods in key FEniCS objects
-----------------------------------

.. index:: pydoc

In general,
``pydoc fenics.X`` shows the documentation of any name ``X``
and lists all the methods (i.e.g, functions in the class) that
can be called. Below, we list just a few, but very useful, methods
in the most central FEniCS classes.

Mesh
~~~~

Let ``mesh`` be a ``Mesh`` object.

  * ``mesh.coordinates()`` returns an array of the coordinates of
     the vertices in the mesh.

  * ``mesh.num_cells()`` returns the number of cells (triangles)
    in the mesh,

  * ``mesh.num_vertices()`` returns the number of vertices in
    the mesh (with our choice of linear Lagrange elements this equals the
    number of nodes, ``len(u_array)``, or dimension of the space ``V.dim()``),

  * ``mesh.cells()`` returns the vertex numbers of the vertices in
    each cell as a ``numpy`` array with shape
    (*number of cells*, *number of vertices in a cell*),

  * ``mesh.hmin()`` returns the minimum cell diameter ("smallest cell"),

  * ``mesh.hmax()`` returns the maximum cell diameter ("largest cell").

  * ``mesh.topology().dim()`` returns the number of physical dimensions of
    the mesh.

Writing ``print(mesh)`` dumps a short, pretty-print description
of the mesh (``print(mesh)`` actually displays the result of ``str(mesh)``,
which defines the pretty print):

.. code-block:: text

        <Mesh of topological dimension 2 (triangles) with
        16 vertices and 18 cells, ordered>

Function space
~~~~~~~~~~~~~~

Let ``V`` be a ``FunctionSpace`` object.

 * ``V.mesh()`` returns the associated mesh.

 * ``V.dim()`` returns the dimension (number of degrees of freedom).

 * ``V.ufl_element()`` returns the associated finite element.

Function
~~~~~~~~

Let ``u`` be a ``Function`` object.

 * ``u.function_space()`` returns the associated function space.

 * ``u.vector()`` returns the vector object of degrees of freedom.

 * ``u.vector().array()`` returns a copy of the degrees of freedom
   in a ``numpy`` array.

