.. !split

.. _ch:subdomains:

Mesh generation, subdomains and boundary conditions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


..

    In this chapter, we focus on a fundamental step in the solution of
    many PDE problems: the generation of a mesh, and the specification of subdomains and boundary conditions. Our starting point is the convection-diffusion equation, which extends the Poisson equation
    (the diffusion equation) from the previous chapter to take into
    account the effects of convection.



Physical problem formulation
============================

We will simulate the conduction of heat in an insulated pipe via both
diffusion and convection (transport). The inner diameter of the pipe
is :math:`4\,\mathrm{cm}`, its thickness is 4mm, the thickness of the
surrounding insulation is :math:`10\,\mathrm{mm}`, and its length is
:math:`50\,\mathrm{cm}`. We assume that the temperature of the water at the
inlet is 42 degrees centigrade and the temperature of the surrounding
air is 22 degrees centigrade. We also assume that the pipe transmits
0.1 liters of water per second. A sketch of the pipe is given in
Figure X.

[**AL 28**: Add nice 3D graphics here...]

To compute the temperature distribution in the pipe, we need to set
boundary conditions, both at the inflow and outflow, as well as on the
boundary of the insulating layer which is exposed to the surrounding
air. We do this by assuming that the temperature at the inlet is 42
degrees, for the water as well as for the pipe and the insulating
layer. We similarly assume the temperature to be 22 degrees in all
three layers at the outflow. The boundary of the insulating layer is
also assumed to have the temperature 22 degrees.

[**hpl 29**: How to you realize this setup in practice? One big water reservoir at 42 C, and then a long pipe from that reservoir surrounded by free air? Convection is very efficient compared to diffusion, so the pipe has to be very long for the water to lose heat. At the outlet out the pipe, I don't think you can assume 22 C in the water; it will flow out with little heat loss - 40 C, e.g. A possible boundary condition for the water is to say "hardly no change" in the temperature, i.e., :math:`\partial u/\partial n=0`. That will pick up heat loss along the pipe and be an okay approximation.]

To compute the temperature distribution, we also need to know the
value of the thermal conductivity :math:`\lambda` $[\mathrm{W}\cdot\mathrm{m}^{-1}\cdot\mathrm{K}^{-1}]$ for water, pipe,
and insulation. From a book of physical tables or from the internet,
we find the following values that we will use for our simulation:
:math:`\lambda_{\textrm{water}} = 0.6\,\mathrm{W}\cdot\mathrm{m}^{-1}\cdot\mathrm{K}^{-1}`, :math:`\lambda_{\textrm{pipe}} = 18\,\mathrm{W}\cdot\mathrm{m}^{-1}\cdot\mathrm{K}^{-1}` (stainless steel), and :math:`\lambda_{\textrm{insul}} = 0.035\,\mathrm{W}\cdot\mathrm{m}^{-1}\cdot\mathrm{K}^{-1}`
(styrofoam). We will also need to know the density and specific heat
of water, which we set to :math:`\rho = 1\,\mathrm{kg}/\mathrm{dm}^3` and :math:`c
= 4.184\,\mathrm{kJ} / (\mathrm{kg} \cdot \mathrm{K})` (one
:math:`\mathrm{kcal}` per :math:`\mathrm{kg} \cdot \mathrm{K}`), respectively.
[**hpl 30**: You also need :math:`c\varrho` for steel and the other material. The idea with scaling is that you don't need to find 3 parameters per material, all you have to do is to find the fractions. Of course, if you now you have steel and styrofoam, then that fraction requires you to look up the values.]

Finally, we need to know the velocity field for the water flowing
through the pipe. We know the total flow rate of water (0.1 liters per
second). If the flow is laminar (Poiseuille flow), we know that the
velocity profile is a quadratic function in the radius with its
maximum at the center and zero velocity on the boundary. We may thus
compute the velocity profile from the dimensions of the pipe. In
particular, we know that the velocity profile takes the form

.. math::
         \beta(x) = (0, 0, C (a - r)^2), 

where :math:`r = \sqrt{x^2 + y^2}`. The flow rate is then

.. math::
         Q = \int_0^a C (a - r)^2 \, 2\pi r {\, \mathrm{d}r}
             = 2 \pi Ca^4 \int_0^1 s (1 - s)^2 {\, \mathrm{d}s}
             = \pi Ca^4 / 6 

Knowing that :math:`Q = 0.1\,\mathrm{dm}^3 / \mathrm{s}`, we can solve for :math:`C` and
find :math:`C = 0.6\,\mathrm{dm}^3 / (\pi a^4)`.

Mathematical problem formulation          (2)
=============================================

[**hpl 31**: I think you should start with the incompressible version. I don't remember the compressible version of the heat equation - it has more terms than you include here (e.g., pressure work :math:`p\nabla\cdot u`). In the incompressible case, which we deal with anyway, :math:`c\varrho` is outside of the derivative even with :math:`c\varrho` vary. Remember that they vary here between all the materials. I would also drop the :math:`f` term as the scaling with and without :math:`f` will often be different.]

We will model the conduction of heat in the pipe using the standard
convection-diffusion equation:

.. _Eq:ftut:convdiff:

.. math::

    \tag{52}
    -\nabla \cdot (\lambda\nabla u) + \nabla \cdot (c\rho\beta u) = f.
        

Here, :math:`u` denotes the temperature, :math:`\lambda` is the thermal
conductivity, :math:`c` is the specific heat, :math:`\rho` is the density, :math:`\beta`
is the velocity field, and :math:`f` is the source term. Since our problem
does not have a source term, we will set :math:`f = 0`.

The convection-diffusion equation is often stated in the following slightly modified form:

.. math::
        
            -\nabla \cdot (\lambda\nabla u) + c\rho\beta \cdot \nabla u = f.
        

This formulation is equivalent to :ref:`(52) <Eq:ftut:convdiff>` if the velocity
field :math:`\beta` is divergence free; that is, if :math:`\nabla \cdot \beta = 0`:
:math:`\nabla \cdot (\beta u) = (\nabla \cdot \beta) u + \beta \cdot \nabla
u = \beta \cdot \nabla u`.

Scaling the equation
====================

Before we can solve the PDE, we must first introduce dimensionless
quantities since, strictly speaking, our program can not work with
units, only with numbers. We let :math:`L` be a reference length, let :math:`T` be
a reference time length, let :math:`U` be a reference temperature, and let
:math:`P` be a reference power (energy per unit time). We then introduce the
following dimensionless quantities:

.. math::
        
        \bar x = \frac{x}{L},\ 
        \bar y = \frac{y}{L},\ 
        \bar z = \frac{z}{L},\ 
        \bar u = \frac{u}{U},\ 
        \bar\beta = \frac{\beta}{LT^{-1}},
        \bar f = \frac{f}{PL^{-3}}.
        

[**hpl 32**: You will scale :math:`\beta` by some characteristic velocity :math:`V` and avoid introducing any time here as the problem is stationary. You need to scale :math:`\varrho`, :math:`c`, and :math:`\lambda` too as they vary in space. These are piecewise constant functions, so you can scale with the value in one of the materials.]

The dimensionless coordinates :math:`\bar x`, :math:`\bar y` and :math:`\bar z`
also lead to dimensionless derivatives:
:math:`\bar\nabla =
(\partial / \partial \bar x,
 \partial / \partial \bar y,
 \partial / \partial \bar z)
 = L \nabla`.
Inserting :math:`u = U\bar u`, :math:`\beta = L^{-1}T\bar\beta`, and :math:`f = L^{-3}P\bar f` into the convection-diffusion equation :ref:`(52) <Eq:ftut:convdiff>` and using :math:`\nabla = L^{-1}\bar\nabla`, we obtain

.. math::
        
          -L^{-1}\bar\nabla \cdot
          (\lambda L^{-1}\bar\nabla(U\bar u))
          +L^{-1}\bar\nabla \cdot (c\rho LT^{-1}\bar\beta U\bar u)
          = L^{-3}P \bar f.
        

Rearranging the factors :math:`L, U, T, P`, we obtain

.. math::
        
          -\bar\nabla \cdot
          (LUP^{-1}\lambda \bar\nabla \bar u)
          +\bar\nabla \cdot \left(L^3UT^{-1}P^{-1}c\rho\bar\beta \bar u\right) = \bar f.
        

Finally, we identify the two dimensionless parameters :math:`\bar\lambda` and
:math:`\bar c` given by

.. math::
        
          \bar\lambda = LUP^{-1}\lambda, \quad
          \bar c = L^3UT^{-1}P^{-1}c\rho.
        

[**hpl 33**: You will typically get some Peclet number here as the only dimensionless parameter, and then you will have scaled :math:`\varrho`, :math:`c`, and :math:`\lambda` with fractions of material parameters in different materials. I can do this :-)]

Let's double-check that these are indeed dimensionless quantities. We have

.. math::
        
          
          [\bar\lambda]
          &= [LUP^{-1}\lambda]
          = [LUP^{-1}] \cdot [\lambda]
          = [LUP^{-1}] \cdot [\mathrm{W}\cdot\mathrm{m}^{-1}\cdot\mathrm{K}^{-1}] \\ 
          &= [LUP^{-1}] \cdot [L^{-1}U^{-1}P]
          = [LUP^{-1} \cdot L^{-1}U^{-1}P] = [1].
          
        

Similarly, we have

.. math::
        
          
          [L^3UT^{-1}P^{-1}c\rho]
          &= [L^3UT^{-1}P^{-1}] \cdot [c] \cdot [\rho] \\ 
          &= [L^3UT^{-1}P^{-1}] \cdot
            [\mathrm{kJ} / (\mathrm{kg} \cdot \mathrm{K})] \cdot
            [\mathrm{kg} / \mathrm{dm}^3] \\ 
          &= [L^3UT^{-1}P^{-1}] \cdot [PTU^{-1} \cdot L^{-3}]
          = [1].
          
        

We thus obtain the dimensionless and fully scaled convection-diffusion equation
\[
  -\bar\nabla \cdot
  (\bar\lambda \bar\nabla \bar u)
  +\bar\nabla \cdot \left(c\bar\beta \bar u\right) = \bar f.
\]
The reference quantities :math:`L`, :math:`T`, :math:`U` and :math:`P` may be chosen arbitrarily.
[**hpl 34**: Normally, these are implied by the problem setting and the desire to have all variables of unit size. :math:`L` can be the length of the pipe or the diameter (I would choose the diameter). :math:`U` is given from the boundary conditions (here 42 C is natural), :math:`V` is given by :math:`Q`.]
If working with very large or very small quantities, one may want to choose for example :math:`L` to obtain a domain of unit size. However, for our problem this is not necessary. We will therefore make the most straightforward choice which is to use standard SI units. We thus take
:math:`L = 1\,\mathrm{m}`,
:math:`T = 1\,\mathrm{s}`,
:math:`U = 1\,\mathrm{K}`, and
:math:`P = 1\,\mathrm{W}`. The scaled variables and parameters :math:`\bar u`, :math:`\bar\beta`, :math:`\bar \lambda` and so on may then be easily computed by expressing everything in standard SI units and then simply dropping the units.

In the following we will simply write :math:`u` in place of :math:`\bar{u}` but remember that the :math:`u` we compute is actually :math:`\bar u` and the actual temperature will be :math:`u\,\mathrm{K}`:

.. _Eq:ftut:convdiff,scaled:

.. math::

    \tag{53}
    -\nabla \cdot (\lambda \nabla  u)
          +\nabla \cdot \left(c\beta u\right) = f.
        

[**hpl 35**: I would use the incompressible version of the heat equation everywhere; then we know it is correct.]
Furthermore, since only derivatives of :math:`u` appear in the equation, adding a constant offset to :math:`u` does not change the equation. We may therefore work in Kelvin (:math:`\mathrm{K}`) as well as in degrees centigrade without needing to rescale the equation.

Finite element variational formulation          (2)
===================================================

The finite element variational formulation of the convection diffusion
equation is obtained in the same way as for the Poisson equation in
the previous chapter, by multiplying the equation with a test function
:math:`v`, integrating over the domain :math:`\Omega`, and integrating terms with
second-derivatives by parts. For the (scaled) convection-diffusion
equation :ref:`(53) <Eq:ftut:convdiff,scaled>`, we have one such term, namely
:math:`-\nabla \cdot (\lambda u)`. For this term, integration by parts gives

.. math::
        
          -\int_{\Omega} (\nabla \cdot (\lambda \nabla u)) \, v {\, \mathrm{d}x}
          = \int_{\Omega} \lambda \nabla u \cdot \nabla v {\, \mathrm{d}x}
            - \int_{\partial\Omega} \lambda \nabla u \cdot n \, v {\, \mathrm{d}s}.
        

Since we assume Dirichlet boundary conditions on the entire boundary, we take the test function :math:`v` to be zero on :math:`\partial\Omega` and thus obtain the following variational problem: find :math:`u \in V` such that

.. math::
        
          \int_{\Omega} \lambda \nabla u \cdot \nabla v {\, \mathrm{d}x}
          + \int_{\Omega} \nabla \cdot (c\beta u)\,v {\, \mathrm{d}x}
          = \int_{\Omega} fv {\, \mathrm{d}x},
        

for all test functions :math:`v \in V`.

The variational problem can be stated in FEniCS as follows:

.. code-block:: python

    a = lmdba*dot(grad(u), grad(v))*dx + div(c*beta*u)*v*dx
    L = f*v*dx

Note the intentional misspelling of ``lmbda`` to avoid a name clash with the built-in Python keyword ``lmbda``.

Mesh generation
===============

Subdomain markers
=================

The complete program          (2)
=================================

.. code-block:: python

    from fenics import *
    from mshr import *
    
    # Parameters for geometry
    a = 0.04
    b = a + 0.004
    c = a + 0.01
    L = 0.5
    
    # Define cylinders
    cylinder_a = Cylinder(Point(0, 0, 0), Point(0, 0, L), a, a)
    cylinder_b = Cylinder(Point(0, 0, 0), Point(0, 0, L), b, b)
    cylinder_c = Cylinder(Point(0, 0, 0), Point(0, 0, L), c, c)
    
    # Define domain and set subdomains
    domain = cylinder_c
    domain.set_subdomain(1, cylinder_b)
    domain.set_subdomain(2, cylinder_a)
    
    # Generate mesh
    mesh = generate_mesh(domain, 16)
    
    xmlfile = File('pipe.xml')
    xmlfile << mesh
    
    vtkfile = File('pipe.pvd')
    vtkfile << mesh

.. ========= Python programming and PDE solver design =========

.. ========= Making more flexible PDE solvers =========

