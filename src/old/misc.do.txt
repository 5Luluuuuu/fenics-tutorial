% if EXV:
===== Exercise: Visualize a solution in a cube =====
file=poissin_3d_func

Solve the problem $-\nabla^2 u = f$ on the unit cube $[0,1]\times[0,1]\times
[0,1]$ with $u_0 = 1 + x^2 + 2y^2 - 4z^2$ on the boundary.
Visualize the solution. Explore both the built-in visualization tool and
ParaView.

!bsol
As hinted by the filename in this exercise,
a good starting point is the `solver` function in
the program `${prog["poisson_solver"]}.py`, which solves the corresponding 2D
problem. Only two lines in the body of `solver` needs to be changed (!):
`mesh = ...`. Replace this line with

!bc pycod
mesh = UnitCubeMesh(Nx, Ny, Nz)
!ec
and add `Nz` as argument to `solver`. We implement the new $u_0$ function
in `application_test` and realize that the proper $f(x,y,z)$ function
in this new case is 2.

!bc pycod
u0 = Expression('1 + x[0]*x[0] + 2*x[1]*x[1] - 4*x[2]*x[2]', degree=2)
f = Constant(2)
u = solver(f, u0, 6, 4, 3, 1)
!ec
The numerical solution is without approximation errors so we can
reuse the unit test from 2D, but it needs an extra `Nz` parameter.

The variation in $u$ is only quadratic so a coarse mesh is okay for
visualization. Below is plot from the ParaView (left) and the built-in
visualization tool (right).  The usage is as in 2D, but now one can
use the mouse to rotate the 3D cube.

FIGURE: [fig/cube3D_quad_sol, width=800 frac=1]

We can in ParaView add a contour filter and define contour surfaces for
$u=-2,1,0,1,2,3$, then add a slice filter to get a slice with colors:

FIGURE: [fig/cube3D_quad_sol_contours, width=500 frac=0.8]

!esol
% endif

% else:
@@@CODE vol1/python/poisson_membrane.py fromto: # Curve plot@plt\.savefig

Tell about visualization in notebook...
% endif
